{"remainingRequest":"/Users/Yun/vector/website/node_modules/babel-loader/lib/index.js??ref--7-1!/Users/Yun/vector/website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/Users/Yun/vector/website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/Users/Yun/vector/website/docs/reference/tests.md","dependencies":[{"path":"/Users/Yun/vector/website/docs/reference/tests.md","mtime":1594780808402},{"path":"/Users/Yun/vector/website/.docusaurus/docusaurus-plugin-content-docs/site-docs-reference-tests-md-5d4.json","mtime":1594781223947},{"path":"/Users/Yun/vector/website/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/vector/website/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/vector/website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/vector/website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1588759133114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/Yun/vector/website/docs/reference/tests.md"],"names":["React","mdx","frontMatter","last_modified_on","title","description","status","metadata","Fields","Field","Tabs","TabItem","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","label","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tlast_modified_on: '2020-07-13',\n\ttitle: 'Unit Tests',\n\tdescription: 'Vector\\'s unit test configuration options, allowing you to unit test your Vector configuration files.',\n\tstatus: 'beta'\n};\nexport const metadata = {\n  \"id\": \"reference/tests\",\n  \"title\": \"Unit Tests\",\n  \"description\": \"Vector's unit test configuration options, allowing you to unit test your Vector configuration files.\",\n  \"source\": \"@site/docs/reference/tests.md\",\n  \"permalink\": \"/docs/reference/tests\",\n  \"editUrl\": \"https://github.com/timberio/vector/edit/master/website/docs/reference/tests.md\",\n  \"sidebar\": \"docs\",\n  \"previous\": {\n    \"title\": \"Templating\",\n    \"permalink\": \"/docs/reference/templating\"\n  },\n  \"next\": {\n    \"title\": \"Administration\",\n    \"permalink\": \"/docs/administration\"\n  }\n};\n  /* @jsx mdx */\nimport Fields from '@site/src/components/Fields';\nimport Field from '@site/src/components/Field';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nexport const rightToc = [{\n  value: 'Configuration',\n  id: 'configuration',\n  children: [{\n    value: 'inputs',\n    id: 'inputs',\n    children: []\n  }, {\n    value: 'name',\n    id: 'name-1',\n    children: []\n  }, {\n    value: 'no_outputs_from',\n    id: 'no_outputs_from',\n    children: []\n  }, {\n    value: 'outputs',\n    id: 'outputs',\n    children: []\n  }]\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`It's possible to define unit tests within a Vector configuration file that cover\na network of transforms within the topology. The intention of these tests is to\nimprove the maintainability of configs containing larger and more complex\ncombinations of transforms.`}</p>\n    <p>{`Executing tests within a config file can be done with the `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{` subcommand:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vector test /etc/vector/*.toml\n`}</code></pre>\n    {\n      /*\n          THIS FILE IS AUTOGENERATED!\n           To make changes please edit the template located at:\n           website/docs/reference/tests.md.erb\n      */\n    }\n    <h2 {...{\n      \"id\": \"configuration\"\n    }}>{`Configuration`}</h2>\n    <Tabs block={true} defaultValue=\"common\" values={[{\n      label: 'Common',\n      value: 'common'\n    }, {\n      label: 'Advanced',\n      value: 'advanced'\n    }]} mdxType=\"Tabs\">\n      <TabItem value=\"common\" mdxType=\"TabItem\">\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-toml\",\n            \"metastring\": \"title=\\\"vector.toml\\\"\",\n            \"title\": \"\\\"vector.toml\\\"\"\n          }}>{`[transforms.foo]\n  type = \"regex_parser\"\n  regex = \"^(?P<timestamp>[\\\\\\\\w\\\\\\\\-:\\\\\\\\+]+) (?P<level>\\\\\\\\w+) (?P<message>.*)$\"\n\n[[tests]]\n  # Inputs\n  [[tests.inputs]]\n    insert_at = \"foo\" # required\n    type = \"raw\" # required\n    value = \"some message contents\" # required, required when type = \"raw\"\n\n  # General\n  name = \"foo test\" # required\n\n  # Outputs\n  [[tests.outputs]]\n    # Conditions\n    conditions.type = \"check_fields\" # optional, default\n    conditions.\"message.eq\" = \"this is the content to match against\" # example\n    conditions.\"message.eq\" = [\"match this\", \"or this\"] # example\n    conditions.\"message.contains\" = \"foo\" # example\n    conditions.\"message.contains\" = [\"foo\", \"bar\"] # example\n    conditions.\"environment.ends_with\" = \"-staging\" # example\n    conditions.\"environment.ends_with\" = [\"-staging\", \"-running\"] # example\n    conditions.\"message.regex\" = \" (any|of|these|five|words) \" # example\n    conditions.\"environment.starts_with\" = \"staging-\" # example\n    conditions.\"environment.starts_with\" = [\"staging-\", \"running-\"] # example\n\n    # General\n    extract_from = \"foo\" # required\n`}</code></pre>\n      </TabItem>\n      <TabItem value=\"advanced\" mdxType=\"TabItem\">\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-toml\",\n            \"metastring\": \"title=\\\"vector.toml\\\"\",\n            \"title\": \"\\\"vector.toml\\\"\"\n          }}>{`[transforms.foo]\n  type = \"regex_parser\"\n  regex = \"^(?P<timestamp>[\\\\\\\\w\\\\\\\\-:\\\\\\\\+]+) (?P<level>\\\\\\\\w+) (?P<message>.*)$\"\n\n[[tests]]\n  # Inputs\n  [[tests.inputs]]\n    # General\n    insert_at = \"foo\" # required\n    type = \"raw\" # required\n    value = \"some message contents\" # required, required when type = \"raw\"\n\n    # Log fields\n    log_fields.message = \"some message contents\" # example\n    log_fields.host = \"myhost\" # example\n\n    # Metric\n    # General\n    metric.direction = \"plus\" # optional, no default\n    metric.name = \"duration_total\" # required\n    metric.sample_rate = 1 # optional, no default\n    metric.timestamp = \"2019-11-01T21:15:47.443232Z\" # required\n    metric.type = \"counter\" # required\n    metric.val = 10.2 # required\n\n    # Tags\n    metric.tags.host = \"foohost\" # example\n    metric.tags.region = \"us-east-1\" # example\n\n  # General\n  name = \"foo test\" # required\n  no_outputs_from = [\"foo\"] # required\n\n  # Outputs\n  [[tests.outputs]]\n    # Conditions\n    conditions.type = \"check_fields\" # optional, default\n    conditions.\"message.eq\" = \"this is the content to match against\" # example\n    conditions.\"message.eq\" = [\"match this\", \"or this\"] # example\n    conditions.\"host.exists\" = true # example\n    conditions.\"method.neq\" = \"POST\" # example\n    conditions.\"method.neq\" = [\"POST\", \"GET\"] # example\n    conditions.\"message.not_contains\" = \"some phrase to ignore\" # example\n    conditions.\"unit.not_starts_with\" = \"sys-\" # example\n    conditions.\"unit.not_ends_with\" = \".device\" # example\n    conditions.\"message.contains\" = \"foo\" # example\n    conditions.\"message.contains\" = [\"foo\", \"bar\"] # example\n    conditions.\"environment.ends_with\" = \"-staging\" # example\n    conditions.\"environment.ends_with\" = [\"-staging\", \"-running\"] # example\n    conditions.\"message.ip_cidr_contains\" = \"10.0.0.0/8\" # example\n    conditions.\"message.ip_cidr_contains\" = [\"2000::/10\", \"192.168.0.0/16\"] # example\n    conditions.\"message.regex\" = \" (any|of|these|five|words) \" # example\n    conditions.\"environment.starts_with\" = \"staging-\" # example\n    conditions.\"environment.starts_with\" = [\"staging-\", \"running-\"] # example\n\n    # General\n    extract_from = \"foo\" # required\n`}</code></pre>\n      </TabItem>\n    </Tabs>\n    <p>{`For more information about unit tests check out `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/advanced/unit-testing/\"\n      }}>{`this guide`}</a>{`.`}</p>\n    <Fields filters={true} mdxType=\"Fields\">\n      <Field common={true} defaultValue={null} enumValues={null} examples={[]} groups={[]} name={\"inputs\"} path={null} relevantWhen={null} required={true} templateable={false} type={\"[table]\"} unit={null} warnings={[]} mdxType=\"Field\">\n        <h3 {...{\n          \"id\": \"inputs\"\n        }}>{`inputs`}</h3>\n        <p>{`A table that defines a unit test input event.`}</p>\n        <Fields filters={false} mdxType=\"Fields\">\n          <Field common={true} defaultValue={null} enumValues={null} examples={[\"foo\"]} groups={[]} name={\"insert_at\"} path={\"inputs\"} relevantWhen={null} required={true} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n            <h4 {...{\n              \"id\": \"insert_at\"\n            }}>{`insert_at`}</h4>\n            <p>{`The name of a transform, the input event will be delivered to this transform in\norder to begin the test.`}</p>\n          </Field>\n          <Field common={false} defaultValue={null} enumValues={null} examples={[]} groups={[]} name={\"log_fields\"} path={\"inputs\"} relevantWhen={{\n            \"type\": \"log\"\n          }} required={true} templateable={false} type={\"table\"} unit={null} warnings={[]} mdxType=\"Field\">\n            <h4 {...{\n              \"id\": \"log_fields\"\n            }}>{`log_fields`}</h4>\n            <p>{`Specifies the log fields when the input type is 'log'.`}</p>\n            <Fields filters={false} mdxType=\"Fields\">\n              <Field common={true} defaultValue={null} enumValues={null} examples={[{\n                \"message\": \"some message contents\"\n              }, {\n                \"host\": \"myhost\"\n              }]} groups={[]} name={\"`[field-name]`\"} path={\"inputs.log_fields\"} relevantWhen={null} required={true} templateable={false} type={\"*\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field-name\"\n                }}><inlineCode parentName=\"h5\">{`[field-name]`}</inlineCode></h5>\n                <p>{`A key/value pair representing a field to be added to the input event.`}</p>\n              </Field>\n            </Fields>\n          </Field>\n          <Field common={false} defaultValue={null} enumValues={null} examples={[]} groups={[]} name={\"metric\"} path={\"inputs\"} relevantWhen={{\n            \"type\": \"metric\"\n          }} required={true} templateable={false} type={\"table\"} unit={null} warnings={[]} mdxType=\"Field\">\n            <h4 {...{\n              \"id\": \"metric\"\n            }}>{`metric`}</h4>\n            <p>{`Specifies the metric type when the input type is 'metric'.`}</p>\n            <Fields filters={false} mdxType=\"Fields\">\n              <Field common={false} defaultValue={null} enumValues={{\n                \"plus\": \"Increase the gauge\",\n                \"minus\": \"Decrease the gauge\"\n              }} examples={[\"plus\", \"minus\"]} groups={[]} name={\"direction\"} path={\"inputs.metric\"} relevantWhen={null} required={false} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"direction\"\n                }}>{`direction`}</h5>\n                <p>{`The direction to increase or decrease the gauge value.`}</p>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={null} examples={[\"duration_total\"]} groups={[]} name={\"name\"} path={\"inputs.metric\"} relevantWhen={null} required={true} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"name\"\n                }}>{`name`}</h5>\n                <p>{`The name of the metric. Defaults to `}<inlineCode parentName=\"p\">{`<field>_total`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`counter`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<field>`}</inlineCode>{`\nfor `}<inlineCode parentName=\"p\">{`gauge`}</inlineCode>{`.`}</p>\n              </Field>\n              <Field common={false} defaultValue={null} enumValues={null} examples={[1]} groups={[]} name={\"sample_rate\"} path={\"inputs.metric\"} relevantWhen={null} required={false} templateable={false} type={\"float\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"sample_rate\"\n                }}>{`sample_rate`}</h5>\n                <p>{`The bucket/distribution the metric is a part of.`}</p>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={null} examples={[]} groups={[]} name={\"tags\"} path={\"inputs.metric\"} relevantWhen={null} required={false} templateable={false} type={\"table\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"tags\"\n                }}>{`tags`}</h5>\n                <p>{`Key/value pairs representing `}<a parentName=\"p\" {...{\n                    \"href\": \"/docs/about/data-model/metric/#tags\"\n                  }}>{`metric tags`}</a>{`.`}</p>\n                <Fields filters={false} mdxType=\"Fields\">\n                  <Field common={true} defaultValue={null} enumValues={null} examples={[{\n                    \"host\": \"foohost\"\n                  }, {\n                    \"region\": \"us-east-1\"\n                  }]} groups={[]} name={\"`[tag-name]`\"} path={\"inputs.metric.tags\"} relevantWhen={null} required={true} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                    <h6 {...{\n                      \"id\": \"tag-name\"\n                    }}><inlineCode parentName=\"h6\">{`[tag-name]`}</inlineCode></h6>\n                    <p>{`Key/value pairs representing `}<a parentName=\"p\" {...{\n                        \"href\": \"/docs/about/data-model/metric/#tags\"\n                      }}>{`metric tags`}</a>{`.`}</p>\n                  </Field>\n                </Fields>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={null} examples={[\"2019-11-01T21:15:47.443232Z\"]} groups={[]} name={\"timestamp\"} path={\"inputs.metric\"} relevantWhen={null} required={true} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"timestamp\"\n                }}>{`timestamp`}</h5>\n                <p>{`Time metric was created/ingested.`}</p>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={{\n                \"counter\": \"A [counter metric type][docs.data-model.metric#counter].\",\n                \"gauge\": \"A [gauge metric type][docs.data-model.metric#gauge].\",\n                \"histogram\": \"A [distribution metric type][docs.data-model.metric#distribution].\",\n                \"set\": \"A [set metric type][docs.data-model.metric#set].\"\n              }} examples={[\"counter\", \"gauge\", \"histogram\", \"set\"]} groups={[]} name={\"type\"} path={\"inputs.metric\"} relevantWhen={null} required={true} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"type\"\n                }}>{`type`}</h5>\n                <p>{`The metric type.`}</p>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={null} examples={[10.2]} groups={[]} name={\"val\"} path={\"inputs.metric\"} relevantWhen={null} required={true} templateable={false} type={\"float\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"val\"\n                }}>{`val`}</h5>\n                <p>{`Amount to increment/decrement or gauge.`}</p>\n              </Field>\n            </Fields>\n          </Field>\n          <Field common={true} defaultValue={null} enumValues={{\n            \"raw\": \"Creates a log event where the message contents are specified in the field 'value'.\",\n            \"log\": \"Creates a log event where log fields are specified in the table 'log_fields'.\",\n            \"metric\": \"Creates a metric event, where its type and fields are specified in the table 'metric'.\"\n          }} examples={[\"raw\", \"log\", \"metric\"]} groups={[]} name={\"type\"} path={\"inputs\"} relevantWhen={null} required={true} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n            <h4 {...{\n              \"id\": \"type-1\"\n            }}>{`type`}</h4>\n            <p>{`The event type.`}</p>\n          </Field>\n          <Field common={true} defaultValue={null} enumValues={null} examples={[\"some message contents\"]} groups={[]} name={\"value\"} path={\"inputs\"} relevantWhen={{\n            \"type\": \"raw\"\n          }} required={true} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n            <h4 {...{\n              \"id\": \"value\"\n            }}>{`value`}</h4>\n            <p>{`Specifies the log message field contents when the input type is 'raw'.`}</p>\n          </Field>\n        </Fields>\n      </Field>\n      <Field common={true} defaultValue={null} enumValues={null} examples={[\"foo test\"]} groups={[]} name={\"name\"} path={null} relevantWhen={null} required={true} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n        <h3 {...{\n          \"id\": \"name-1\"\n        }}>{`name`}</h3>\n        <p>{`A unique identifier for this test.`}</p>\n      </Field>\n      <Field common={false} defaultValue={null} enumValues={null} examples={[[\"foo\"]]} groups={[]} name={\"no_outputs_from\"} path={null} relevantWhen={null} required={true} templateable={false} type={\"[string]\"} unit={null} warnings={[]} mdxType=\"Field\">\n        <h3 {...{\n          \"id\": \"no_outputs_from\"\n        }}>{`no_outputs_from`}</h3>\n        <p>{`A list of transforms that must NOT output events in order for the test to pass.`}</p>\n      </Field>\n      <Field common={true} defaultValue={null} enumValues={null} examples={[]} groups={[]} name={\"outputs\"} path={null} relevantWhen={null} required={true} templateable={false} type={\"[table]\"} unit={null} warnings={[]} mdxType=\"Field\">\n        <h3 {...{\n          \"id\": \"outputs\"\n        }}>{`outputs`}</h3>\n        <p>{`A table that defines a unit test expected output.`}</p>\n        <Fields filters={false} mdxType=\"Fields\">\n          <Field common={true} defaultValue={null} enumValues={null} examples={[]} groups={[]} name={\"conditions\"} path={\"outputs\"} relevantWhen={null} required={false} templateable={false} type={\"[table]\"} unit={null} warnings={[]} mdxType=\"Field\">\n            <h4 {...{\n              \"id\": \"conditions\"\n            }}>{`conditions`}</h4>\n            <p>{`A table that defines a collection of conditions to check against the output of\na transform. A test is considered to have passed when each condition has\nresolved true for one or more events extracted from the target transform.An\nexpected output without conditions instead prints the input and output of a\ntarget without checking its values.`}</p>\n            <Fields filters={false} mdxType=\"Fields\">\n              <Field common={true} defaultValue={\"check_fields\"} enumValues={{\n                \"check_fields\": \"Allows you to check individual fields against a list of conditions.\",\n                \"is_log\": \"Returns true if the event is a log.\",\n                \"is_metric\": \"Returns true if the event is a metric.\"\n              }} examples={[\"check_fields\", \"is_log\", \"is_metric\"]} groups={[]} name={\"type\"} path={\"outputs.conditions\"} relevantWhen={null} required={false} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"type-2\"\n                }}>{`type`}</h5>\n                <p>{`The type of the condition to execute.`}</p>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={null} examples={[{\n                \"message.eq\": \"this is the content to match against\"\n              }, {\n                \"message.eq\": [\"match this\", \"or this\"]\n              }]} groups={[]} name={\"`[field-name]`.eq\"} path={\"outputs.conditions\"} relevantWhen={{\n                \"type\": \"check_fields\"\n              }} required={false} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field-nameeq\"\n                }}><inlineCode parentName=\"h5\">{`[field-name]`}</inlineCode>{`.eq`}</h5>\n                <p>{`Check whether a fields contents exactly matches the value specified. This may\nbe a single string or a list of strings, in which case this evaluates to true\nif any of the list matches.`}</p>\n              </Field>\n              <Field common={false} defaultValue={null} enumValues={null} examples={[{\n                \"host.exists\": true\n              }]} groups={[]} name={\"`[field-name]`.exists\"} path={\"outputs.conditions\"} relevantWhen={{\n                \"type\": \"check_fields\"\n              }} required={false} templateable={false} type={\"bool\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field-nameexists\"\n                }}><inlineCode parentName=\"h5\">{`[field-name]`}</inlineCode>{`.exists`}</h5>\n                <p>{`Check whether a field exists or does not exist, depending on the provided value\nbeing `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` respectively.`}</p>\n              </Field>\n              <Field common={false} defaultValue={null} enumValues={null} examples={[{\n                \"method.neq\": \"POST\"\n              }, {\n                \"method.neq\": [\"POST\", \"GET\"]\n              }]} groups={[]} name={\"`[field-name]`.neq\"} path={\"outputs.conditions\"} relevantWhen={{\n                \"type\": \"check_fields\"\n              }} required={false} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field-nameneq\"\n                }}><inlineCode parentName=\"h5\">{`[field-name]`}</inlineCode>{`.neq`}</h5>\n                <p>{`Check whether a fields contents does not match the value specified. This may be\na single string or a list of strings, in which case this evaluates to false if\nany of the list matches.`}</p>\n              </Field>\n              <Field common={false} defaultValue={null} enumValues={null} examples={[{\n                \"message.not_contains\": \"some phrase to ignore\"\n              }, {\n                \"unit.not_starts_with\": \"sys-\"\n              }, {\n                \"unit.not_ends_with\": \".device\"\n              }]} groups={[]} name={\"`[field-name]`.not_`[condition]`\"} path={\"outputs.conditions\"} relevantWhen={{\n                \"type\": \"check_fields\"\n              }} required={false} templateable={false} type={\"any\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field-namenot_condition\"\n                }}><inlineCode parentName=\"h5\">{`[field-name]`}</inlineCode>{`.not_`}<inlineCode parentName=\"h5\">{`[condition]`}</inlineCode></h5>\n                <p>{`Check if the given `}<inlineCode parentName=\"p\">{`[condition]`}</inlineCode>{` does not match.`}</p>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={null} examples={[{\n                \"message.contains\": \"foo\"\n              }, {\n                \"message.contains\": [\"foo\", \"bar\"]\n              }]} groups={[]} name={\"`[field_name]`.contains\"} path={\"outputs.conditions\"} relevantWhen={{\n                \"type\": \"check_fields\"\n              }} required={false} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field_namecontains\"\n                }}><inlineCode parentName=\"h5\">{`[field_name]`}</inlineCode>{`.contains`}</h5>\n                <p>{`Checks whether a string field contains a string argument. This may be a single\nstring or a list of strings, in which case this evaluates to true if any of the\nlist matches.`}</p>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={null} examples={[{\n                \"environment.ends_with\": \"-staging\"\n              }, {\n                \"environment.ends_with\": [\"-staging\", \"-running\"]\n              }]} groups={[]} name={\"`[field_name]`.ends_with\"} path={\"outputs.conditions\"} relevantWhen={{\n                \"type\": \"check_fields\"\n              }} required={false} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field_nameends_with\"\n                }}><inlineCode parentName=\"h5\">{`[field_name]`}</inlineCode>{`.ends_with`}</h5>\n                <p>{`Checks whether a string field ends with a string argument. This may be a single\nstring or a list of strings, in which case this evaluates to true if any of the\nlist matches.`}</p>\n              </Field>\n              <Field common={false} defaultValue={null} enumValues={null} examples={[{\n                \"message.ip_cidr_contains\": \"10.0.0.0/8\"\n              }, {\n                \"message.ip_cidr_contains\": [\"2000::/10\", \"192.168.0.0/16\"]\n              }]} groups={[]} name={\"`[field_name]`.ip_cidr_contains\"} path={\"outputs.conditions\"} relevantWhen={{\n                \"type\": \"check_fields\"\n              }} required={false} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field_nameip_cidr_contains\"\n                }}><inlineCode parentName=\"h5\">{`[field_name]`}</inlineCode>{`.ip_cidr_contains`}</h5>\n                <p>{`Checks whether an IP field is contained within a given `}<a parentName=\"p\" {...{\n                    \"href\": \"https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\"\n                  }}>{`IP CIDR`}</a>{`\n(works with IPv4 and IPv6). This may be a single string or a list of strings,\nin which case this evaluates to true if the IP field is contained within any of\nthe CIDRs in the list.`}</p>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={null} examples={[{\n                \"message.regex\": \" (any|of|these|five|words) \"\n              }]} groups={[]} name={\"`[field_name]`.regex\"} path={\"outputs.conditions\"} relevantWhen={{\n                \"type\": \"check_fields\"\n              }} required={false} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field_nameregex\"\n                }}><inlineCode parentName=\"h5\">{`[field_name]`}</inlineCode>{`.regex`}</h5>\n                <p>{`Checks whether a string field matches a `}<a parentName=\"p\" {...{\n                    \"href\": \"https://en.wikipedia.org/wiki/Regular_expression\"\n                  }}>{`regular expression`}</a>{`.\nVector uses the `}<a parentName=\"p\" {...{\n                    \"href\": \"https://docs.rs/regex/1.3.6/regex/#syntax\"\n                  }}>{`documented Rust Regex syntax`}</a>{`. Note\nthat this condition is considerably more expensive than a regular string match\n(such as `}<inlineCode parentName=\"p\">{`starts_with`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`contains`}</inlineCode>{`) so the use of those conditions are\npreferred where possible.`}</p>\n              </Field>\n              <Field common={true} defaultValue={null} enumValues={null} examples={[{\n                \"environment.starts_with\": \"staging-\"\n              }, {\n                \"environment.starts_with\": [\"staging-\", \"running-\"]\n              }]} groups={[]} name={\"`[field_name]`.starts_with\"} path={\"outputs.conditions\"} relevantWhen={{\n                \"type\": \"check_fields\"\n              }} required={false} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n                <h5 {...{\n                  \"id\": \"field_namestarts_with\"\n                }}><inlineCode parentName=\"h5\">{`[field_name]`}</inlineCode>{`.starts_with`}</h5>\n                <p>{`Checks whether a string field starts with a string argument. This may be a\nsingle string or a list of strings, in which case this evaluates to true if any\nof the list matches.`}</p>\n              </Field>\n            </Fields>\n          </Field>\n          <Field common={true} defaultValue={null} enumValues={null} examples={[\"foo\"]} groups={[]} name={\"extract_from\"} path={\"outputs\"} relevantWhen={null} required={true} templateable={false} type={\"string\"} unit={null} warnings={[]} mdxType=\"Field\">\n            <h4 {...{\n              \"id\": \"extract_from\"\n            }}>{`extract_from`}</h4>\n            <p>{`The name of a transform, at the end of the test events extracted from this\ntransform will be checked against a table of conditions.`}</p>\n          </Field>\n        </Fields>\n      </Field>\n    </Fields>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}
{"remainingRequest":"/Users/Yun/vector/website/node_modules/babel-loader/lib/index.js??ref--9-1!/Users/Yun/vector/website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--9-2!/Users/Yun/vector/website/plugins/guides/markdownLoader.js??ref--9-3!/Users/Yun/vector/website/guides/advanced/merge-multiline-logs-with-lua.md?truncated=true","dependencies":[{"path":"/Users/Yun/vector/website/guides/advanced/merge-multiline-logs-with-lua.md","mtime":1594780808441},{"path":"/Users/Yun/vector/website/.docusaurus/guides/site-guides-advanced-merge-multiline-logs-with-lua-md-f9a.json","mtime":1594781224079},{"path":"/Users/Yun/vector/website/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/vector/website/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/vector/website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/vector/website/plugins/guides/markdownLoader.js","mtime":1594780808724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/Yun/vector/website/guides/advanced/merge-multiline-logs-with-lua.md"],"names":["React","mdx","frontMatter","last_modified_on","$schema","title","description","author_github","tags","metadata","Assumptions","CodeExplanation","SVG","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tlast_modified_on: '2020-07-13',\n\t$schema: '/.meta/.schemas/guides.json',\n\ttitle: 'Merge multi-line logs with Lua',\n\tdescription: 'Combine multi-line CSV rows into single events using Lua transform',\n\tauthor_github: 'https://github.com/a-rodin',\n\ttags: [\n\t\t'type: guide',\n\t\t'domain: transforms',\n\t\t'transform: lua'\n\t]\n};\nexport const metadata = {\n  \"categories\": [\n    {\n      \"name\": \"advanced\",\n      \"title\": \"Advanced\",\n      \"description\": \"Go beyond the basics, become a Vector pro, and extract the full potential of Vector.\",\n      \"permalink\": \"/guides/advanced\"\n    }\n  ],\n  \"coverLabel\": \"Merge multi-line logs with Lua\",\n  \"description\": \"Combine multi-line CSV rows into single events using Lua transform\",\n  \"permalink\": \"/guides/advanced/merge-multiline-logs-with-lua\",\n  \"readingTime\": \"5 min read\",\n  \"source\": \"@site/guides/advanced/merge-multiline-logs-with-lua.md\",\n  \"tags\": [\n    {\n      \"label\": \"type: guide\",\n      \"permalink\": \"/guides/tags/type-guide\"\n    },\n    {\n      \"label\": \"domain: transforms\",\n      \"permalink\": \"/guides/tags/domain-transforms\"\n    },\n    {\n      \"label\": \"transform: lua\",\n      \"permalink\": \"/guides/tags/transform-lua\"\n    }\n  ],\n  \"title\": \"Merge multi-line logs with Lua\",\n  \"truncated\": false,\n  \"prevItem\": {\n    \"title\": \"Managing Schemas in Vector\",\n    \"permalink\": \"/guides/advanced/schemas\"\n  },\n  \"nextItem\": {\n    \"title\": \"Parsing CSV logs with Lua\",\n    \"permalink\": \"/guides/advanced/parsing-csv-logs-with-lua\"\n  }\n};\n  /* @jsx mdx */\nimport Assumptions from '@site/src/components/Assumptions';\nimport CodeExplanation from '@site/src/components/CodeExplanation';\nimport SVG from 'react-inlinesvg';\nexport const rightToc = [{\n  value: 'A Minimal Example',\n  id: 'a-minimal-example',\n  children: []\n}, {\n  value: 'How It Works',\n  id: 'how-it-works',\n  children: []\n}, {\n  value: 'Safety Checks',\n  id: 'safety-checks',\n  children: []\n}, {\n  value: 'Further Steps',\n  id: 'further-steps',\n  children: []\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Assumptions name=\"guide\" mdxType=\"Assumptions\">\n      <ul>\n        <li parentName=\"ul\">{`You understand the `}<a parentName=\"li\" {...{\n            \"href\": \"/docs/reference/transforms/lua/\"\n          }}>{`basic Lua concepts`}</a>{`.`}</li>\n        <li parentName=\"ul\">{`You understand the `}<a parentName=\"li\" {...{\n            \"href\": \"/docs/about/concepts/\"\n          }}>{`basic Vector concepts`}</a>{` and understand `}<a parentName=\"li\" {...{\n            \"href\": \"/guides/getting-started/your-first-pipeline/\"\n          }}>{`how to set up a pipeline`}</a>{`.`}</li>\n        <li parentName=\"ul\">{`You know how to `}<a parentName=\"li\" {...{\n            \"href\": \"/guides/advanced/parsing-csv-logs-with-lua/\"\n          }}>{`parse CSV logs with Lua`}</a>{`.`}</li>\n      </ul>\n    </Assumptions>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/advanced/parsing-csv-logs-with-lua/\"\n      }}>{`guide on parsing CSV logs with Lua`}</a>{` describes how to parse CSV logs containing\nvalues which do not contain line breaks. However, according to `}<a parentName=\"p\" {...{\n        \"href\": \"https://tools.ietf.org/html/rfc4180\"\n      }}>{`RFC 4180`}</a>{`, CSV values enclosed in double\nquotes can contain line breaks. This means that parsing arbitrary CSV logs requires handling such lines breaks\ncorrectly.`}</p>\n    <p>{`For general case, this cannot be accomplished using the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/sources/file/#multiline\"\n      }}><inlineCode parentName=\"a\">{`multiline`}</inlineCode>{` option of the `}<inlineCode parentName=\"a\">{`file`}</inlineCode>{` source`}</a>{` because it uses regular expressions\nfor delimiting lines, and for the given use case a full-fledged CSV parser is necessary.`}</p>\n    {\n      /*\n          THIS FILE IS AUTOGENERATED!\n           To make changes please edit the template located at:\n           website/guides/advanced/merge-multiline-logs-with-lua.md.erb\n      */\n    }\n    <h2 {...{\n      \"id\": \"a-minimal-example\"\n    }}>{`A Minimal Example`}</h2>\n    <p>{`It is possible to implement merging of CSV log lines using the same `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/geoffleyland/lua-csv\"\n      }}><inlineCode parentName=\"a\">{`lua-csv`}</inlineCode></a>{` module as\nin the `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/advanced/parsing-csv-logs-with-lua/\"\n      }}>{`guide on parsing CSV logs`}</a>{`. The underlying algorithm is the following\nfollowing:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Parse incoming log line as a CSV row.`}</li>\n      <li parentName=\"ol\">{`Check the number of fields in it.`}<ol parentName=\"li\">\n          <li parentName=\"ol\">{`If the number of fields matches the expected number of fields,\nthen the log line contains all necessary fields and can be\nprocessed further.`}</li>\n          <li parentName=\"ol\">{`Otherwise, store the log line in the state of the transform and\nthen, when the next event comes, merge the subsequent log line\nwith the previous ones and repeat parsing again.`}</li>\n        </ol></li>\n    </ol>\n    <p>{`Such an algorithm can be implemented, for example, with the following transform config:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[transforms.lua]\n  inputs = []\n  type = \"lua\"\n  version = \"2\"\n  source = \"\"\"\n    csv = require(\"csv\") -- load the \\`lua-csv\\` module\n    expected_columns = 23 -- expected number of columns in incoming CSV lines\n    line_separator = \"\\\\\\\\r\\\\\\\\n\" -- note the double escaping required by the TOML format\n  \"\"\"\n  hooks.process = \"\"\"\n    function (event, emit)\n      merged_event = merge(event)\n      if merged_event == nil then -- a global variable containing the merged event\n        merged_event = event -- if it is empty, set it to the current event\n      else -- otherwise, concatenate the line in the stored merged event\n           -- with the next line\n        merged_event.log.message = merged_event.log.message ..\n                                  line_separator .. event.log.message\n      end\n\n      fields = csv.openstring(event.log.message):lines()() -- parse CSV\n      if #fields < expected_columns then\n        return -- not all fields are present in the merged event yet\n      end\n\n      -- do something with the array of the parsed fields\n      merged_event.log.csv_fields = fields -- for example, just store them in an\n                                           -- array field\n\n      emit(merged_event) -- emit the resulting event\n      merged_event = nil -- clear the merged event\n    end\n  \"\"\"\n`}</code></pre>\n    <CodeExplanation mdxType=\"CodeExplanation\">\n      <ul>\n        <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`source`}</inlineCode>{` option defines code which is executed when the transform is created.`}</li>\n        <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`hooks.process`}</inlineCode>{` option defines a function which is called for each incoming event.`}</li>\n      </ul>\n    </CodeExplanation>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How It Works`}</h2>\n    <p>{`The merging process can be represented using the following diagram:`}</p>\n    <SVG src=\"/img/merge-transform.svg\" mdxType=\"SVG\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`lua`}</inlineCode>{` transform has internal state, which can be accessed and modified from user-defined code\nusing global variables. Initially, the state is empty, which corresponds to `}<inlineCode parentName=\"p\">{`merged_event`}</inlineCode>{` variable\nbeing set to `}<inlineCode parentName=\"p\">{`nil`}</inlineCode>{`.`}</p>\n    <p>{`As events arrive to the transform, they cause the `}<inlineCode parentName=\"p\">{`merged_event`}</inlineCode>{` variable to hold an aggregated\nevent, thus making the event non-empty.`}</p>\n    <p>{`In the end, when the state holds enough data to extract all fields, a merged event is emitted and\nthe state is emptied. Then the process repeats as new events arrive.`}</p>\n    <h2 {...{\n      \"id\": \"safety-checks\"\n    }}>{`Safety Checks`}</h2>\n    <p>{`The merging algorithm used above is simple and would work for data coming from trusted sources. However,\nin general case it might happen that the CSV is malformed, so that some field is not terminated by `}<inlineCode parentName=\"p\">{`\"`}</inlineCode>{`,\nwhich can cause unbounded growth of the `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` field. In order to prevent this, it is possible to replace\nthe following lines`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-lua\"\n      }}>{`merged_event.log.message = merged_event.log.message ..\n                           line_separator .. event.log.message\n`}</code></pre>\n    <p>{`in the definition of the `}<inlineCode parentName=\"p\">{`process`}</inlineCode>{` hook by this code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-lua\"\n      }}>{`merged_event = safe_merge(merged_event, event)\nif not merged_event then\n  return\nend\n`}</code></pre>\n    <p>{`and add the following definition of the `}<inlineCode parentName=\"p\">{`safe_merge`}</inlineCode>{` function to the `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/transforms/lua/#source\"\n      }}><inlineCode parentName=\"a\">{`source`}</inlineCode></a>{`\nsection of the config:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-lua\"\n      }}>{`function safe_merge(merged_event, event)\n  if #merged_event.log.message + #event.log.message > 4096 then\n    return nil\n  else\n    merged_event.log.message = merged_event.log.message ..\n                               line_separator .. event.log.message\n    return merged_event\n  end\nend\n`}</code></pre>\n    <p>{`This function checks whether the total length of merged lines not larger than 4096 (the actual value can be made\nlarger if it is necessary by a particular use case) and, if that is the case, performs actual merging.`}</p>\n    <p>{`In general, it is recommended to always add such safety checks to the code of your custom transforms in order to\nensure that malformed input would not cause memory leaks or other kinds of undesired behavior.`}</p>\n    <h2 {...{\n      \"id\": \"further-steps\"\n    }}>{`Further Steps`}</h2>\n    <p>{`After the problem of merging multi-line logs in custom formats is solved, you might be interested\nin checking out the following guides:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/guides/advanced/unit-testing/\"\n        }}>{`Unit Testing Your Configs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/guides/advanced/custom-aggregations-with-lua/\"\n        }}>{`Custom Aggregations with Lua`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}
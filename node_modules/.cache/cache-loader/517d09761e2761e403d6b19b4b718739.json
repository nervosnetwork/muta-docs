{"remainingRequest":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/Yun/Desktop/vdocs/website/new-docs/src/exports/tags.js","dependencies":[{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/src/exports/tags.js","mtime":1595848813859},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/Desktop/vdocs/website/new-docs/node_modules/babel-loader/lib/index.js","mtime":1588759098876}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IEdpdGh1YlNsdWdnZXIgZnJvbSdnaXRodWItc2x1Z2dlcic7ZnVuY3Rpb24gZW5yaWNoVGFnKHRhZyxzZWN0aW9uKXtpZih0YWcuZW5yaWNoZWQpe3JldHVybiB0YWc7fWNvbnN0IGxhYmVsUGFydHM9dGFnLmxhYmVsLnNwbGl0KCc6ICcsMik7Y29uc3QgY2F0ZWdvcnk9bGFiZWxQYXJ0c1swXTtjb25zdCB2YWx1ZT1sYWJlbFBhcnRzWzFdO2xldCBzdHlsZT0ncHJpbWFyeSc7c3dpdGNoKGNhdGVnb3J5KXtjYXNlJ3R5cGUnOnN0eWxlPSdibHVlJzticmVhaztjYXNlJ2xldmVsJzpzdHlsZT0ncGluayc7YnJlYWs7ZGVmYXVsdDpzdHlsZT0ncHJpbWFyeSc7YnJlYWs7fXJldHVybntjYXRlZ29yeTpjYXRlZ29yeSxjb3VudDp0YWcuY291bnQsZW5yaWNoZWQ6dHJ1ZSxsYWJlbDp0YWcubGFiZWwscGVybWFsaW5rOnRhZy5wZXJtYWxpbmssc3R5bGU6c3R5bGUsdmFsdWU6dmFsdWV9O31leHBvcnQgZnVuY3Rpb24gZW5yaWNoVGFncyh0YWdzLHNlY3Rpb24pe2NvbnN0IHNsdWdnZXI9bmV3IEdpdGh1YlNsdWdnZXIoKTtyZXR1cm4gdGFncy5tYXAodGFnPT57bGV0IG5vcm1hbGl6ZWRUYWc9dGFnO2lmKHR5cGVvZiB0YWc9PSdzdHJpbmcnKXtub3JtYWxpemVkVGFnPXtsYWJlbDp0YWcscGVybWFsaW5rOmAvJHtzZWN0aW9ufS90YWdzLyR7c2x1Z2dlci5zbHVnKHRhZyl9YH07fXJldHVybiBlbnJpY2hUYWcobm9ybWFsaXplZFRhZyxzZWN0aW9uKTt9KTt9ZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RUYWdWYWx1ZSh0YWdzLGNhdGVnb3J5KXtsZXQgcHJlZml4PWNhdGVnb3J5Kyc6ICc7bGV0IHRhZz10YWdzLmZpbmQodGFnPT50YWcuc3RhcnRzV2l0aChwcmVmaXgpKTtpZih0YWcpe3JldHVybiB0YWcucmVwbGFjZShwcmVmaXgsJycpO31lbHNle3JldHVybiBudWxsO319ZXhwb3J0IGRlZmF1bHR7ZW5yaWNoVGFncyxleHRyYWN0VGFnVmFsdWV9Ow=="},{"version":3,"sources":["/Users/Yun/Desktop/vdocs/website/new-docs/src/exports/tags.js"],"names":["GithubSlugger","enrichTag","tag","section","enriched","labelParts","label","split","category","value","style","count","permalink","enrichTags","tags","slugger","map","normalizedTag","slug","extractTagValue","prefix","find","startsWith","replace"],"mappings":"AAAA,MAAOA,CAAAA,aAAP,KAA0B,gBAA1B,CAEA,QAASC,CAAAA,SAAT,CAAmBC,GAAnB,CAAwBC,OAAxB,CAAiC,CAC/B,GAAID,GAAG,CAACE,QAAR,CAAkB,CAChB,MAAOF,CAAAA,GAAP,CACD,CAED,KAAMG,CAAAA,UAAU,CAAGH,GAAG,CAACI,KAAJ,CAAUC,KAAV,CAAgB,IAAhB,CAAsB,CAAtB,CAAnB,CACA,KAAMC,CAAAA,QAAQ,CAAGH,UAAU,CAAC,CAAD,CAA3B,CACA,KAAMI,CAAAA,KAAK,CAAGJ,UAAU,CAAC,CAAD,CAAxB,CACA,GAAIK,CAAAA,KAAK,CAAG,SAAZ,CAEA,OAAOF,QAAP,EACE,IAAK,MAAL,CACEE,KAAK,CAAG,MAAR,CACA,MAEF,IAAK,OAAL,CACEA,KAAK,CAAG,MAAR,CACA,MAEF,QACEA,KAAK,CAAG,SAAR,CACA,MAXJ,CAcA,MAAO,CACLF,QAAQ,CAAEA,QADL,CAELG,KAAK,CAAET,GAAG,CAACS,KAFN,CAGLP,QAAQ,CAAE,IAHL,CAILE,KAAK,CAAEJ,GAAG,CAACI,KAJN,CAKLM,SAAS,CAAEV,GAAG,CAACU,SALV,CAMLF,KAAK,CAAEA,KANF,CAOLD,KAAK,CAAEA,KAPF,CAAP,CASD,CAED,MAAO,SAASI,CAAAA,UAAT,CAAoBC,IAApB,CAA0BX,OAA1B,CAAmC,CACxC,KAAMY,CAAAA,OAAO,CAAG,GAAIf,CAAAA,aAAJ,EAAhB,CAEA,MAAOc,CAAAA,IAAI,CAACE,GAAL,CAASd,GAAG,EAAI,CACrB,GAAIe,CAAAA,aAAa,CAAGf,GAApB,CAEA,GAAI,MAAOA,CAAAA,GAAP,EAAe,QAAnB,CAA6B,CAC3Be,aAAa,CAAG,CAACX,KAAK,CAAEJ,GAAR,CAAaU,SAAS,CAAG,IAAGT,OAAQ,SAAQY,OAAO,CAACG,IAAR,CAAahB,GAAb,CAAkB,EAA9D,CAAhB,CACD,CAED,MAAOD,CAAAA,SAAS,CAACgB,aAAD,CAAgBd,OAAhB,CAAhB,CACD,CARM,CAAP,CASD,CAED,MAAO,SAASgB,CAAAA,eAAT,CAAyBL,IAAzB,CAA+BN,QAA/B,CAAyC,CAC9C,GAAIY,CAAAA,MAAM,CAAGZ,QAAQ,CAAG,IAAxB,CAEA,GAAIN,CAAAA,GAAG,CAAGY,IAAI,CAACO,IAAL,CAAUnB,GAAG,EAAIA,GAAG,CAACoB,UAAJ,CAAeF,MAAf,CAAjB,CAAV,CAEA,GAAIlB,GAAJ,CAAS,CACP,MAAOA,CAAAA,GAAG,CAACqB,OAAJ,CAAYH,MAAZ,CAAoB,EAApB,CAAP,CACD,CAFD,IAEO,CACL,MAAO,KAAP,CACD,CACF,CAED,cAAe,CAACP,UAAD,CAAaM,eAAb,CAAf","sourcesContent":["import GithubSlugger from 'github-slugger';\n\nfunction enrichTag(tag, section) {\n  if (tag.enriched) {\n    return tag\n  }\n\n  const labelParts = tag.label.split(': ', 2);\n  const category = labelParts[0];\n  const value = labelParts[1];\n  let style = 'primary';\n\n  switch(category) {\n    case 'type':\n      style = 'blue';\n      break;\n\n    case 'level':\n      style = 'pink'\n      break;\n\n    default:\n      style = 'primary';\n      break;\n  }\n\n  return {\n    category: category,\n    count: tag.count,\n    enriched: true,\n    label: tag.label,\n    permalink: tag.permalink,\n    style: style,\n    value: value,\n  };\n}\n\nexport function enrichTags(tags, section) {\n  const slugger = new GithubSlugger();\n\n  return tags.map(tag => {\n    let normalizedTag = tag;\n\n    if (typeof(tag) == 'string') {\n      normalizedTag = {label: tag, permalink: `/${section}/tags/${slugger.slug(tag)}`};\n    }\n\n    return enrichTag(normalizedTag, section)\n  });\n}\n\nexport function extractTagValue(tags, category) {\n  let prefix = category + ': ';\n\n  let tag = tags.find(tag => tag.startsWith(prefix));\n\n  if (tag) {\n    return tag.replace(prefix, '');\n  } else {\n    return null;\n  }\n}\n\nexport default {enrichTags, extractTagValue};\n"]}]}
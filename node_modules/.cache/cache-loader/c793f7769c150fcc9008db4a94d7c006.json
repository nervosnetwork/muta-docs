{"remainingRequest":"/Users/Yun/Desktop/vdocs/website/node_modules/babel-loader/lib/index.js??ref--9-1!/Users/Yun/Desktop/vdocs/website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--9-2!/Users/Yun/Desktop/vdocs/website/plugins/guides/markdownLoader.js??ref--9-3!/Users/Yun/Desktop/vdocs/website/guides/getting-started/structuring.md","dependencies":[{"path":"/Users/Yun/Desktop/vdocs/website/guides/getting-started/structuring.md","mtime":1595085128655},{"path":"/Users/Yun/Desktop/vdocs/website/.docusaurus/guides/site-guides-getting-started-structuring-md-20b.json","mtime":1595086435157},{"path":"/Users/Yun/Desktop/vdocs/website/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/Desktop/vdocs/website/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/Desktop/vdocs/website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/Desktop/vdocs/website/plugins/guides/markdownLoader.js","mtime":1594780808724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/Yun/Desktop/vdocs/website/guides/getting-started/structuring.md"],"names":["React","mdx","frontMatter","last_modified_on","title","description","series_position","author_github","tags","metadata","Alert","Steps","Tabs","TabItem","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","label","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tlast_modified_on: '2020-07-13',\n\ttitle: 'Structuring Your Log Data',\n\tdescription: 'How to parse log data in Vector',\n\tseries_position: 2,\n\tauthor_github: 'https://github.com/zhouyun-zoe',\n\ttags: [\n\t\t'type: tutorial',\n\t\t'domain: config'\n\t]\n};\nexport const metadata = {\n  \"categories\": [\n    {\n      \"name\": \"getting-started\",\n      \"title\": \"Getting Started\",\n      \"description\": \"Take Vector from zero to production in under 10 minutes.\",\n      \"permalink\": \"/guides/getting-started\"\n    }\n  ],\n  \"coverLabel\": \"Structuring Your Log Data\",\n  \"description\": \"How to parse log data in Vector\",\n  \"permalink\": \"/guides/getting-started/structuring\",\n  \"readingTime\": \"6 min read\",\n  \"seriesPosition\": 2,\n  \"source\": \"@site/guides/getting-started/structuring.md\",\n  \"tags\": [\n    {\n      \"label\": \"type: tutorial\",\n      \"permalink\": \"/guides/tags/type-tutorial\"\n    },\n    {\n      \"label\": \"domain: config\",\n      \"permalink\": \"/guides/tags/domain-config\"\n    }\n  ],\n  \"title\": \"Structuring Your Log Data\",\n  \"truncated\": false,\n  \"prevItem\": {\n    \"title\": \"Hello World. Your First Muta Blockchain.\",\n    \"permalink\": \"/guides/getting-started/your-first-pipeline\"\n  },\n  \"nextItem\": {\n    \"title\": \"Deploying Vector\",\n    \"permalink\": \"/guides/getting-started/deploying\"\n  }\n};\n  /* @jsx mdx */\nimport Alert from '@site/src/components/Alert';\nimport Steps from '@site/src/components/Steps';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nexport const rightToc = [{\n  value: 'Tutorial',\n  id: 'tutorial',\n  children: [{\n    value: 'Setup a basic pipeline',\n    id: 'setup-a-basic-pipeline',\n    children: []\n  }, {\n    value: 'Add a parsing transform',\n    id: 'add-a-parsing-transform',\n    children: []\n  }, {\n    value: 'Test it',\n    id: 'test-it',\n    children: []\n  }]\n}, {\n  value: 'Next Steps',\n  id: 'next-steps',\n  children: []\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Structured logs are like cocktails; they're cool because they're complicated.\nIn this guide we'll build a pipeline using `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/transforms/\"\n      }}>{`transformations`}</a>{`\nthat allows us to send unstructured `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/about/data-model/\"\n      }}>{`events`}</a>{` through it that\nlook like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`172.128.80.109 - Bins5273 656 [2019-05-03T13:11:48-04:00] \\\\\"PUT /mesh\\\\\" 406 10272\n`}</code></pre>\n    <p>{`And have them coming out the other end in a structured format like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"bytes_in\":\"656\",\n  \"timestamp\":\"2019-05-03T13:11:48-04:00\",\n  \"method\":\"PUT\",\n  \"bytes_out\":\"10272\",\n  \"host\":\"172.128.80.109\",\n  \"status\":\"406\",\n  \"user\":\"Bins5273\",\n  \"path\":\"/mesh\"\n}\n`}</code></pre>\n    {\n      /*\n          THIS FILE IS AUTOGENERATED!\n           To make changes please edit the template located at:\n           website/guides/getting-started/structuring.md.erb\n      */\n    }\n    <h2 {...{\n      \"id\": \"tutorial\"\n    }}>{`Tutorial`}</h2>\n    <Steps headingDepth={3} mdxType=\"Steps\">\n      <ol>\n        <li>\n          <h3 {...{\n            \"id\": \"setup-a-basic-pipeline\"\n          }}>{`Setup a basic pipeline`}</h3>\n          <p>{`In the last guide we simply piped stdin to stdout, I'm not trying to diminish\nyour sense of achievement but that was pretty basic.`}</p>\n          <p>{`This time we're going to build a config we might use in the real world. It's\ngoing to consume logs over TCP with a `}<a parentName=\"p\" {...{\n              \"href\": \"/docs/reference/sources/socket/\"\n            }}><inlineCode parentName=\"a\">{`socket`}</inlineCode>{` source`}</a>{` and\nwrite them to an `}<a parentName=\"p\" {...{\n              \"href\": \"/docs/reference/sinks/elasticsearch/\"\n            }}><inlineCode parentName=\"a\">{`elasticsearch`}</inlineCode>{` sink`}</a>{`.`}</p>\n          <Alert type=\"info\" mdxType=\"Alert\">\n            <p>{`There's no need to run a local Elasticsearch for this guide as we can write and\neven test our config without connecting to sources or sinks (as you'll see).`}</p>\n          </Alert>\n          <p>{`The basic source to sink version of our pipeline looks like this:`}</p>\n          <pre><code parentName=\"pre\" {...{\n              \"className\": \"language-toml\",\n              \"metastring\": \"title=\\\"vector.toml\\\"\",\n              \"title\": \"\\\"vector.toml\\\"\"\n            }}>{`[sources.foo]\n  type = \"socket\"\n  address = \"0.0.0.0:9000\"\n  mode = \"tcp\"\n\n[sinks.bar]\n  inputs = [\"foo\"]\n  type = \"elasticsearch\"\n  index = \"example-index\"\n  host = \"http://10.24.32.122:9000\"\n`}</code></pre>\n          <p>{`If we were to run it then the raw data we consume over TCP would be captured in\nthe field `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{`, and the object we'd publish to Elasticsearch would look\nlike this:`}</p>\n          <pre><code parentName=\"pre\" {...{\n              \"className\": \"language-json\",\n              \"metastring\": \"title=\\\"log event\\\"\",\n              \"title\": \"\\\"log\",\n              \"event\\\"\": true\n            }}>{`{\"message\":\"172.128.80.109 - Bins5273 656 [2019-05-03T13:11:48-04:00] \\\\\"PUT /mesh\\\\\" 406 10272\",\"host\":\"foo\",\"timestamp\":\"2019-05-03T13:11:48-04:00\"}\n`}</code></pre>\n          <p>{`That's hardly structured at all! Let's remedy that by adding our first transform.`}</p>\n        </li>\n        <li>\n          <h3 {...{\n            \"id\": \"add-a-parsing-transform\"\n          }}>{`Add a parsing transform`}</h3>\n          <p>{`Nothing in this world is ever good enough for you, why should events be any\ndifferent?`}</p>\n          <p>{`Vector makes it easy to mutate events into a more (or less) structured format\nwith `}<a parentName=\"p\" {...{\n              \"href\": \"/docs/reference/transforms/\"\n            }}>{`transforms`}</a>{`. Let's parse our logs into a structured\nformat by capturing named regular expression groups with a\n`}<a parentName=\"p\" {...{\n              \"href\": \"/docs/reference/transforms/regex_parser/\"\n            }}><inlineCode parentName=\"a\">{`regex_parser`}</inlineCode>{` transform`}</a>{`.`}</p>\n          <p>{`A config can have any number of transforms and it's entirely up to you how they\nare chained together. Similar to sinks, a transform requires you to specify\nwhere its data comes from. When a sink is configured to accept data from a\ntransform the pipeline is complete.`}</p>\n          <p>{`Let's place our new transform in between our existing source and sink:`}</p>\n          <Tabs block={true} defaultValue=\"diff\" values={[{\n            label: 'Diff',\n            value: 'diff'\n          }, {\n            label: 'Full Config',\n            value: 'new_result'\n          }]} mdxType=\"Tabs\">\n            <TabItem value=\"diff\" mdxType=\"TabItem\">\n              <pre><code parentName=\"pre\" {...{\n                  \"className\": \"language-diff\",\n                  \"metastring\": \"title=\\\"vector.toml\\\"\",\n                  \"title\": \"\\\"vector.toml\\\"\"\n                }}>{` [sources.foo]\n   type = \"socket\"\n   address = \"0.0.0.0:9000\"\n   mode = \"tcp\"\n\n\n+[transforms.apache_parser]\n+  inputs = [\"foo\"]\n+  type = \"regex_parser\"\n+  field = \"message\"\n+  regex = '^(?P<host>[\\\\w\\\\.]+) - (?P<user>[\\\\w]+) (?P<bytes_in>[\\\\d]+) \\\\[(?P<timestamp>.*)\\\\] \"(?P<mathod>[\\\\w]+) (?P<path>.*)\" (?P<status>[\\\\d]+) (?P<bytes_out>[\\\\d]+)$'\n+\n [sinks.bar]\n-  inputs = [\"foo\"]\n+  inputs = [\"apache_parser\"]\n   type = \"elasticsearch\"\n   index = \"example-index\"\n   host = \"http://10.24.32.122:9000\"\n`}</code></pre>\n            </TabItem>\n            <TabItem value=\"new_result\" mdxType=\"TabItem\">\n              <pre><code parentName=\"pre\" {...{\n                  \"className\": \"language-toml\",\n                  \"metastring\": \"title=\\\"vector.toml\\\"\",\n                  \"title\": \"\\\"vector.toml\\\"\"\n                }}>{`[sources.foo]\n  type = \"socket\"\n  address = \"0.0.0.0:9000\"\n  mode = \"tcp\"\n\n[transforms.apache_parser]\n  inputs = [\"foo\"]\n  type = \"regex_parser\"\n  field = \"message\"\n  regex = '^(?P<host>[\\\\w\\\\.]+) - (?P<user>[\\\\w]+) (?P<bytes_in>[\\\\d]+) \\\\[(?P<timestamp>.*)\\\\] \"(?P<mathod>[\\\\w]+) (?P<path>.*)\" (?P<status>[\\\\d]+) (?P<bytes_out>[\\\\d]+)$'\n\n[sinks.bar]\n  inputs = [\"apache_parser\"]\n  type = \"elasticsearch\"\n  index = \"example-index\"\n  host = \"http://10.24.32.122:9000\"\n`}</code></pre>\n            </TabItem>\n          </Tabs>\n          <p>{`This regular expression looks great and it probably works, but it's best to be\nsure, right? Which leads us onto the next step.`}</p>\n        </li>\n        <li>\n          <h3 {...{\n            \"id\": \"test-it\"\n          }}>{`Test it`}</h3>\n          <p>{`No one is saying that unplanned explosions aren't cool, but you should be doing\nthat in your own time. In order to test our transform we `}<em parentName=\"p\">{`could`}</em>{` set up a local\nElasticsearch instance and run the whole pipeline, but that's an awful bother\nand Vector has a much better way.`}</p>\n          <p>{`Instead, we can write `}<a parentName=\"p\" {...{\n              \"href\": \"/guides/advanced/unit-testing/\"\n            }}>{`unit tests`}</a>{` as part of our\nconfig just like you would for regular code:`}</p>\n          <Tabs block={true} defaultValue=\"diff\" values={[{\n            label: 'Diff',\n            value: 'diff'\n          }, {\n            label: 'Full Config',\n            value: 'new_result'\n          }]} mdxType=\"Tabs\">\n            <TabItem value=\"diff\" mdxType=\"TabItem\">\n              <pre><code parentName=\"pre\" {...{\n                  \"className\": \"language-diff\",\n                  \"metastring\": \"title=\\\"vector.toml\\\"\",\n                  \"title\": \"\\\"vector.toml\\\"\"\n                }}>{`# Write the data\n[sinks.bar]\n  inputs = [\"apache_parser\"]\n  type = \"elasticsearch\"\n  index = \"example-index\"\n  host = \"http://10.24.32.122:9000\"\n+\n+[[tests]]\n+  name = \"test apache regex\"\n+\n+  [[tests.inputs]]\n+    insert_at = \"apache_parser\"\n+    type = \"raw\"\n+    value = \"172.128.80.109 - Bins5273 656 [2019-05-03T13:11:48-04:00] \\\\\"PUT /mesh\\\\\" 406 10272\"\n+\n+  [[tests.outputs]]\n+    extract_from = \"apache_parser\"\n+    [[tests.outputs.conditions]]\n+      type = \"check_fields\"\n+      \"method.eq\" = \"PUT\"\n+      \"host.eq\" = \"172.128.80.109\"\n+      \"timestamp.eq\" = \"2019-05-03T13:11:48-04:00\"\n+      \"path.eq\" = \"/mesh\"\n+      \"status.eq\" = \"406\"\n`}</code></pre>\n            </TabItem>\n            <TabItem value=\"new_result\" mdxType=\"TabItem\">\n              <pre><code parentName=\"pre\" {...{\n                  \"className\": \"language-toml\",\n                  \"metastring\": \"title=\\\"vector.toml\\\"\",\n                  \"title\": \"\\\"vector.toml\\\"\"\n                }}>{`# Consume data\n[sources.foo]\n  type = \"socket\"\n  address = \"0.0.0.0:9000\"\n  mode = \"tcp\"\n\n# Structure the data\n[transforms.apache_parser]\n  inputs = [\"foo\"]\n  type = \"regex_parser\"\n  field = \"message\"\n  regex = '^(?P<host>[\\\\w\\\\.]+) - (?P<user>[\\\\w]+) (?P<bytes_in>[\\\\d]+) \\\\[(?P<timestamp>.*)\\\\] \"(?P<mathod>[\\\\w]+) (?P<path>.*)\" (?P<status>[\\\\d]+) (?P<bytes_out>[\\\\d]+)$'\n\n# Write the data\n[sinks.bar]\n  inputs = [\"apache_parser\"]\n  type = \"elasticsearch\"\n  index = \"example-index\"\n  host = \"http://10.24.32.122:9000\"\n\n[[tests]]\n  name = \"test apache regex\"\n\n  [[tests.inputs]]\n    insert_at = \"apache_parser\"\n    type = \"raw\"\n    value = \"172.128.80.109 - Bins5273 656 [2019-05-03T13:11:48-04:00] \\\\\"PUT /mesh\\\\\" 406 10272\"\n\n  [[tests.outputs]]\n    extract_from = \"apache_parser\"\n    [[tests.outputs.conditions]]\n      type = \"check_fields\"\n      \"method.eq\" = \"PUT\"\n      \"host.eq\" = \"172.128.80.109\"\n      \"timestamp.eq\" = \"2019-05-03T13:11:48-04:00\"\n      \"path.eq\" = \"/mesh\"\n      \"status.eq\" = \"406\"\n`}</code></pre>\n            </TabItem>\n          </Tabs>\n          <p>{`This unit test spec has a name, defines an input event to feed into our pipeline\nat a specific transform (in this case our `}<em parentName=\"p\">{`only`}</em>{` transform), and defines where\nwe'd like to capture resulting events coming out along with a condition to check\nthe events against.`}</p>\n          <p>{`When we run:`}</p>\n          <pre><code parentName=\"pre\" {...{\n              \"className\": \"language-bash\"\n            }}>{`vector test ./vector.toml\n`}</code></pre>\n          <p>{`It will parse and execute our test:`}</p>\n          <pre><code parentName=\"pre\" {...{\n              \"className\": \"language-text\"\n            }}>{`Running vector.toml tests\ntest vector.toml: test apache regex ... failed\n\nfailures:\n\n--- vector.toml ---\n\ntest 'test apache regex':\n\ncheck transform 'apache_parser' failed conditions:\n  condition[0]: predicates failed: [ method.eq: \"PUT\" ]\npayloads (events encoded as JSON):\n  input: {\"timestamp\":\"2020-02-20T10:19:27.283745Z\",\"message\":\"172.128.80.109 - Bins5273 656 [2019-05-03T13:11:48-04:00] \\\\\"PUT /mesh\\\\\" 406 10272\"}\n  output: {\"bytes_in\":\"656\",\"timestamp\":\"2019-05-03T13:11:48-04:00\",\"mathod\":\"PUT\",\"bytes_out\":\"10272\",\"host\":\"172.128.80.109\",\"status\":\"406\",\"user\":\"Bins5273\",\"path\":\"/mesh\"}\n`}</code></pre>\n          <p>{`By Jove! There `}<em parentName=\"p\">{`was`}</em>{` a problem with our regular expression! Our test has pointed\nout that the predicate `}<inlineCode parentName=\"p\">{`method.eq`}</inlineCode>{` failed, and has helpfully printed our input\nand resulting events in JSON format.`}</p>\n          <p>{`This allows us to inspect exactly what our transform is doing, and it turns out\nthat the method from our Apache log is actually being captured in a field\n`}<inlineCode parentName=\"p\">{`mathod`}</inlineCode>{`.`}</p>\n          <p>{`See if you can spot the typo, once it's fixed we can run\n`}<inlineCode parentName=\"p\">{`vector test ./vector.toml`}</inlineCode>{` again and we should get this:`}</p>\n          <pre><code parentName=\"pre\" {...{\n              \"className\": \"language-text\"\n            }}>{`Running vector.toml tests\ntest vector.toml: test apache regex ... passed\n`}</code></pre>\n          <p>{`Success! Next, try experimenting by adding more `}<a parentName=\"p\" {...{\n              \"href\": \"/docs/reference/transforms/\"\n            }}>{`transforms`}</a>{` to\nyour pipeline before moving onto the next guide.`}</p>\n          <Alert type=\"info\" mdxType=\"Alert\">\n            <p>{`While we're at, did you know you can control all of Vector's field names via\nthe `}<a parentName=\"p\" {...{\n                \"href\": \"/docs/reference/global-options/#log_schema\"\n              }}>{`global `}<inlineCode parentName=\"a\">{`log_schema`}</inlineCode>{` options`}</a>{`?\nVector does not lock you into any specific schema.`}</p>\n          </Alert>\n        </li>\n      </ol>\n    </Steps>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next Steps`}</h2>\n    <p>{`Now that you're a Vector pro you'll have endless ragtag groups of misfits\ntrying to recruit you as their hacker, but it won't mean much if you can't\ndeploy Vector. Onto the next guide!`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}
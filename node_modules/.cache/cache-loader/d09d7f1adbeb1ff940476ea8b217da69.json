{"remainingRequest":"/Users/Yun/vector/website/node_modules/babel-loader/lib/index.js??ref--9-1!/Users/Yun/vector/website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--9-2!/Users/Yun/vector/website/plugins/guides/markdownLoader.js??ref--9-3!/Users/Yun/vector/website/guides/advanced/schemas.md","dependencies":[{"path":"/Users/Yun/vector/website/guides/advanced/schemas.md","mtime":1594780808443},{"path":"/Users/Yun/vector/website/.docusaurus/guides/site-guides-advanced-schemas-md-5cd.json","mtime":1594781224079},{"path":"/Users/Yun/vector/website/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/vector/website/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/vector/website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/vector/website/plugins/guides/markdownLoader.js","mtime":1594780808724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/Yun/vector/website/guides/advanced/schemas.md"],"names":["React","mdx","frontMatter","last_modified_on","$schema","title","description","author_github","tags","metadata","Alert","Assumptions","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tlast_modified_on: '2020-07-13',\n\t$schema: '/.meta/.schemas/guides.json',\n\ttitle: 'Managing Schemas in Vector',\n\tdescription: 'Learn how to manage log schemas with Vector.',\n\tauthor_github: 'https://github.com/hoverbear',\n\ttags: [\n\t\t'type: guide'\n\t]\n};\nexport const metadata = {\n  \"categories\": [\n    {\n      \"name\": \"advanced\",\n      \"title\": \"Advanced\",\n      \"description\": \"Go beyond the basics, become a Vector pro, and extract the full potential of Vector.\",\n      \"permalink\": \"/guides/advanced\"\n    }\n  ],\n  \"coverLabel\": \"Managing Schemas in Vector\",\n  \"description\": \"Learn how to manage log schemas with Vector.\",\n  \"permalink\": \"/guides/advanced/schemas\",\n  \"readingTime\": \"8 min read\",\n  \"source\": \"@site/guides/advanced/schemas.md\",\n  \"tags\": [\n    {\n      \"label\": \"type: guide\",\n      \"permalink\": \"/guides/tags/type-guide\"\n    }\n  ],\n  \"title\": \"Managing Schemas in Vector\",\n  \"truncated\": false,\n  \"prevItem\": {\n    \"title\": \"Custom Aggregations with Lua\",\n    \"permalink\": \"/guides/advanced/custom-aggregations-with-lua\"\n  },\n  \"nextItem\": {\n    \"title\": \"Merge multi-line logs with Lua\",\n    \"permalink\": \"/guides/advanced/merge-multiline-logs-with-lua\"\n  }\n};\n  /* @jsx mdx */\nimport Alert from '@site/src/components/Alert';\nimport Assumptions from '@site/src/components/Assumptions';\nexport const rightToc = [{\n  value: 'Overriding Global Field Names',\n  id: 'overriding-global-field-names',\n  children: [{\n    value: 'Example: Custom timestamp field',\n    id: 'example-custom-timestamp-field',\n    children: []\n  }]\n}, {\n  value: 'Pipeline field filtering',\n  id: 'pipeline-field-filtering',\n  children: [{\n    value: 'Example: Filtering data for GDPR compliance',\n    id: 'example-filtering-data-for-gdpr-compliance',\n    children: []\n  }]\n}, {\n  value: 'Sink field filtering',\n  id: 'sink-field-filtering',\n  children: [{\n    value: 'Example: Per host kafka topics',\n    id: 'example-per-host-kafka-topics',\n    children: []\n  }]\n}, {\n  value: 'Moving and Concatenating Fields',\n  id: 'moving-and-concatenating-fields',\n  children: [{\n    value: 'Example: Mooshing together name fields',\n    id: 'example-mooshing-together-name-fields',\n    children: []\n  }]\n}, {\n  value: 'Coercing Data Types',\n  id: 'coercing-data-types',\n  children: [{\n    value: 'Example: Coercing into a specific format',\n    id: 'example-coercing-into-a-specific-format',\n    children: []\n  }]\n}, {\n  value: 'Working with data formats',\n  id: 'working-with-data-formats',\n  children: []\n}, {\n  value: 'Parting thoughts',\n  id: 'parting-thoughts',\n  children: []\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Assumptions name=\"guide\" mdxType=\"Assumptions\">\n      <ul>\n        <li parentName=\"ul\">{`You understand the `}<a parentName=\"li\" {...{\n            \"href\": \"/docs/about/concepts/\"\n          }}>{`basic Vector concepts`}</a>{` and understand `}<a parentName=\"li\" {...{\n            \"href\": \"/guides/getting-started/your-first-pipeline/\"\n          }}>{`how to set up a pipeline`}</a>{`.`}</li>\n      </ul>\n    </Assumptions>\n    <p>{`Data comes in all shapes and sizes. Vector has an array (let's call it a vector 😎) of composable functionality for\ndecoding your events in the right format, transforming them into the right shape, and passing that data on downstream.`}</p>\n    <p>{`While your first uses of Vector might be connecting `}<inlineCode parentName=\"p\">{`stdin`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`honeycomb`}</inlineCode>{`, eventually you're going to have other\nrequirements. Maybe regional laws prevent you from shipping certain data, or you need to do some data mudging to conform\nsome logs to the rest of your system. With a little configuration we can teach Vector to solve all these problems!`}</p>\n    {\n      /*\n          THIS FILE IS AUTOGENERATED!\n           To make changes please edit the template located at:\n           website/guides/advanced/schemas.md.erb\n      */\n    }\n    <h2 {...{\n      \"id\": \"overriding-global-field-names\"\n    }}>{`Overriding Global Field Names`}</h2>\n    <p>{`By default, Vector primarily operates on three fields: `}<inlineCode parentName=\"p\">{`host`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`timestamp`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"host\": \"my.host.com\",\n  \"message\": \"some important content\",\n  \"timestamp\": \"2019-11-01T21:15:47+00:00\"\n}\n`}</code></pre>\n    <p>{`Vector sets these fields on logs as it ingests data (from a `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/sources/\"\n      }}>{`source`}</a>{`). It may be that your data does not\nfollow this convention. In this case you can modify the global defaults for all incoming data in the `}<inlineCode parentName=\"p\">{`log_schema`}</inlineCode>{`\nsection of your `}<inlineCode parentName=\"p\">{`vector.toml`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[log_schema]\nhost_key = \"instance\" # default \"host\"\nmessage_key = \"info\" # default \"message\"\ntimestamp_key = \"datetime\" # default \"timestamp\"\n\n# Sources, transforms, and sinks...\n`}</code></pre>\n    <Alert type=\"info\" mdxType=\"Alert\">\n      <p>{`Not all sources use the `}<inlineCode parentName=\"p\">{`host`}</inlineCode>{` field.`}</p>\n    </Alert>\n    <p>{`We find this feature is useful when used with simple configs! As your number of components grows, your needs will change\nand you'll likely need to configure this at a more fine grained level.`}</p>\n    <h3 {...{\n      \"id\": \"example-custom-timestamp-field\"\n    }}>{`Example: Custom timestamp field`}</h3>\n    <p>{`Some services will produce logs with the timestamp field mapped to `}<inlineCode parentName=\"p\">{`@timestamp`}</inlineCode>{` or some other value.`}</p>\n    <p>{`If your vector pipeline is only working with data passing through these systems, you can add the following to your\n`}<inlineCode parentName=\"p\">{`vector.toml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[log_schema]\n  timestamp_key = \"@timestamp\"  # Applies to all sources, sinks, and transforms!\n\n[sources.my_naming_confused_source]\n  type = \"logplex\"\n  address = \"0.0.0.0:8088\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pipeline-field-filtering\"\n    }}>{`Pipeline field filtering`}</h2>\n    <p>{`Sometimes it is advantageous to filter out specific fields during the pipeline. You can use a `}<inlineCode parentName=\"p\">{`remove_fields`}</inlineCode>{` transform\nto do this.`}</p>\n    <p>{`Commonly you'll want to do this near either the source or sink of your pipeline. Some example use cases:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Dropping `}<inlineCode parentName=\"li\">{`email`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`passport_number`}</inlineCode>{`, or other personally identifiable information from logs before distributing them\nto third party services.`}</li>\n      <li parentName=\"ul\">{`Filtering data for compliance with the GDPR or other regional laws. (eg EU to US dataflows)`}</li>\n      <li parentName=\"ul\">{`Reducing the volume of data on a particular endpoint.`}</li>\n    </ul>\n    <p>{`A transform of this type looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[transforms.strip_personal_details]\ntype = \"remove_fields\"\ninputs = [\"my-source-id\"]\nfields = [\"email\", \"passport_number\"]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-filtering-data-for-gdpr-compliance\"\n    }}>{`Example: Filtering data for GDPR compliance`}</h3>\n    <p>{`Let's pretend we have a nice well behaved application piping Vector logs like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{ \"id\": \"user1\", \"gdpr\": false, \"email\": \"us-user1@timber.io\" }\n{ \"id\": \"user2\", \"gdpr\": false, \"email\": \"us-user2@timber.io\" }\n{ \"id\": \"user3\", \"gdpr\": true, \"email\": \"eu-user3@timber.io\" }\n`}</code></pre>\n    <p>{`In our theoretical product, we're expanding into the EU and want to comply with the GDPR. In our case, that means our\napplication can't send EU user data to our US based kafka. (We're not lawyers, this is not a magic GDPR-compliance\nconfig, just a little example!)`}</p>\n    <p>{`We can build a config that will do the first part of this, but we'll just output to console for ease of this example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`data_dir = \"./data\"\ndns_servers = []\n\n[sources.application]\nmax_length = 102400\ntype = \"stdin\"\n\n[transforms.parse]\ninputs = [\"application\"]\ndrop_field = true\ndrop_invalid = false\ntype = \"json_parser\"\n\n[transforms.not_gdpr]\ntype = \"filter\"\ninputs = [\"parse\"]\ncondition.type = \"check_fields\"\ncondition.\"gdpr.eq\" = \"false\"\n\n[transforms.gdpr_to_strip]\ntype = \"filter\"\ninputs = [\"parse\"]\ncondition.type = \"check_fields\"\ncondition.\"gdpr.eq\" = \"true\"\n\n[transforms.gdpr_stripped]\ntype = \"remove_fields\"\ninputs = [\"gdpr_to_strip\"]\nfields = [\"email\"]\n\n[sinks.console]\nhealthcheck = true\ninputs = [\"not_gdpr\", \"gdpr_stripped\"]\ntype = \"console\"\nencoding = \"json\"\n[sinks.console.buffer]\ntype = \"memory\"\nmax_events = 500\nwhen_full = \"block\"\n`}</code></pre>\n    <p>{`Let's have a look:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ cat <<-EOF | cargo run -- --config test.toml\n{ \"id\": \"user1\", \"gdpr\": false, \"email\": \"us-user1@timber.io\" }\n{ \"id\": \"user2\", \"gdpr\": false, \"email\": \"us-user2@timber.io\" }\n{ \"id\": \"user3\", \"gdpr\": true, \"email\": \"eu-user3@timber.io\" }\nEOF\nFeb 05 16:13:59.241  INFO source{name=application type=stdin}: vector::sources::stdin: finished sending\n{\"id\":\"user1\",\"timestamp\":\"2020-02-06T00:13:59.241801798Z\",\"host\":\"obsidian\",\"email\":\"us-user1@timber.io\",\"gdpr\":false}\n{\"gdpr\":false,\"host\":\"obsidian\",\"email\":\"us-user2@timber.io\",\"timestamp\":\"2020-02-06T00:13:59.241815255Z\",\"id\":\"user2\"}\n{\"id\":\"user3\",\"gdpr\":true,\"host\":\"obsidian\",\"timestamp\":\"2020-02-06T00:13:59.241816010Z\"}\nFeb 05 16:15:27.945  INFO vector: Shutting down.\n`}</code></pre>\n    <p>{`Don't know where events are coming from? You can use the `}<inlineCode parentName=\"p\">{`geoip`}</inlineCode>{` transform an `}<inlineCode parentName=\"p\">{`ipv4`}</inlineCode>{` field and get a grip on that!`}</p>\n    <h2 {...{\n      \"id\": \"sink-field-filtering\"\n    }}>{`Sink field filtering`}</h2>\n    <p>{`While it's often reasonable to remove this kind of data at the pipeline level, we identified use cases that involve\nusing values in sinks from these fields in sink configuration.`}</p>\n    <p>{`The applications for this include some of the reasons discussed in\n`}<a parentName=\"p\" {...{\n        \"href\": \"#pipeline-field-filtering\"\n      }}>{`\"Pipeline field filtering\"`}</a>{`, but also:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Stripping off routing related fields`}</li>\n      <li parentName=\"ul\">{`Ensuring a specific sink will only ever output specific fields (or never output certain fields)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-per-host-kafka-topics\"\n    }}>{`Example: Per host kafka topics`}</h3>\n    <p>{`Lets take a look at what that might look like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[sinks.output]\n  inputs = [\"demo\"]\n  type = \"kafka\"\n\n  # Put events in the host specific topic.\n  topic = \"{{service}}\"\n  encoding.except_fields = [\"service\"] # Remove this field now and save some bytes\n  # ...\n`}</code></pre>\n    <Alert type=\"warning\" mdxType=\"Alert\">\n      <p>{`Gotcha: Not all fields are templatable! Make sure to check the documentation and test before deploying. If you find\na field which you want templatable open an issue and let us know.`}</p>\n    </Alert>\n    <h2 {...{\n      \"id\": \"moving-and-concatenating-fields\"\n    }}>{`Moving and Concatenating Fields`}</h2>\n    <p>{`It's fairly common for one part of your pipeline to expect a field to be named differently than another part! Vector can\nslide data around for you with the `}<inlineCode parentName=\"p\">{`rename_fields`}</inlineCode>{` transform.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[transforms.rename_timestamp]\n  type = \"rename_fields\"\n  inputs = [\"source0\"]\n  fields.timestamp = \"@timestamp\"\n`}</code></pre>\n    <p>{`Other times, you need to concatenate two fields together. Vector has an\n`}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/transforms/add_fields/\"\n      }}><inlineCode parentName=\"a\">{`add_fields`}</inlineCode></a>{` transform that you can use alongside the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/transforms/add_fields/\"\n      }}><inlineCode parentName=\"a\">{`remove_fields`}</inlineCode></a>{` transform to do just that!`}</p>\n    <p>{`It's useful for when:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`You need to adapt or reshape data to fit into possibly older or newer systems.`}</li>\n      <li parentName=\"ul\">{`You need to concatenate `}<inlineCode parentName=\"li\">{`first_name`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`last_name`}</inlineCode>{` into a `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{` field. (Suppose they didn't read\n`}<a parentName=\"li\" {...{\n          \"href\": \"https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/\"\n        }}>{`Falsehoods about names`}</a>{`).`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"example-mooshing-together-name-fields\"\n    }}>{`Example: Mooshing together name fields`}</h3>\n    <p>{`Let's pretend one of your teammates falsely assumed folks always have first and last names, so we have a `}<inlineCode parentName=\"p\">{`first_name`}</inlineCode>{`\nand a `}<inlineCode parentName=\"p\">{`last_name`}</inlineCode>{` field coming from a source, and we'd like to output a `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` field to a sink.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[transforms.moosh_names]\n  type = \"add_fields\"\n  inputs = [\"source0\"]\n  fields.name = \"{{first_name}} {{last_name}}\"\n\n[transforms.drop_old_names]\n  type = \"remove_fields\"\n  inputs = [\"moosh_names\"]\n  fields = [\"first_name\", \"last_name\"]\n`}</code></pre>\n    <Alert type=\"info\" mdxType=\"Alert\">\n      <p>{`What if you had to do this in reverse? Try using the `}<a parentName=\"p\" {...{\n          \"href\": \"/docs/reference/transforms/regex_parser/\"\n        }}><inlineCode parentName=\"a\">{`regex_parser`}</inlineCode></a>{` or\n`}<a parentName=\"p\" {...{\n          \"href\": \"/docs/reference/transforms/split/\"\n        }}><inlineCode parentName=\"a\">{`split`}</inlineCode></a>{` transforms.`}</p>\n    </Alert>\n    <h2 {...{\n      \"id\": \"coercing-data-types\"\n    }}>{`Coercing Data Types`}</h2>\n    <p>{`Occasionally services will provide you with data that is in the right shape, but the types are wrong. Perhaps a string\nshould be a number, or vice versa.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/transforms/coercer/\"\n      }}><inlineCode parentName=\"a\">{`coercer`}</inlineCode></a>{` transform is the correct tool for this job!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[transforms.correct_source_types]\n  type = \"coercer\"\n  inputs = [\"source0\"]\n  types.count = \"int\"\n  types.date = \"timestamp|%F\"\n`}</code></pre>\n    <p>{`You can also use this transform as a lightweight schema by specifying `}<inlineCode parentName=\"p\">{`drop_unspecified = true`}</inlineCode>{`, empowering it to drop\nfields you've not specified.`}</p>\n    <p>{`Adding `}<inlineCode parentName=\"p\">{`drop_unspecified = true`}</inlineCode>{` to the above would mean any log coming out of the `}<inlineCode parentName=\"p\">{`correct_source_types`}</inlineCode>{` would only\nhave a `}<inlineCode parentName=\"p\">{`count`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`date`}</inlineCode>{` field. Coercer? More like enforcer.`}</p>\n    <h3 {...{\n      \"id\": \"example-coercing-into-a-specific-format\"\n    }}>{`Example: Coercing into a specific format`}</h3>\n    <p>{`There are a lot of ways to represent time. In the US folks tend to use `}<inlineCode parentName=\"p\">{`MM/DD/YYYY`}</inlineCode>{` or the (more reasonable)\n`}<inlineCode parentName=\"p\">{`YYYY/MM/DD`}</inlineCode>{` which Canada and China like. In the EU, South America, and Africa they prefer `}<inlineCode parentName=\"p\">{`DD/MM/YYYY`}</inlineCode>{`. Like personal\nidentities, all are valid. Vector lets us take in timestamps and output specific formats easily.`}</p>\n    <p>{`To do this we'll use `}<inlineCode parentName=\"p\">{`timestamp| $FORMAT`}</inlineCode>{`. To build a `}<inlineCode parentName=\"p\">{`$FORMAT`}</inlineCode>{`, we can reference the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.rs/chrono/0.4.10/chrono/format/strftime/index.html\"\n      }}><inlineCode parentName=\"a\">{`strftime`}</inlineCode></a>{` documentation. Let's ship some Canadian\nfriendly logs up to the great white north!`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[transforms.format_timestamp]\n  type = \"coercer\"\n  types.timestamp = \"timestamp|%Y/%m/%d:%H:%M:%S %z\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"working-with-data-formats\"\n    }}>{`Working with data formats`}</h2>\n    <p>{`Not all logs come structured. Some services provide JSON, some provide plaintext, others ship around protobufs. With\nVector you can handle them all.`}</p>\n    <p>{`Generally Vector will be able to determine the encodings to use by the source or sink used. In some cases, multiple are\nsupported. In these cases, you can use the `}<inlineCode parentName=\"p\">{`encoding`}</inlineCode>{` option.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/sinks/console/\"\n      }}><inlineCode parentName=\"a\">{`console`}</inlineCode></a>{` sink supports both `}<inlineCode parentName=\"p\">{`json`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` as its\noutput format`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[sinks.print]\n  type = \"console\"\n  inputs = [\"source0\"]\n  target = \"stdout\"\n  encoding = \"json\"\n`}</code></pre>\n    <p>{`You can also use a transform like `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/transforms/json_parser/\"\n      }}><inlineCode parentName=\"a\">{`json_parser`}</inlineCode></a>{` or\n`}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/transforms/grok_parser/\"\n      }}><inlineCode parentName=\"a\">{`grok_parser`}</inlineCode></a>{` to parse out data in a given field.`}</p>\n    <h2 {...{\n      \"id\": \"parting-thoughts\"\n    }}>{`Parting thoughts`}</h2>\n    <p>{`Exploring this article, we can see that Vector is able to consume multiple (even non-standard) formats of logs. We saw\nthat Vector can then reshape the data according to your needs. Then Vector can pass this data along.`}</p>\n    <p>{`Let's consider some novel uses for Vector, given these tools! Vector can work as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A sanitization tool, ensuring malformed events never reach a service.`}</li>\n      <li parentName=\"ul\">{`A privacy tool, removing sensitive data before it leaves your infrastructure.`}</li>\n      <li parentName=\"ul\">{`A data corrector, adapting legacy systems to more modern systems which have evolved.`}</li>\n    </ul>\n    <p>{`Where are you deploying Vector? Let us know, maybe we can help optimize it!`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}
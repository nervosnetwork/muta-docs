{"remainingRequest":"/Users/Yun/Desktop/vdocs/website/node_modules/babel-loader/lib/index.js??ref--9-1!/Users/Yun/Desktop/vdocs/website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--9-2!/Users/Yun/Desktop/vdocs/website/plugins/guides/markdownLoader.js??ref--9-3!/Users/Yun/Desktop/vdocs/website/guides/advanced/unit-testing1.md","dependencies":[{"path":"/Users/Yun/Desktop/vdocs/website/guides/advanced/unit-testing1.md","mtime":1594887208729},{"path":"/Users/Yun/Desktop/vdocs/website/.docusaurus/guides/site-guides-advanced-unit-testing-1-md-36e.json","mtime":1594887214190},{"path":"/Users/Yun/Desktop/vdocs/website/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/Desktop/vdocs/website/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/Desktop/vdocs/website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/Desktop/vdocs/website/plugins/guides/markdownLoader.js","mtime":1594780808724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL1l1bi9EZXNrdG9wL3Zkb2NzL3dlYnNpdGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyPXtsYXN0X21vZGlmaWVkX29uOicyMDIwLTA3LTEzJywkc2NoZW1hOicvLm1ldGEvLnNjaGVtYXMvZ3VpZGVzLmpzb24nLHRpdGxlOidVbml0IFRlc3RpbmcgWW91ciBDb25maWdzJyxkZXNjcmlwdGlvbjonTGVhcm4gaG93IHRvIHdyaXRlIGFuZCBleGVjdXRlIHVuaXQgdGVzdHMgZm9yIHlvdXIgVmVjdG9yIGNvbmZpZ3MnLGF1dGhvcl9naXRodWI6J2h0dHBzOi8vZ2l0aHViLmNvbS9KZWZmYWlsJyx0YWdzOlsndHlwZTogZ3VpZGUnLCdkb21haW46IGNvbmZpZyddfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJjYXRlZ29yaWVzIjpbeyJuYW1lIjoiYWR2YW5jZWQiLCJ0aXRsZSI6IkFkdmFuY2VkIiwiZGVzY3JpcHRpb24iOiJHbyBiZXlvbmQgdGhlIGJhc2ljcywgYmVjb21lIGEgVmVjdG9yIHBybywgYW5kIGV4dHJhY3QgdGhlIGZ1bGwgcG90ZW50aWFsIG9mIFZlY3Rvci4iLCJwZXJtYWxpbmsiOiIvZ3VpZGVzL2FkdmFuY2VkIn1dLCJjb3ZlckxhYmVsIjoiVW5pdCBUZXN0aW5nIFlvdXIgQ29uZmlncyIsImRlc2NyaXB0aW9uIjoiTGVhcm4gaG93IHRvIHdyaXRlIGFuZCBleGVjdXRlIHVuaXQgdGVzdHMgZm9yIHlvdXIgVmVjdG9yIGNvbmZpZ3MiLCJwZXJtYWxpbmsiOiIvZ3VpZGVzL2FkdmFuY2VkL3VuaXQtdGVzdGluZzEiLCJyZWFkaW5nVGltZSI6IjYgbWluIHJlYWQiLCJzb3VyY2UiOiJAc2l0ZS9ndWlkZXMvYWR2YW5jZWQvdW5pdC10ZXN0aW5nMS5tZCIsInRhZ3MiOlt7ImxhYmVsIjoidHlwZTogZ3VpZGUiLCJwZXJtYWxpbmsiOiIvZ3VpZGVzL3RhZ3MvdHlwZS1ndWlkZSJ9LHsibGFiZWwiOiJkb21haW46IGNvbmZpZyIsInBlcm1hbGluayI6Ii9ndWlkZXMvdGFncy9kb21haW4tY29uZmlnIn1dLCJ0aXRsZSI6IlVuaXQgVGVzdGluZyBZb3VyIENvbmZpZ3MiLCJ0cnVuY2F0ZWQiOmZhbHNlLCJwcmV2SXRlbSI6eyJ0aXRsZSI6IlRyb3VibGVzaG9vdGluZyIsInBlcm1hbGluayI6Ii9ndWlkZXMvYWR2YW5jZWQvdHJvdWJsZXNob290aW5nIn0sIm5leHRJdGVtIjp7InRpdGxlIjoiU2VuZCBsb2dzIHRvIEFwYWNoZSBQdWxzYXIiLCJwZXJtYWxpbmsiOiIvZ3VpZGVzL2ludGVncmF0ZS9zaW5rcy9wdWxzYXIifX07LyogQGpzeCBtZHggKi9pbXBvcnQgQXNzdW1wdGlvbnMgZnJvbSdAc2l0ZS9zcmMvY29tcG9uZW50cy9Bc3N1bXB0aW9ucyc7ZXhwb3J0IGNvbnN0IHJpZ2h0VG9jPVt7dmFsdWU6J0lucHV0JyxpZDonaW5wdXQnLGNoaWxkcmVuOltdfSx7dmFsdWU6J091dHB1dHMnLGlkOidvdXRwdXRzJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidFeGVjdXRpbmcnLGlkOidleGVjdXRpbmcnLGNoaWxkcmVuOltdfV07Y29uc3QgbWFrZVNob3J0Y29kZT1uYW1lPT5mdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTtjb25zdCBsYXlvdXRQcm9wcz17cmlnaHRUb2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keChBc3N1bXB0aW9ucyx7bmFtZToiZ3VpZGUiLG1keFR5cGU6IkFzc3VtcHRpb25zIn0sbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgWW91IHVuZGVyc3RhbmQgdGhlIGAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiIvZG9jcy9hYm91dC9jb25jZXB0cy8ifSksYGJhc2ljIFZlY3RvciBjb25jZXB0c2ApLGAgYW5kIHVuZGVyc3RhbmQgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJsaSJ9LHsiaHJlZiI6Ii9ndWlkZXMvZ2V0dGluZy1zdGFydGVkL3lvdXItZmlyc3QtcGlwZWxpbmUvIn0pLGBob3cgdG8gc2V0IHVwIGEgcGlwZWxpbmVgKSxgLmApKSksbWR4KCJwIixudWxsLGBJdCdzIHBvc3NpYmxlIHRvIGRlZmluZSB1bml0IHRlc3RzIHdpdGhpbiBhIFZlY3RvciBjb25maWd1cmF0aW9uIGZpbGUgdGhhdCBjb3ZlcgphIG5ldHdvcmsgb2YgdHJhbnNmb3JtcyB3aXRoaW4gdGhlIHRvcG9sb2d5LiBUaGUgcHVycG9zZSBvZiB0aGVzZSB0ZXN0cyBpcyB0bwphc3Npc3QgaW4gdGhlIGRldmVsb3BtZW50IG9mIGNvbmZpZ3MgY29udGFpbmluZyBsYXJnZXIgYW5kIG1vcmUgY29tcGxleAp0b3BvbG9naWVzLCBhbmQgaW1wcm92ZSB0aGVpciBtYWludGFpbmFiaWxpdHkuYCksbWR4KCJwIixudWxsLGBUaGUgZnVsbCBzcGVjIGNhbiBiZSBmb3VuZCBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIvZG9jcy9yZWZlcmVuY2UvdGVzdHMvIn0pLGBoZXJlYCksYC4gVGhpcyBndWlkZSB3aWxsIGNvdmVyCndyaXRpbmcgYW5kIGV4ZWN1dGluZyBhIHVuaXQgdGVzdCBmb3IgdGhlIGZvbGxvd2luZyBjb25maWc6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS10b21sIiwibWV0YXN0cmluZyI6InRpdGxlPVwidmVjdG9yLnRvbWxcIiIsInRpdGxlIjoiXCJ2ZWN0b3IudG9tbFwiIn0pLGBbc291cmNlcy5vdmVyX3RjcF0KICB0eXBlID0gInNvY2tldCIKICBtb2RlID0gInRjcCIKICBhZGRyZXNzID0gIjAuMC4wLjA6OTAwMCIKClt0cmFuc2Zvcm1zLmZvb10KICB0eXBlID0gImdyb2tfcGFyc2VyIgogIGlucHV0cyA9IFsib3Zlcl90Y3AiXQogIHBhdHRlcm4gPSAiJXtUSU1FU1RBTVBfSVNPODYwMTp0aW1lc3RhbXB9ICV7TE9HTEVWRUw6bGV2ZWx9ICV7R1JFRURZREFUQTptZXNzYWdlfSIKClt0cmFuc2Zvcm1zLmJhcl0KICB0eXBlID0gImFkZF9maWVsZHMiCiAgaW5wdXRzID0gWyJmb28iXQogIFt0cmFuc2Zvcm1zLmJhci5maWVsZHNdCiAgICBuZXdfZmllbGQgPSAidGhpcyBpcyBhIHN0YXRpYyB2YWx1ZSIKClt0cmFuc2Zvcm1zLmJhel0KICB0eXBlID0gInJlbW92ZV9maWVsZHMiCiAgaW5wdXRzID0gWyJmb28iXQogIGZpZWxkcyA9IFsibGV2ZWwiXQoKW3NpbmtzLm92ZXJfaHR0cF0KICB0eXBlID0gImh0dHAiCiAgaW5wdXRzID0gWyJiYXoiXQogIHVyaSA9ICJodHRwOi8vbG9jYWxob3N0OjQxOTUvcG9zdCIKICBlbmNvZGluZyA9ICJ0ZXh0IgpgKSksbWR4KCJwIixudWxsLGBJbiB0aGlzIGNvbmZpZyB3ZTpgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBQYXJzZSBhIGxvZyBsaW5lIGludG8gdGhlIGZpZWxkcyBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYHRpbWVzdGFtcGApLGAsIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSxgbGV2ZWxgKSxgIGFuZCBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYG1lc3NhZ2VgKSxgIHdpdGggdGhlCnRyYW5zZm9ybSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYGZvb2ApLGAuYCksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sYEFkZCBhIHN0YXRpYyBzdHJpbmcgZmllbGQgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LGBuZXdfZmllbGRgKSxgIHVzaW5nIHRoZSB0cmFuc2Zvcm0gYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LGBiYXJgKSxgLmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBSZW1vdmUgdGhlIGZpZWxkIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSxgbGV2ZWxgKSxgIHdpdGggdGhlIHRyYW5zZm9ybSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYGJhemApLGAuYCkpLG1keCgicCIsbnVsbCxgSW4gcmVhbGl0eSBpdCdzIHVubGlrZWx5IHRoYXQgYSBjb25maWcgdGhpcyBzaW1wbGUgd291bGQgYmUgd29ydGggdGhlIGludmVzdG1lbnQKb2Ygd3JpdGluZyB1bml0IHRlc3RzLiBSZWdhcmRsZXNzLCBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBndWlkZSB3ZSd2ZSBjb25jbHVkZWQKdGhhdCB5ZXMsIHdlIGRvIHdpc2ggdG8gdW5pdCB0ZXN0IHRoaXMgY29uZmlnLmApLG1keCgicCIsbnVsbCxgU3BlY2lmaWNhbGx5LCB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0IHRoZSByZXN1bHRpbmcgZXZlbnRzIG9mIG91ciB0b3BvbG9neQood2hhdGV2ZXIgY29tZXMgb3V0IG9mIHRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgYmF6YCksYCB0cmFuc2Zvcm0pIGFsd2F5cyBtZWV0cyB0aGUgZm9sbG93aW5nCnJlcXVpcmVtZW50czpgKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBEb2VzIE5PVCBjb250YWluIHRoZSBmaWVsZCBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYGxldmVsYCksYC5gKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgQ29udGFpbnMgdGhlIGZpZWxkIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSxgbmV3X2ZpZWxkYCksYCwgd2l0aCBhIHN0YXRpYyB2YWx1ZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYHRoaXMgaXMgYSBzdGF0aWMgdmFsdWVgKSxgLmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LGBIYXMgYSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sYHRpbWVzdGFtcGApLGAgYW5kIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToibGkifSxgbWVzc2FnZWApLGAgZmllbGQgY29udGFpbmluZyB0aGUgdmFsdWVzIGV4dHJhY3RlZCBmcm9tIHRoZQpyYXcgbWVzc2FnZSBvZiB0aGUgaW5wdXQgbG9nLmApKSxtZHgoInAiLG51bGwsYE90aGVyd2lzZSBvdXIgc3lzdGVtIGZhaWxzIGFuZCBhbiBhbm5veWluZyByZWxhdGl2ZSAodW5jbGUgQ2VjaWwpIG1vdmVzIGluIHRvCmxpdmUgd2l0aCB1cyBpbmRlZmluaXRlbHkuIFdlIHdpbGwgZG8gYCxtZHgoImVtIix7cGFyZW50TmFtZToicCJ9LGBhbnl0aGluZ2ApLGAgdG8gcHJldmVudCB0aGF0LmApLG1keCgiaDIiLHsiaWQiOiJpbnB1dCJ9LGBJbnB1dGApLG1keCgicCIsbnVsbCxgRmlyc3Qgd2Ugc2hhbGwgd3JpdGUgYSBzaW5nbGUgdW5pdCB0ZXN0IGF0IHRoZSBib3R0b20gb2Ygb3VyIGNvbmZpZyBjYWxsZWQKYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGNoZWNrX3NpbXBsZV9sb2dgKSxgLiBFYWNoIHRlc3QgbXVzdCBkZWZpbmUgaW5wdXQgZXZlbnRzICh1c3VhbGx5IGp1c3Qgb25lKSwgd2hpY2gKaW5pdGlhdGVzIHRoZSB0ZXN0IGJ5IGluamVjdGluZyB0aG9zZSBldmVudHMgaW50byBhIHRyYW5zZm9ybSBvZiB0aGUgdG9wb2xvZ3k6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS10b21sIn0pLGBbW3Rlc3RzXV0KICBuYW1lID0gImNoZWNrX3NpbXBsZV9sb2ciCgogIFtbdGVzdHMuaW5wdXRzXV0KICAgIGluc2VydF9hdCA9ICJmb28iCiAgICB0eXBlID0gInJhdyIKICAgIHZhbHVlID0gIjIwMTktMTEtMjhUMTI6MDA6MDArMDA6MDAgaW5mbyBTb3JyeSwgSSdtIGJ1c3kgdGhpcyB3ZWVrIENlY2lsIgpgKSksbWR4KCJwIixudWxsLGBIZXJlIHdlJ3ZlIHNwZWNpZmllZCB0aGF0IG91ciB0ZXN0IHNob3VsZCBiZWdpbiBieSBpbmplY3RpbmcgYW4gZXZlbnQgYXQgdGhlCnRyYW5zZm9ybSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgZm9vYCksYC4gVGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGByYXdgKSxgIGlucHV0IHR5cGUgY3JlYXRlcyBhIGxvZyB3aXRoIG9ubHkgYSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgbWVzc2FnZWApLGAgZmllbGQKYW5kIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGB0aW1lc3RhbXBgKSxgIChzZXQgdG8gdGhlIHRpbWUgb2YgdGhlIHRlc3QpLCB3aGVyZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgbWVzc2FnZWApLGAgaXMgcG9wdWxhdGVkIHdpdGgKdGhlIGNvbnRlbnRzIG9mIHRoZSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgdmFsdWVgKSxgIGZpZWxkLmApLG1keCgiaDIiLHsiaWQiOiJvdXRwdXRzIn0sYE91dHB1dHNgKSxtZHgoInAiLG51bGwsYFRoaXMgdGVzdCB3b24ndCBydW4gaW4gaXRzIGN1cnJlbnQgc3RhdGUgYmVjYXVzZSB0aGVyZSdzIG5vdGhpbmcgdG8gY2hlY2suIEluCm9yZGVyIHRvIHBlcmZvcm0gY2hlY2tzIHdpdGggdGhpcyB1bml0IHRlc3Qgd2UgZGVmaW5lIGFuIG91dHB1dCB0byBpbnNwZWN0OmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtdG9tbCJ9KSxgW1t0ZXN0c11dCiAgbmFtZSA9ICJjaGVja19zaW1wbGVfbG9nIgoKICBbW3Rlc3RzLmlucHV0c11dCiAgICBpbnNlcnRfYXQgPSAiZm9vIgogICAgdHlwZSA9ICJyYXciCiAgICB2YWx1ZSA9ICIyMDE5LTExLTI4VDEyOjAwOjAwKzAwOjAwIGluZm8gU29ycnksIEknbSBidXN5IHRoaXMgd2VlayBDZWNpbCIKCiAgW1t0ZXN0cy5vdXRwdXRzXV0KICAgIGV4dHJhY3RfZnJvbSA9ICJiYXoiCgogICAgW1t0ZXN0cy5vdXRwdXRzLmNvbmRpdGlvbnNdXQogICAgICB0eXBlID0gImNoZWNrX2ZpZWxkcyIKICAgICAgImxldmVsLmV4aXN0cyIgPSBmYWxzZQogICAgICAibmV3X2ZpZWxkLmVxdWFscyIgPSAidGhpcyBpcyBhIHN0YXRpYyB2YWx1ZSIKICAgICAgInRpbWVzdGFtcC5lcXVhbHMiID0gIjIwMTktMTEtMjhUMTI6MDA6MDArMDA6MDAiCiAgICAgICJtZXNzYWdlLmVxdWFscyIgPSAiU29ycnksIEknbSBidXN5IHRoaXMgd2VlayBDZWNpbCIKYCkpLG1keCgicCIsbnVsbCxgV2UgY2FuIGRlZmluZSBhbnkgbnVtYmVyIG9mIG91dHB1dHMgZm9yIGEgdGVzdCwgYW5kIG11c3Qgc3BlY2lmeSBhdCB3aGljaAp0cmFuc2Zvcm0gdGhlIG91dHB1dCBldmVudHMgc2hvdWxkIGJlIGV4dHJhY3RlZCBmb3IgY2hlY2tpbmcuIFRoaXMgYWxsb3dzIHVzIHRvCmNoZWNrIHRoZSBldmVudHMgZnJvbSBkaWZmZXJlbnQgdHJhbnNmb3JtcyBpbiBhIHNpbmdsZSB0ZXN0LiBGb3Igb3VyIHB1cnBvc2VzIHdlCm9ubHkgbmVlZCB0byBjaGVjayB0aGUgb3V0cHV0IG9mIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBiYXpgKSxgLmApLG1keCgicCIsbnVsbCxgQW4gb3V0cHV0IGNhbiBhbHNvIGhhdmUgYW55IG51bWJlciBvZiBjb25kaXRpb25zIHRvIGNoZWNrLCBhbmQgdGhlc2UgYXJlIGhvdyB3ZQpkZXRlcm1pbmUgd2hldGhlciBhIHRlc3QgaGFzIGZhaWxlZCBvciBzdWNjZWVkZWQuIEluIG9yZGVyIGZvciB0aGUgdGVzdCB0byBwYXNzCmVhY2ggY29uZGl0aW9uIGZvciBhbiBvdXRwdXQgbXVzdCByZXNvbHZlIHRvIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGB0cnVlYCksYC5gKSxtZHgoInAiLG51bGwsYEl0J3MgcG9zc2libGUgZm9yIGEgdG9wb2xvZ3kgdG8gcmVzdWx0IGluID4xIGV2ZW50cyBleHRyYWN0ZWQgZnJvbSBhIHNpbmdsZQp0cmFuc2Zvcm0sIGluIHdoaWNoIGNhc2UgZWFjaCBjb25kaXRpb24gbXVzdCBwYXNzIGZvciBvbmUgb3IgbW9yZSBvZiB0aGUKZXh0cmFjdGVkIGV2ZW50cyBpbiBvcmRlciBmb3IgdGhlIHRlc3QgdG8gcGFzcy5gKSxtZHgoInAiLG51bGwsYEFuIG91dHB1dCB3aXRob3V0IGFueSBjb25kaXRpb25zIGNhbm5vdCBmYWlsIGEgdGVzdCwgYW5kIGluc3RlYWQgcHJpbnRzIHRoZQppbnB1dCBhbmQgb3V0cHV0IGV2ZW50cyBvZiBhIHRyYW5zZm9ybSBkdXJpbmcgdGhlIHRlc3QuIFRoaXMgaXMgdXNlZnVsIHdoZW4KYnVpbGRpbmcgYSBjb25maWcgYXMgaXQgYWxsb3dzIHVzIHRvIGluc3BlY3QgdGhlIGJlaGF2aW9yIG9mIGVhY2ggdHJhbnNmb3JtIGluCmlzb2xhdGlvbi5gKSxtZHgoInAiLG51bGwsYFRoZSBvbmx5IGNvbmRpdGlvbiB3ZSd2ZSBkZWZpbmVkIGhlcmUgaXMgYSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgY2hlY2tfZmllbGRzYCksYCB0eXBlLiBUaGlzIGlzCmN1cnJlbnRseSB0aGUgYCxtZHgoImVtIix7cGFyZW50TmFtZToicCJ9LGBvbmx5YCksYCBjb25kaXRpb24gdHlwZSBvbiBvZmZlciwgYW5kIGl0IGFsbG93cyB1cyB0byBzcGVjaWZ5IGFueQpudW1iZXIgb2YgZmllbGQgcXVlcmllcyAob2YgdGhlIGZvcm1hdCBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgIjxmaWVsZD4uPHByZWRpY2F0ZT4iID0gIjxhcmd1bWVudD4iYCksYCkuYCksbWR4KCJoMiIseyJpZCI6ImV4ZWN1dGluZyJ9LGBFeGVjdXRpbmdgKSxtZHgoInAiLG51bGwsYFdpdGggdGhpcyB0ZXN0IGFkZGVkIHRvIHRoZSBib3R0b20gb2Ygb3VyIGNvbmZpZyB3ZSBhcmUgbm93IGFibGUgdG8gZXhlY3V0ZSBpdC4KRXhlY3V0aW5nIHRlc3RzIHdpdGhpbiBhIGNvbmZpZyBmaWxlIGNhbiBiZSBkb25lIHdpdGggdGhlIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGB0ZXN0YCksYCBzdWJjb21tYW5kOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtYmFzaCJ9KSxgdmVjdG9yIHRlc3QgLi9leGFtcGxlLnRvbWwKYCkpLG1keCgicCIsbnVsbCxgRG9pbmcgdGhpcyByZXN1bHRzIGluIHRoZSBmb2xsb3dpbmcgb3V0cHV0OmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2Utc2gifSksYCQgdmVjdG9yIHRlc3QgLi9leGFtcGxlLnRvbWwKUnVubmluZyAuL2V4YW1wbGUudG9tbCB0ZXN0cwp0ZXN0IC4vZXhhbXBsZS50b21sOiBjaGVja19zaW1wbGVfbG9nIC4uLiBmYWlsZWQKCmZhaWx1cmVzOgoKLS0tIC4vZXhhbXBsZS50b21sIC0tLQoKdGVzdCAnY2hlY2tfc2ltcGxlX2xvZyc6CgpjaGVjayB0cmFuc2Zvcm0gJ2JheicgZmFpbGVkIGNvbmRpdGlvbnM6CiAgY29uZGl0aW9uWzBdOiBwcmVkaWNhdGVzIGZhaWxlZDogWyBuZXdfZmllbGQuZXF1YWxzOiAidGhpcyBpcyBhIHN0YXRpYyB2YWx1ZSIgXQpwYXlsb2FkcyAoZXZlbnRzIGVuY29kZWQgYXMgSlNPTik6CiAgaW5wdXQ6IHsibGV2ZWwiOiJpbmZvIiwidGltZXN0YW1wIjoiMjAxOS0xMS0yOFQxMjowMDowMCswMDowMCIsIm1lc3NhZ2UiOiJTb3JyeSwgSSdtIGJ1c3kgdGhpcyB3ZWVrIENlY2lsIn0KICBvdXRwdXQ6IHsidGltZXN0YW1wIjoiMjAxOS0xMS0yOFQxMjowMDowMCswMDowMCIsIm1lc3NhZ2UiOiJTb3JyeSwgSSdtIGJ1c3kgdGhpcyB3ZWVrIENlY2lsIn0KYCkpLG1keCgicCIsbnVsbCxgV29vcHMhIFNvbWV0aGluZyBpc24ndCByaWdodC4gVmVjdG9yIGhhcyB0b2xkIHVzIHRoYXQgY29uZGl0aW9uIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGAwYCksYCAob3VyIG9ubHkKY29uZGl0aW9uKSBmYWlsZWQgZm9yIHRoZSBwcmVkaWNhdGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYG5ld19maWVsZC5lcXVhbHNgKSxgLiBXZSBhbHNvIGdldCB0byBzZWUgYQpKU09OIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlucHV0IGFuZCBvdXRwdXQgb2YgdGhlIHRyYW5zZm9ybSBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgYmF6YCksYC4KVHJ5IHJldmlld2luZyBvdXIgY29uZmlnIHRvcG9sb2d5IHRvIHNlZSBpZiB5b3UgY2FuIHNwb3QgdGhlIG1pc3Rha2UuYCksbWR4KCJwIixudWxsLGBTUE9JTEVSUzogVGhlIHByb2JsZW0gaXMgdGhhdCB0cmFuc2Zvcm0gYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGJhemApLGAgaXMgY29uZmlndXJlZCB3aXRoIHRoZSBpbnB1dApgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgZm9vYCksYCwgd2hpY2ggbWVhbnMgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGJhcmApLGAgaXMgc2tpcHBlZCBpbiB0aGUgdG9wb2xvZ3khYCksbWR4KCJibG9ja3F1b3RlIixudWxsLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSxgU2lkZSBub3RlOiBXZSB3b3VsZCBoYXZlIGFsc28gY2F1Z2h0IHRoaXMgcGFydGljdWxhciBpc3N1ZSB3aXRoCmAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGB2ZWN0b3IgdmFsaWRhdGUgLS10b3BvbG9neSAuL2V4YW1wbGUudG9tbGApLGAuYCkpLG1keCgicCIsbnVsbCxgVGhlIGZpeCBpcyBlYXN5LCB3ZSBzaW1wbHkgY2hhbmdlIHRoZSBpbnB1dCBvZiBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgYmF6YCksYCBmcm9tIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBmb29gKSxgIHRvIGAsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LGBiYXJgKSxgOmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtZGlmZiJ9KSxgLS0tIGEvZXhhbXBsZS50b21sCisrKyBiL2V4YW1wbGUudG9tbApAQCAtMTYsNyArMTYsNyBAQAoKIFt0cmFuc2Zvcm1zLmJhel0KICAgdHlwZSA9ICJyZW1vdmVfZmllbGRzIgotICBpbnB1dHMgPSBbImZvbyJdCisgIGlucHV0cyA9IFsiYmFyIl0KICAgZmllbGRzID0gWyJsZXZlbCJdCmApKSxtZHgoInAiLG51bGwsYEFuZCBydW5uaW5nIG91ciB0ZXN0IGFnYWluIGdpdmVzIHVzIGFuIGV4aXQgc3RhdHVzIDA6YCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1zaCJ9KSxgJCB2ZWN0b3IgdGVzdCAuL2V4YW1wbGUudG9tbApSdW5uaW5nIC4vZXhhbXBsZS50b21sIHRlc3RzClRlc3QgLi9leGFtcGxlLnRvbWw6IGNoZWNrX3NpbXBsZV9sb2cgLi4uIHBhc3NlZApgKSksbWR4KCJwIixudWxsLGBUaGUgdGVzdCBwYXNzZWQhIE5vdyBpZiB3ZSBjb25maWd1cmUgb3VyIENJIHN5c3RlbSB0byBleGVjdXRlIG91ciB0ZXN0IHdlIGNhbgplbnN1cmUgdGhhdCB1bmNsZSBDZWNpbCByZW1haW5zIGluIFNob3JlZGl0Y2ggYWZ0ZXIgYW55IGZ1dHVyZSBjb25maWcgY2hhbmdlLgpXaGF0IGFuIGluc3VmZmVyYWJsZSBoaXBzdGVyIGhlIGlzLmApKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/Yun/Desktop/vdocs/website/guides/advanced/unit-testing1.md"],"names":["React","mdx","frontMatter","last_modified_on","$schema","title","description","author_github","tags","metadata","Assumptions","rightToc","value","id","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tlast_modified_on: '2020-07-13',\n\t$schema: '/.meta/.schemas/guides.json',\n\ttitle: 'Unit Testing Your Configs',\n\tdescription: 'Learn how to write and execute unit tests for your Vector configs',\n\tauthor_github: 'https://github.com/Jeffail',\n\ttags: [\n\t\t'type: guide',\n\t\t'domain: config'\n\t]\n};\nexport const metadata = {\n  \"categories\": [\n    {\n      \"name\": \"advanced\",\n      \"title\": \"Advanced\",\n      \"description\": \"Go beyond the basics, become a Vector pro, and extract the full potential of Vector.\",\n      \"permalink\": \"/guides/advanced\"\n    }\n  ],\n  \"coverLabel\": \"Unit Testing Your Configs\",\n  \"description\": \"Learn how to write and execute unit tests for your Vector configs\",\n  \"permalink\": \"/guides/advanced/unit-testing1\",\n  \"readingTime\": \"6 min read\",\n  \"source\": \"@site/guides/advanced/unit-testing1.md\",\n  \"tags\": [\n    {\n      \"label\": \"type: guide\",\n      \"permalink\": \"/guides/tags/type-guide\"\n    },\n    {\n      \"label\": \"domain: config\",\n      \"permalink\": \"/guides/tags/domain-config\"\n    }\n  ],\n  \"title\": \"Unit Testing Your Configs\",\n  \"truncated\": false,\n  \"prevItem\": {\n    \"title\": \"Troubleshooting\",\n    \"permalink\": \"/guides/advanced/troubleshooting\"\n  },\n  \"nextItem\": {\n    \"title\": \"Send logs to Apache Pulsar\",\n    \"permalink\": \"/guides/integrate/sinks/pulsar\"\n  }\n};\n  /* @jsx mdx */\nimport Assumptions from '@site/src/components/Assumptions';\nexport const rightToc = [{\n  value: 'Input',\n  id: 'input',\n  children: []\n}, {\n  value: 'Outputs',\n  id: 'outputs',\n  children: []\n}, {\n  value: 'Executing',\n  id: 'executing',\n  children: []\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Assumptions name=\"guide\" mdxType=\"Assumptions\">\n      <ul>\n        <li parentName=\"ul\">{`You understand the `}<a parentName=\"li\" {...{\n            \"href\": \"/docs/about/concepts/\"\n          }}>{`basic Vector concepts`}</a>{` and understand `}<a parentName=\"li\" {...{\n            \"href\": \"/guides/getting-started/your-first-pipeline/\"\n          }}>{`how to set up a pipeline`}</a>{`.`}</li>\n      </ul>\n    </Assumptions>\n    <p>{`It's possible to define unit tests within a Vector configuration file that cover\na network of transforms within the topology. The purpose of these tests is to\nassist in the development of configs containing larger and more complex\ntopologies, and improve their maintainability.`}</p>\n    <p>{`The full spec can be found `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/tests/\"\n      }}>{`here`}</a>{`. This guide will cover\nwriting and executing a unit test for the following config:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\",\n        \"metastring\": \"title=\\\"vector.toml\\\"\",\n        \"title\": \"\\\"vector.toml\\\"\"\n      }}>{`[sources.over_tcp]\n  type = \"socket\"\n  mode = \"tcp\"\n  address = \"0.0.0.0:9000\"\n\n[transforms.foo]\n  type = \"grok_parser\"\n  inputs = [\"over_tcp\"]\n  pattern = \"%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}\"\n\n[transforms.bar]\n  type = \"add_fields\"\n  inputs = [\"foo\"]\n  [transforms.bar.fields]\n    new_field = \"this is a static value\"\n\n[transforms.baz]\n  type = \"remove_fields\"\n  inputs = [\"foo\"]\n  fields = [\"level\"]\n\n[sinks.over_http]\n  type = \"http\"\n  inputs = [\"baz\"]\n  uri = \"http://localhost:4195/post\"\n  encoding = \"text\"\n`}</code></pre>\n    <p>{`In this config we:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Parse a log line into the fields `}<inlineCode parentName=\"li\">{`timestamp`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`level`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`message`}</inlineCode>{` with the\ntransform `}<inlineCode parentName=\"li\">{`foo`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Add a static string field `}<inlineCode parentName=\"li\">{`new_field`}</inlineCode>{` using the transform `}<inlineCode parentName=\"li\">{`bar`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Remove the field `}<inlineCode parentName=\"li\">{`level`}</inlineCode>{` with the transform `}<inlineCode parentName=\"li\">{`baz`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`In reality it's unlikely that a config this simple would be worth the investment\nof writing unit tests. Regardless, for the purpose of this guide we've concluded\nthat yes, we do wish to unit test this config.`}</p>\n    <p>{`Specifically, we need to ensure that the resulting events of our topology\n(whatever comes out of the `}<inlineCode parentName=\"p\">{`baz`}</inlineCode>{` transform) always meets the following\nrequirements:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Does NOT contain the field `}<inlineCode parentName=\"li\">{`level`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Contains the field `}<inlineCode parentName=\"li\">{`new_field`}</inlineCode>{`, with a static value `}<inlineCode parentName=\"li\">{`this is a static value`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Has a `}<inlineCode parentName=\"li\">{`timestamp`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`message`}</inlineCode>{` field containing the values extracted from the\nraw message of the input log.`}</li>\n    </ul>\n    <p>{`Otherwise our system fails and an annoying relative (uncle Cecil) moves in to\nlive with us indefinitely. We will do `}<em parentName=\"p\">{`anything`}</em>{` to prevent that.`}</p>\n    {\n      /*\n          THIS FILE IS AUTOGENERATED!\n           To make changes please edit the template located at:\n           website/guides/advanced/unit-testing.md.erb\n      */\n    }\n    <h2 {...{\n      \"id\": \"input\"\n    }}>{`Input`}</h2>\n    <p>{`First we shall write a single unit test at the bottom of our config called\n`}<inlineCode parentName=\"p\">{`check_simple_log`}</inlineCode>{`. Each test must define input events (usually just one), which\ninitiates the test by injecting those events into a transform of the topology:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\"\n      }}>{`[[tests]]\n  name = \"check_simple_log\"\n\n  [[tests.inputs]]\n    insert_at = \"foo\"\n    type = \"raw\"\n    value = \"2019-11-28T12:00:00+00:00 info Sorry, I'm busy this week Cecil\"\n`}</code></pre>\n    <p>{`Here we've specified that our test should begin by injecting an event at the\ntransform `}<inlineCode parentName=\"p\">{`foo`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`raw`}</inlineCode>{` input type creates a log with only a `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` field\nand `}<inlineCode parentName=\"p\">{`timestamp`}</inlineCode>{` (set to the time of the test), where `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` is populated with\nthe contents of the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` field.`}</p>\n    <h2 {...{\n      \"id\": \"outputs\"\n    }}>{`Outputs`}</h2>\n    <p>{`This test won't run in its current state because there's nothing to check. In\norder to perform checks with this unit test we define an output to inspect:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\"\n      }}>{`[[tests]]\n  name = \"check_simple_log\"\n\n  [[tests.inputs]]\n    insert_at = \"foo\"\n    type = \"raw\"\n    value = \"2019-11-28T12:00:00+00:00 info Sorry, I'm busy this week Cecil\"\n\n  [[tests.outputs]]\n    extract_from = \"baz\"\n\n    [[tests.outputs.conditions]]\n      type = \"check_fields\"\n      \"level.exists\" = false\n      \"new_field.equals\" = \"this is a static value\"\n      \"timestamp.equals\" = \"2019-11-28T12:00:00+00:00\"\n      \"message.equals\" = \"Sorry, I'm busy this week Cecil\"\n`}</code></pre>\n    <p>{`We can define any number of outputs for a test, and must specify at which\ntransform the output events should be extracted for checking. This allows us to\ncheck the events from different transforms in a single test. For our purposes we\nonly need to check the output of `}<inlineCode parentName=\"p\">{`baz`}</inlineCode>{`.`}</p>\n    <p>{`An output can also have any number of conditions to check, and these are how we\ndetermine whether a test has failed or succeeded. In order for the test to pass\neach condition for an output must resolve to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <p>{`It's possible for a topology to result in >1 events extracted from a single\ntransform, in which case each condition must pass for one or more of the\nextracted events in order for the test to pass.`}</p>\n    <p>{`An output without any conditions cannot fail a test, and instead prints the\ninput and output events of a transform during the test. This is useful when\nbuilding a config as it allows us to inspect the behavior of each transform in\nisolation.`}</p>\n    <p>{`The only condition we've defined here is a `}<inlineCode parentName=\"p\">{`check_fields`}</inlineCode>{` type. This is\ncurrently the `}<em parentName=\"p\">{`only`}</em>{` condition type on offer, and it allows us to specify any\nnumber of field queries (of the format `}<inlineCode parentName=\"p\">{`\"<field>.<predicate>\" = \"<argument>\"`}</inlineCode>{`).`}</p>\n    <h2 {...{\n      \"id\": \"executing\"\n    }}>{`Executing`}</h2>\n    <p>{`With this test added to the bottom of our config we are now able to execute it.\nExecuting tests within a config file can be done with the `}<inlineCode parentName=\"p\">{`test`}</inlineCode>{` subcommand:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vector test ./example.toml\n`}</code></pre>\n    <p>{`Doing this results in the following output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ vector test ./example.toml\nRunning ./example.toml tests\ntest ./example.toml: check_simple_log ... failed\n\nfailures:\n\n--- ./example.toml ---\n\ntest 'check_simple_log':\n\ncheck transform 'baz' failed conditions:\n  condition[0]: predicates failed: [ new_field.equals: \"this is a static value\" ]\npayloads (events encoded as JSON):\n  input: {\"level\":\"info\",\"timestamp\":\"2019-11-28T12:00:00+00:00\",\"message\":\"Sorry, I'm busy this week Cecil\"}\n  output: {\"timestamp\":\"2019-11-28T12:00:00+00:00\",\"message\":\"Sorry, I'm busy this week Cecil\"}\n`}</code></pre>\n    <p>{`Woops! Something isn't right. Vector has told us that condition `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` (our only\ncondition) failed for the predicate `}<inlineCode parentName=\"p\">{`new_field.equals`}</inlineCode>{`. We also get to see a\nJSON encoded representation of the input and output of the transform `}<inlineCode parentName=\"p\">{`baz`}</inlineCode>{`.\nTry reviewing our config topology to see if you can spot the mistake.`}</p>\n    <p>{`SPOILERS: The problem is that transform `}<inlineCode parentName=\"p\">{`baz`}</inlineCode>{` is configured with the input\n`}<inlineCode parentName=\"p\">{`foo`}</inlineCode>{`, which means `}<inlineCode parentName=\"p\">{`bar`}</inlineCode>{` is skipped in the topology!`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Side note: We would have also caught this particular issue with\n`}<inlineCode parentName=\"p\">{`vector validate --topology ./example.toml`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <p>{`The fix is easy, we simply change the input of `}<inlineCode parentName=\"p\">{`baz`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`foo`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`bar`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`--- a/example.toml\n+++ b/example.toml\n@@ -16,7 +16,7 @@\n\n [transforms.baz]\n   type = \"remove_fields\"\n-  inputs = [\"foo\"]\n+  inputs = [\"bar\"]\n   fields = [\"level\"]\n`}</code></pre>\n    <p>{`And running our test again gives us an exit status 0:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`$ vector test ./example.toml\nRunning ./example.toml tests\nTest ./example.toml: check_simple_log ... passed\n`}</code></pre>\n    <p>{`The test passed! Now if we configure our CI system to execute our test we can\nensure that uncle Cecil remains in Shoreditch after any future config change.\nWhat an insufferable hipster he is.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}
{"remainingRequest":"/Users/Yun/vector/website/node_modules/babel-loader/lib/index.js??ref--10-1!/Users/Yun/vector/website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--10-2!/Users/Yun/vector/website/plugins/highlights/markdownLoader.js??ref--10-3!/Users/Yun/vector/website/highlights/2020-03-04-encoding-whitelist-blacklist.md","dependencies":[{"path":"/Users/Yun/vector/website/highlights/2020-03-04-encoding-whitelist-blacklist.md","mtime":1594780808707},{"path":"/Users/Yun/vector/website/.docusaurus/highlights/site-highlights-2020-03-04-encoding-whitelist-blacklist-md-2db.json","mtime":1594781224000},{"path":"/Users/Yun/vector/website/node_modules/cache-loader/dist/cjs.js","mtime":1588759099254},{"path":"/Users/Yun/vector/website/node_modules/babel-loader/lib/index.js","mtime":1588759098876},{"path":"/Users/Yun/vector/website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1588759134386},{"path":"/Users/Yun/vector/website/plugins/highlights/markdownLoader.js","mtime":1594780808733}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL1l1bi92ZWN0b3Ivd2Vic2l0ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgY29uc3QgZnJvbnRNYXR0ZXI9e2xhc3RfbW9kaWZpZWRfb246JzIwMjAtMDQtMTMnLCRzY2hlbWE6Jy8ubWV0YS8uc2NoZW1hcy9oaWdobGlnaHRzLmpzb24nLHRpdGxlOidXaGl0ZWxpc3QgJiBCbGFja2xpc3QgRmllbGRzIFdoZW4gRW5jb2RpbmcnLGRlc2NyaXB0aW9uOidNb3JlIGNvbnRyb2wgb3ZlciB3aGljaCBmaWVsZHMgYXJlIGluY2x1ZGVkIHdoZW4gZW5jb2RpbmcnLGF1dGhvcl9naXRodWI6J2h0dHBzOi8vZ2l0aHViLmNvbS9iaW5hcnlsb2dpYycscHJfbnVtYmVyczpbMTkxNV0scmVsZWFzZTonMC45LjAnLGhpZGVfb25fcmVsZWFzZV9ub3Rlczp0cnVlLHRhZ3M6Wyd0eXBlOiBuZXcgZmVhdHVyZScsJ2RvbWFpbjogc2lua3MnXX07ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsiZGF0ZSI6IjIwMjAtMDMtMDRUMDA6MDA6MDAuMDAwWiIsImRlc2NyaXB0aW9uIjoiTW9yZSBjb250cm9sIG92ZXIgd2hpY2ggZmllbGRzIGFyZSBpbmNsdWRlZCB3aGVuIGVuY29kaW5nIiwicGVybWFsaW5rIjoiL2hpZ2hsaWdodHMvMjAyMC0wMy0wNC1lbmNvZGluZy13aGl0ZWxpc3QtYmxhY2tsaXN0IiwicmVhZGluZ1RpbWUiOiIxIG1pbiByZWFkIiwic291cmNlIjoiQHNpdGUvaGlnaGxpZ2h0cy8yMDIwLTAzLTA0LWVuY29kaW5nLXdoaXRlbGlzdC1ibGFja2xpc3QubWQiLCJ0YWdzIjpbeyJsYWJlbCI6InR5cGU6IG5ldyBmZWF0dXJlIiwicGVybWFsaW5rIjoiL2hpZ2hsaWdodHMvdGFncy90eXBlLW5ldy1mZWF0dXJlIn0seyJsYWJlbCI6ImRvbWFpbjogc2lua3MiLCJwZXJtYWxpbmsiOiIvaGlnaGxpZ2h0cy90YWdzL2RvbWFpbi1zaW5rcyJ9XSwidGl0bGUiOiJXaGl0ZWxpc3QgJiBCbGFja2xpc3QgRmllbGRzIFdoZW4gRW5jb2RpbmciLCJ0cnVuY2F0ZWQiOmZhbHNlLCJwcmV2SXRlbSI6eyJ0aXRsZSI6Ik5ldyBFbmNvZGluZyBPcHRpb25zIiwicGVybWFsaW5rIjoiL2hpZ2hsaWdodHMvMjAyMC0wMy0wNC1lbmNvZGluZy1vbmx5LWZpZWxkcy1leGNlcHQtZmllbGRzIn0sIm5leHRJdGVtIjp7InRpdGxlIjoiV2UndmUgQWRkZWQgQSBQcml2YWN5IFBvbGljeSIsInBlcm1hbGluayI6Ii9oaWdobGlnaHRzLzIwMjAtMDMtMDMtcHJpdmFjeS1wb2xpY3kifX07LyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgcmlnaHRUb2M9W107Y29uc3QgbWFrZVNob3J0Y29kZT1uYW1lPT5mdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTtjb25zdCBsYXlvdXRQcm9wcz17cmlnaHRUb2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgicCIsbnVsbCxgV2UndmUgYWRkZWQgdGhlIGFiaWxpdHkgdG8gd2hpdGVsaXN0IGFuZCBibGFja2xpc3QgZmllbGRzIGR1cmluZyB0aGUgZW5jb2RpbmcKcHJvY2VzcyB3aXRoaW4gYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiL2RvY3MvcmVmZXJlbmNlL3NpbmtzLyJ9KSxgc2lua3NgKSxgLiBUaGlzIGlzIHVzZWZ1bCBpZiB5b3UgaGF2ZSBtZXRhZGF0YSBmaWVsZHMKdGhhdCB5b3UgZG8gbm90IHdhbnQgdG8gc2VuZCBkb3duc3RyZWFtLiBGb3IgZXhhbXBsZSwgeW91IG1pZ2h0IGhhdmUgYW4KYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGFwcGxpY2F0aW9uX2lkYCksYCBmaWVsZHMgdGhhdCB5b3UgdXNlIGZvciBwYXJ0aXRpb25pbmcsIGJ1dCB5b3UgZG9uJ3Qgd2FudCB0bwppbmNsdWRlIGl0IGludGhlIGFjdHVhbCBkYXRhIHNpbmNlIGl0IHdvdWxkIGJlIGR1cGxpY2F0aXZlLmApLG1keCgicCIsbnVsbCxgVG8gdXNlIHRoaXMgZmVhdHVyZSBzZWUgdGhlIG5ldyBgLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSxgZW5jb2RpbmdgKSxgIG9wdGlvbnMgZm9yIGVhY2ggc2luay4gRm9yIGV4YW1wbGUsCnRoZSBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiIvZG9jcy9yZWZlcmVuY2Uvc2lua3MvY2xpY2tob3VzZS8jZW5jb2RpbmcifSksbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToiYSJ9LGBjbGlja2hvdXNlYCksYCBzaW5rJ3MgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJhIn0sYGVuY29kaW5nYCksYCBvcHRpb25gKSxgLmApKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},{"version":3,"sources":["/Users/Yun/vector/website/highlights/2020-03-04-encoding-whitelist-blacklist.md"],"names":["React","mdx","frontMatter","last_modified_on","$schema","title","description","author_github","pr_numbers","release","hide_on_release_notes","tags","metadata","rightToc","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"gGACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CAEA,MAAO,MAAMC,CAAAA,WAAW,CAAG,CAC5BC,gBAAgB,CAAE,YADU,CAE5BC,OAAO,CAAE,iCAFmB,CAG5BC,KAAK,CAAE,4CAHqB,CAI5BC,WAAW,CAAE,2DAJe,CAK5BC,aAAa,CAAE,gCALa,CAM5BC,UAAU,CAAE,CACX,IADW,CANgB,CAS5BC,OAAO,CAAE,OATmB,CAU5BC,qBAAqB,CAAE,IAVK,CAW5BC,IAAI,CAAE,CACL,mBADK,CAEL,eAFK,CAXsB,CAApB,CAgBT,MAAO,MAAMC,CAAAA,QAAQ,CAAG,CACtB,OAAQ,0BADc,CAEtB,cAAe,2DAFO,CAGtB,YAAa,qDAHS,CAItB,cAAe,YAJO,CAKtB,SAAU,6DALY,CAMtB,OAAQ,CACN,CACE,QAAS,mBADX,CAEE,YAAa,mCAFf,CADM,CAKN,CACE,QAAS,eADX,CAEE,YAAa,+BAFf,CALM,CANc,CAgBtB,QAAS,4CAhBa,CAiBtB,YAAa,KAjBS,CAkBtB,WAAY,CACV,QAAS,sBADC,CAEV,YAAa,2DAFH,CAlBU,CAsBtB,WAAY,CACV,QAAS,8BADC,CAEV,YAAa,uCAFH,CAtBU,CAAjB,CA2BL,cAEF,MAAO,MAAMC,CAAAA,QAAQ,CAAG,EAAjB,CACP,KAAMC,CAAAA,aAAa,CAAGC,IAAI,EAAI,QAASC,CAAAA,mBAAT,CAA6BC,KAA7B,CAAoC,CAChEC,OAAO,CAACC,IAAR,CAAa,aAAeJ,IAAf,CAAsB,yEAAnC,EACA,MAAO,WAASE,KAAT,CAAP,CACD,CAHD,CAKA,KAAMG,CAAAA,WAAW,CAAG,CAClBP,QADkB,CAApB,CAGA,KAAMQ,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,CAAoB,CACjCC,UADiC,CAEjC,GAAGN,KAF8B,CAApB,CAGZ,CACD,MAAO,KAAC,SAAD,aAAeG,WAAf,CAAgCH,KAAhC,EAAuC,UAAU,CAAEM,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GAEL,aAAK;gBAAL,CACa,kBAAG,UAAU,CAAC,GAAd,EAAsB,CAC/B,OAAQ,wBADuB,CAAtB,EAEN,OAFM,CADb,CAGoB;;CAHpB,CAKF,kBAAY,UAAU,CAAC,GAAvB,EAA6B,gBAA7B,CALE,CAK0D;4DAL1D,CAFK,CASL,aAAK,kCAAL,CAAuC,kBAAY,UAAU,CAAC,GAAvB,EAA6B,UAA7B,CAAvC,CAA6F;KAA7F,CACE,kBAAG,UAAU,CAAC,GAAd,EAAsB,CACpB,OAAQ,4CADY,CAAtB,EAEG,kBAAY,UAAU,CAAC,GAAvB,EAA6B,YAA7B,CAFH,CAE2D,UAF3D,CAEqE,kBAAY,UAAU,CAAC,GAAvB,EAA6B,UAA7B,CAFrE,CAE2H,SAF3H,CADF,CAG4I,GAH5I,CATK,CAAP,CAcD,CAED,CACAD,UAAU,CAACE,cAAX,CAA4B,IAA5B","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tlast_modified_on: '2020-04-13',\n\t$schema: '/.meta/.schemas/highlights.json',\n\ttitle: 'Whitelist & Blacklist Fields When Encoding',\n\tdescription: 'More control over which fields are included when encoding',\n\tauthor_github: 'https://github.com/binarylogic',\n\tpr_numbers: [\n\t\t1915\n\t],\n\trelease: '0.9.0',\n\thide_on_release_notes: true,\n\ttags: [\n\t\t'type: new feature',\n\t\t'domain: sinks'\n\t]\n};\nexport const metadata = {\n  \"date\": \"2020-03-04T00:00:00.000Z\",\n  \"description\": \"More control over which fields are included when encoding\",\n  \"permalink\": \"/highlights/2020-03-04-encoding-whitelist-blacklist\",\n  \"readingTime\": \"1 min read\",\n  \"source\": \"@site/highlights/2020-03-04-encoding-whitelist-blacklist.md\",\n  \"tags\": [\n    {\n      \"label\": \"type: new feature\",\n      \"permalink\": \"/highlights/tags/type-new-feature\"\n    },\n    {\n      \"label\": \"domain: sinks\",\n      \"permalink\": \"/highlights/tags/domain-sinks\"\n    }\n  ],\n  \"title\": \"Whitelist & Blacklist Fields When Encoding\",\n  \"truncated\": false,\n  \"prevItem\": {\n    \"title\": \"New Encoding Options\",\n    \"permalink\": \"/highlights/2020-03-04-encoding-only-fields-except-fields\"\n  },\n  \"nextItem\": {\n    \"title\": \"We've Added A Privacy Policy\",\n    \"permalink\": \"/highlights/2020-03-03-privacy-policy\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`We've added the ability to whitelist and blacklist fields during the encoding\nprocess within `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/sinks/\"\n      }}>{`sinks`}</a>{`. This is useful if you have metadata fields\nthat you do not want to send downstream. For example, you might have an\n`}<inlineCode parentName=\"p\">{`application_id`}</inlineCode>{` fields that you use for partitioning, but you don't want to\ninclude it inthe actual data since it would be duplicative.`}</p>\n    <p>{`To use this feature see the new `}<inlineCode parentName=\"p\">{`encoding`}</inlineCode>{` options for each sink. For example,\nthe `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/reference/sinks/clickhouse/#encoding\"\n      }}><inlineCode parentName=\"a\">{`clickhouse`}</inlineCode>{` sink's `}<inlineCode parentName=\"a\">{`encoding`}</inlineCode>{` option`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}
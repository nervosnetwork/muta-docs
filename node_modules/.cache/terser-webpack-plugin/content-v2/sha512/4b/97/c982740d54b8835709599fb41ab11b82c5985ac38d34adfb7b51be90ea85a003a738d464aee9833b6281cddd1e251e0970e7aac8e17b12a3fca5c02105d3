{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{197:function(e,t,a){\"use strict\";a.r(t),a.d(t,\"frontMatter\",(function(){return d})),a.d(t,\"metadata\",(function(){return m})),a.d(t,\"rightToc\",(function(){return u})),a.d(t,\"default\",(function(){return f}));var n=a(1),l=a(6),r=(a(0),a(307)),i=a(309),s=a(310),o=a(312),c=a(311),d={last_modified_on:\"2020-07-13\",component_title:\"Add Fields\",description:\"The Vector `add_fields` transform accepts and outputs `log` events, allowing you to add one or more log fields.\",event_types:[\"log\"],function_category:\"schema\",issues_url:\"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+add_fields%22\",operating_systems:[\"Linux\",\"MacOS\",\"Windows\"],sidebar_label:'add_fields|[\"log\"]',source_url:\"https://github.com/timberio/vector/tree/master/src/transforms/add_fields.rs\",status:\"prod-ready\",title:\"Add Fields Transform\",unsupported_operating_systems:[]},m={id:\"reference/transforms/add_fields\",title:\"Add Fields Transform\",description:\"The Vector `add_fields` transform accepts and outputs `log` events, allowing you to add one or more log fields.\",source:\"@site/docs/reference/transforms/add_fields.md\",permalink:\"/docs/reference/transforms/add_fields\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/reference/transforms/add_fields.md\",sidebar_label:'add_fields|[\"log\"]'},u=[{value:\"Configuration\",id:\"configuration\",children:[{value:\"fields\",id:\"fields\",children:[]},{value:\"overwrite\",id:\"overwrite\",children:[]}]},{value:\"How It Works\",id:\"how-it-works\",children:[{value:\"Complex Processing\",id:\"complex-processing\",children:[]},{value:\"Conflicts\",id:\"conflicts\",children:[]},{value:\"Environment Variables\",id:\"environment-variables\",children:[]},{value:\"Types\",id:\"types\",children:[]}]}],p={rightToc:u};function f(e){var t=e.components,a=Object(l.a)(e,[\"components\"]);return Object(r.b)(\"wrapper\",Object(n.a)({},p,a,{components:t,mdxType:\"MDXLayout\"}),Object(r.b)(\"p\",null,\"The Vector \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"add_fields\"),\" transform\\naccepts and outputs \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"log\")),\" events, allowing you to add\\none or more log fields.\"),Object(r.b)(\"h2\",{id:\"configuration\"},\"Configuration\"),Object(r.b)(o.a,{block:!0,defaultValue:\"common\",values:[{label:\"Common\",value:\"common\"},{label:\"Advanced\",value:\"advanced\"}],mdxType:\"Tabs\"},Object(r.b)(c.a,{value:\"common\",mdxType:\"TabItem\"},Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  # General\\n  type = \"add_fields\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n  overwrite = true # optional, default\\n\\n  # Fields\\n  fields.string_field = \"string value\" # example\\n  fields.env_var_field = \"${ENV_VAR}\" # example\\n  fields.templated_field = \"{{ my_other_field }}\" # example\\n  fields.int_field = 1 # example\\n  fields.float_field = 1.2 # example\\n  fields.bool_field = true # example\\n  fields.timestamp_field = 1979-05-27T00:32:00Z # example\\n  fields.parent.child_field = \"child_value\" # example\\n  fields.list_field = [\"first\", \"second\", \"third\"] # example\\n'))),Object(r.b)(c.a,{value:\"advanced\",mdxType:\"TabItem\"},Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  # General\\n  type = \"add_fields\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n  overwrite = true # optional, default\\n\\n  # Fields\\n  fields.string_field = \"string value\" # example\\n  fields.env_var_field = \"${ENV_VAR}\" # example\\n  fields.templated_field = \"{{ my_other_field }}\" # example\\n  fields.int_field = 1 # example\\n  fields.float_field = 1.2 # example\\n  fields.bool_field = true # example\\n  fields.timestamp_field = 1979-05-27T00:32:00Z # example\\n  fields.parent.child_field = \"child_value\" # example\\n  fields.list_field = [\"first\", \"second\", \"third\"] # example\\n')))),Object(r.b)(i.a,{filters:!0,mdxType:\"Fields\"},Object(r.b)(s.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:\"fields\",path:null,relevantWhen:null,required:!0,templateable:!1,type:\"table\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h3\",{id:\"fields\"},\"fields\"),Object(r.b)(\"p\",null,\"A table of key/value pairs representing the keys to be added to the event.\"),Object(r.b)(i.a,{filters:!1,mdxType:\"Fields\"},Object(r.b)(s.a,{common:!0,defaultValue:null,enumValues:null,examples:[{string_field:\"string value\"},{env_var_field:\"${ENV_VAR}\"},{templated_field:\"{{ my_other_field }}\"},{int_field:1},{float_field:1.2},{bool_field:!0},{timestamp_field:\"1979-05-27 00:32:00 -0700\"},{parent:{child_field:\"child_value\"}},{list_field:[\"first\",\"second\",\"third\"]}],groups:[],name:\"`[field-name]`\",path:\"fields\",relevantWhen:null,required:!0,templateable:!1,type:\"*\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h4\",{id:\"field-name\"},Object(r.b)(\"inlineCode\",{parentName:\"h4\"},\"[field-name]\")),Object(r.b)(\"p\",null,\"The name of the field to add. Accepts all \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/setup/configuration/#types\"}),\"supported\\ntypes\"),\". Use \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\".\"),\" for adding nested fields.\")))),Object(r.b)(s.a,{common:!0,defaultValue:!0,enumValues:null,examples:[!0,!1],groups:[],name:\"overwrite\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"bool\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h3\",{id:\"overwrite\"},\"overwrite\"),Object(r.b)(\"p\",null,\"By default, fields will be overridden. Set this to \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"false\"),\" to avoid overwriting\\nvalues.\"))),Object(r.b)(\"h2\",{id:\"how-it-works\"},\"How It Works\"),Object(r.b)(\"h3\",{id:\"complex-processing\"},\"Complex Processing\"),Object(r.b)(\"p\",null,\"If you encounter limitations with the \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"add_fields\"),\"\\ntransform then we recommend using a \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://vector.dev/components/?functions%5B%5D=program\"}),\"runtime transform\"),\".\\nThese transforms are designed for complex processing and give you the power of\\nfull programming runtime.\"),Object(r.b)(\"h3\",{id:\"conflicts\"},\"Conflicts\"),Object(r.b)(\"h4\",{id:\"key-conflicts\"},\"Key Conflicts\"),Object(r.b)(\"p\",null,\"Keys specified in this transform will replace existing keys.\"),Object(r.b)(\"h4\",{id:\"nested-key-conflicts\"},\"Nested Key Conflicts\"),Object(r.b)(\"p\",null,\"Nested keys are added in a \",Object(r.b)(\"em\",{parentName:\"p\"},\"deep\"),\" fashion. They will not replace any ancestor\\nobjects. For example, given the following \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"log\"),\" event:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"parent\": {\\n    \"child1\": \"value1\"\\n  }\\n}\\n')),Object(r.b)(\"p\",null,\"And the following configuration:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\"}),'[transforms.add_nested_field]\\n  type = \"add_fields\"\\n  fields.parent.child2 = \"value2\"\\n')),Object(r.b)(\"p\",null,\"Will result in the following log event:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"parent\": {\\n    \"child1\": \"value1\",\\n    \"child2\": \"value2\"\\n  }\\n}\\n')),Object(r.b)(\"p\",null,\"Notice that \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"parent.child1\"),\" field was preserved.\"),Object(r.b)(\"h3\",{id:\"environment-variables\"},\"Environment Variables\"),Object(r.b)(\"p\",null,\"Environment variables are supported through all of Vector's configuration.\\nSimply add \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"${MY_ENV_VAR}\"),\" in your Vector configuration file and the variable\\nwill be replaced before being evaluated.\"),Object(r.b)(\"p\",null,\"You can learn more in the\\n\",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/setup/configuration/#environment-variables\"}),\"Environment Variables\"),\" section.\"),Object(r.b)(\"h3\",{id:\"types\"},\"Types\"),Object(r.b)(\"p\",null,\"All supported \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/setup/configuration/#types\"}),\"configuration value types\"),\" are\\naccepted. This includes primitivate types (\",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"string\"),\", \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"int\"),\", \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"float\"),\", \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"boolean\"),\")\\nand special types, such as \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#arrays\"}),\"arrays\"),\" and\\n\",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#nested-fields\"}),\"nested fields\"),\".\"))}f.isMDXComponent=!0},309:function(e,t,a){\"use strict\";a(12);var n=a(0),l=a.n(n),r=a(318),i=a(317),s=a(316),o=a.n(s);t.a=function({children:e,filters:t}){const[a,s]=Object(n.useState)(!1),[c,d]=Object(n.useState)(new Set),[m,u]=Object(n.useState)(!1),[p,f]=Object(n.useState)(null);let b=[];e&&(b=Array.isArray(e)?e:[e]);let h=b.some(e=>e.props.common),g=o()(b).flatMap(e=>e.props.groups).uniq().value(),v=b.some(e=>e.props.required),O=b;return a&&(O=O.filter(e=>e.props.common)),c.size>0&&(O=O.filter(e=>Array.from(c).every(t=>e.props.groups.includes(t)))),m&&(O=O.filter(e=>e.props.required)),p&&(O=O.filter(e=>e.props.name.toLowerCase().includes(p.toLowerCase()))),l.a.createElement(l.a.Fragment,null,b.length>1&&!1!==t?l.a.createElement(\"div\",{className:\"filters\"},l.a.createElement(\"div\",{className:\"search\"},l.a.createElement(\"span\",{className:\"search--result-count\"},O.length,\" items\"),l.a.createElement(\"input\",{className:\"input--text input--lg\",type:\"text\",onChange:e=>f(e.currentTarget.value),placeholder:\"\\ud83d\\udd0d Search...\"})),l.a.createElement(\"div\",{className:\"filter\"},l.a.createElement(\"div\",{className:\"filter--choices\"},l.a.createElement(r.a,{values:g,currentState:c,setState:d}),h&&l.a.createElement(\"label\",{title:\"Only show popular/common results\"},l.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>s(e.currentTarget.checked),checked:a}),\"common\"),v&&l.a.createElement(\"label\",{title:\"Only show required results\"},l.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>u(e.currentTarget.checked),checked:m}),\"required\")))):null,!Array.isArray(O)||O.length>0?l.a.createElement(\"ul\",{className:\"connected-list\"},O):l.a.createElement(i.a,{text:\"no components found\"}))}},310:function(e,t,a){\"use strict\";a(12);var n=a(0),l=a.n(n),r=a(306),i=a.n(r),s=(a(307),a(315));function o(e){return e.includes(\".\")?'\"'+e+'\"':e}function c(e){return\"string\"==typeof e&&e.includes(\"\\n\")?`\"\"\"\\n${e}\\n\"\"\"`:JSON.stringify(e)}function d(e,t){return(a=t)&&a.constructor===Object?\"name\"in t&&\"value\"in t?`${o(t.name)} = ${c(t.value)}`:`${o(Object.keys(t)[0])} = ${c(Object.values(t)[0])}`:e?`${o(e)} = ${c(t)}`:c(t);var a}function m({values:e}){let t=[];if(Array.isArray(e))for(var a in e){let n=e[a];t.push(l.a.createElement(\"code\",{key:n},c(n))),t.push(\" \")}else for(var n in e)t.push(l.a.createElement(\"code\",{key:n,className:\"with-info-icon\",title:e[n]},c(n))),t.push(\" \");return t}function u({name:e,path:t,values:a}){let n=\"\";return a.forEach((function(a){t&&(n+=t+\".\"),n+=d(e,a)+\"\\n\"})),l.a.createElement(\"div\",null,l.a.createElement(s.a,{className:\"language-toml\"},n))}function p({unit:e,value:t}){let a=\"\";return e&&(a=l.a.createElement(l.a.Fragment,null,\" (\",e,\")\")),l.a.createElement(l.a.Fragment,null,l.a.createElement(\"code\",null,c(t)),a)}function f({value:e}){let t=Object.keys(e)[0],a=Object.values(e)[0];return\"\"==a&&(a=null),l.a.createElement(\"span\",null,l.a.createElement(\"code\",null,l.a.createElement(\"a\",{href:\"#\"+t},t)),\" \",\"= \",l.a.createElement(\"code\",null,c(a)))}function b({defaultValue:e,enumValues:t,examples:a,groups:r,name:i,path:s,relevantWhen:o,required:c,unit:d,warnings:b}){const[h,g]=Object(n.useState)(!1);return l.a.createElement(\"ul\",{className:\"info\"},b&&b.length>0&&b.map((e,t)=>l.a.createElement(\"li\",{key:t,className:\"warning\"},l.a.createElement(\"i\",{className:\"feather icon-alert-triangle\"}),\" WARNING:\",\" \",e.text)),o&&l.a.createElement(\"li\",null,\"Only \",c?\"required\":\"relevant\",\" when:\",\" \",l.a.createElement(f,{value:o})),void 0!==e?null!==e?l.a.createElement(\"li\",null,\"Default: \",l.a.createElement(p,{unit:d,value:e})):l.a.createElement(\"li\",null,\"No default\"):null,t&&l.a.createElement(\"li\",null,\"Enum, must be one of: \",l.a.createElement(m,{values:t})),(a.length>1||a[0]!=e)&&l.a.createElement(\"li\",null,l.a.createElement(\"div\",{className:\"show-more\",onClick:()=>g(!h)},h?\"Hide examples\":\"View examples\"),h&&l.a.createElement(u,{name:i,path:s,values:a})))}t.a=function({children:e,common:t,defaultValue:a,enumValues:r,examples:s,groups:o,name:c,path:d,relevantWhen:m,required:u,templateable:p,type:f,unit:h,warnings:g}){const[v,O]=Object(n.useState)(!1);let j=e;return v&&(j=j.filter(e=>\"p\"!=e.props.originalType)),l.a.createElement(\"li\",{className:i()({\"field-required\":u,\"field-collapsed\":v}),required:u},l.a.createElement(\"div\",{className:\"badges\"},p&&l.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This option is dynamic and accepts the Vector template syntax\"},\"templateable\"),f&&l.a.createElement(\"span\",{className:\"badge badge--secondary\"},f,h&&l.a.createElement(l.a.Fragment,null,\" (\",h,\")\")),r&&Object.keys(r).length>0&&l.a.createElement(\"span\",{className:\"badge badge--secondary with-info-icon\",title:\"This option is an enumation and only allows specific values\"},\"enum\"),t&&l.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This is a popular that we recommend for getting started\"},\"common\"),u?l.a.createElement(\"span\",{className:\"badge badge--danger\"},\"required\",m&&\"*\"):l.a.createElement(\"span\",{className:\"badge badge--secondary\"},\"optional\")),j,!v&&\"table\"!=f&&l.a.createElement(b,{defaultValue:a,enumValues:r,examples:s,groups:o,name:c,path:d,relevantWhen:m,required:u,unit:h,warnings:g}))}}}]);","extractedComments":[]}
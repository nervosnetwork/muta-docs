{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{277:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"frontMatter\",(function(){return c})),t.d(n,\"metadata\",(function(){return u})),t.d(n,\"rightToc\",(function(){return p})),t.d(n,\"default\",(function(){return h}));var a=t(1),s=t(6),l=(t(0),t(307)),i=t(309),r=t(310),o=t(312),m=t(311),c={last_modified_on:\"2020-07-13\",component_title:\"Swimlanes\",description:\"The Vector `swimlanes` transform accepts and outputs `log` events, allowing you to route events across parallel streams using logical filters.\",event_types:[\"log\"],function_category:\"route\",issues_url:\"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+swimlanes%22\",operating_systems:[\"Linux\",\"MacOS\",\"Windows\"],sidebar_label:'swimlanes|[\"log\"]',source_url:\"https://github.com/timberio/vector/tree/master/src/transforms/swimlanes.rs\",status:\"beta\",title:\"Swimlanes Transform\",unsupported_operating_systems:[]},u={id:\"reference/transforms/swimlanes\",title:\"Swimlanes Transform\",description:\"The Vector `swimlanes` transform accepts and outputs `log` events, allowing you to route events across parallel streams using logical filters.\",source:\"@site/docs/reference/transforms/swimlanes.md\",permalink:\"/docs/reference/transforms/swimlanes\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/reference/transforms/swimlanes.md\",sidebar_label:'swimlanes|[\"log\"]'},p=[{value:\"Configuration\",id:\"configuration\",children:[{value:\"lanes\",id:\"lanes\",children:[]}]},{value:\"Examples\",id:\"examples\",children:[]},{value:\"How It Works\",id:\"how-it-works\",children:[{value:\"Complex Processing\",id:\"complex-processing\",children:[]},{value:\"Environment Variables\",id:\"environment-variables\",children:[]}]}],d={rightToc:p};function h(e){var n=e.components,t=Object(s.a)(e,[\"components\"]);return Object(l.b)(\"wrapper\",Object(a.a)({},d,t,{components:n,mdxType:\"MDXLayout\"}),Object(l.b)(\"p\",null,\"The Vector \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"swimlanes\"),\" transform\\naccepts and outputs \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"log\")),\" events, allowing you to route\\nevents across parallel streams using logical filters.\"),Object(l.b)(\"h2\",{id:\"configuration\"},\"Configuration\"),Object(l.b)(o.a,{block:!0,defaultValue:\"common\",values:[{label:\"Common\",value:\"common\"},{label:\"Advanced\",value:\"advanced\"}],mdxType:\"Tabs\"},Object(l.b)(m.a,{value:\"common\",mdxType:\"TabItem\"},Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  # General\\n  type = \"swimlanes\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n\\n  # Lanes\\n  [transforms.my_transform_id.lanes.`[swimlane-id]`]\\n    type = \"check_fields\" # optional, default\\n    \"message.eq\" = \"this is the content to match against\" # example\\n    \"message.eq\" = [\"match this\", \"or this\"] # example\\n    \"message.contains\" = \"foo\" # example\\n    \"message.contains\" = [\"foo\", \"bar\"] # example\\n    \"environment.ends_with\" = \"-staging\" # example\\n    \"environment.ends_with\" = [\"-staging\", \"-running\"] # example\\n    \"message.regex\" = \" (any|of|these|five|words) \" # example\\n    \"environment.starts_with\" = \"staging-\" # example\\n    \"environment.starts_with\" = [\"staging-\", \"running-\"] # example\\n'))),Object(l.b)(m.a,{value:\"advanced\",mdxType:\"TabItem\"},Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  # General\\n  type = \"swimlanes\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n\\n  # Lanes\\n  [transforms.my_transform_id.lanes.`[swimlane-id]`]\\n    type = \"check_fields\" # optional, default\\n    \"message.eq\" = \"this is the content to match against\" # example\\n    \"message.eq\" = [\"match this\", \"or this\"] # example\\n    \"host.exists\" = true # example\\n    \"method.neq\" = \"POST\" # example\\n    \"method.neq\" = [\"POST\", \"GET\"] # example\\n    \"message.not_contains\" = \"some phrase to ignore\" # example\\n    \"unit.not_starts_with\" = \"sys-\" # example\\n    \"unit.not_ends_with\" = \".device\" # example\\n    \"message.contains\" = \"foo\" # example\\n    \"message.contains\" = [\"foo\", \"bar\"] # example\\n    \"environment.ends_with\" = \"-staging\" # example\\n    \"environment.ends_with\" = [\"-staging\", \"-running\"] # example\\n    \"message.ip_cidr_contains\" = \"10.0.0.0/8\" # example\\n    \"message.ip_cidr_contains\" = [\"2000::/10\", \"192.168.0.0/16\"] # example\\n    \"message.regex\" = \" (any|of|these|five|words) \" # example\\n    \"environment.starts_with\" = \"staging-\" # example\\n    \"environment.starts_with\" = [\"staging-\", \"running-\"] # example\\n')))),Object(l.b)(i.a,{filters:!0,mdxType:\"Fields\"},Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:\"lanes\",path:null,relevantWhen:null,required:!0,templateable:!1,type:\"table\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"lanes\"},\"lanes\"),Object(l.b)(\"p\",null,\"A table of swimlane identifiers to logical conditions representing the filter\\nof the swimlane. Each swimlane can then be referenced as an input by other\\ncomponents with the name \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"<transform_name>.<swimlane_id>\"),\".\"),Object(l.b)(i.a,{filters:!1,mdxType:\"Fields\"},Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:\"`[swimlane-id]`\",path:\"lanes\",relevantWhen:null,required:!0,templateable:!1,type:\"table\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"swimlane-id\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[swimlane-id]\")),Object(l.b)(\"p\",null,\"The identifier of a swimlane.\"),Object(l.b)(i.a,{filters:!1,mdxType:\"Fields\"},Object(l.b)(r.a,{common:!0,defaultValue:\"check_fields\",enumValues:{check_fields:\"Allows you to check individual fields against a list of conditions.\",is_log:\"Returns true if the event is a log.\",is_metric:\"Returns true if the event is a metric.\"},examples:[\"check_fields\",\"is_log\",\"is_metric\"],groups:[],name:\"type\",path:\"lanes.`[swimlane-id]`\",relevantWhen:null,required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"type\"},\"type\"),Object(l.b)(\"p\",null,\"The type of the condition to execute.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"message.eq\":\"this is the content to match against\"},{\"message.eq\":[\"match this\",\"or this\"]}],groups:[],name:\"`[field-name]`.eq\",path:\"lanes.`[swimlane-id]`\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"field-nameeq\"},Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[field-name]\"),\".eq\"),Object(l.b)(\"p\",null,\"Check whether a fields contents exactly matches the value specified. This may\\nbe a single string or a list of strings, in which case this evaluates to true\\nif any of the list matches.\")),Object(l.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{\"host.exists\":!0}],groups:[],name:\"`[field-name]`.exists\",path:\"lanes.`[swimlane-id]`\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"bool\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"field-nameexists\"},Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[field-name]\"),\".exists\"),Object(l.b)(\"p\",null,\"Check whether a field exists or does not exist, depending on the provided value\\nbeing \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"true\"),\" or \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"false\"),\" respectively.\")),Object(l.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{\"method.neq\":\"POST\"},{\"method.neq\":[\"POST\",\"GET\"]}],groups:[],name:\"`[field-name]`.neq\",path:\"lanes.`[swimlane-id]`\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"field-nameneq\"},Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[field-name]\"),\".neq\"),Object(l.b)(\"p\",null,\"Check whether a fields contents does not match the value specified. This may be\\na single string or a list of strings, in which case this evaluates to false if\\nany of the list matches.\")),Object(l.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{\"message.not_contains\":\"some phrase to ignore\"},{\"unit.not_starts_with\":\"sys-\"},{\"unit.not_ends_with\":\".device\"}],groups:[],name:\"`[field-name]`.not_`[condition]`\",path:\"lanes.`[swimlane-id]`\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"any\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"field-namenot_condition\"},Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[field-name]\"),\".not_\",Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[condition]\")),Object(l.b)(\"p\",null,\"Check if the given \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"[condition]\"),\" does not match.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"message.contains\":\"foo\"},{\"message.contains\":[\"foo\",\"bar\"]}],groups:[],name:\"`[field_name]`.contains\",path:\"lanes.`[swimlane-id]`\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"field_namecontains\"},Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[field_name]\"),\".contains\"),Object(l.b)(\"p\",null,\"Checks whether a string field contains a string argument. This may be a single\\nstring or a list of strings, in which case this evaluates to true if any of the\\nlist matches.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"environment.ends_with\":\"-staging\"},{\"environment.ends_with\":[\"-staging\",\"-running\"]}],groups:[],name:\"`[field_name]`.ends_with\",path:\"lanes.`[swimlane-id]`\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"field_nameends_with\"},Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[field_name]\"),\".ends_with\"),Object(l.b)(\"p\",null,\"Checks whether a string field ends with a string argument. This may be a single\\nstring or a list of strings, in which case this evaluates to true if any of the\\nlist matches.\")),Object(l.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{\"message.ip_cidr_contains\":\"10.0.0.0/8\"},{\"message.ip_cidr_contains\":[\"2000::/10\",\"192.168.0.0/16\"]}],groups:[],name:\"`[field_name]`.ip_cidr_contains\",path:\"lanes.`[swimlane-id]`\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"field_nameip_cidr_contains\"},Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[field_name]\"),\".ip_cidr_contains\"),Object(l.b)(\"p\",null,\"Checks whether an IP field is contained within a given \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\"}),\"IP CIDR\"),\"\\n(works with IPv4 and IPv6). This may be a single string or a list of strings,\\nin which case this evaluates to true if the IP field is contained within any of\\nthe CIDRs in the list.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"message.regex\":\" (any|of|these|five|words) \"}],groups:[],name:\"`[field_name]`.regex\",path:\"lanes.`[swimlane-id]`\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"field_nameregex\"},Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[field_name]\"),\".regex\"),Object(l.b)(\"p\",null,\"Checks whether a string field matches a \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/Regular_expression\"}),\"regular expression\"),\".\\nVector uses the \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://docs.rs/regex/1.3.6/regex/#syntax\"}),\"documented Rust Regex syntax\"),\". Note\\nthat this condition is considerably more expensive than a regular string match\\n(such as \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"starts_with\"),\" or \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"contains\"),\") so the use of those conditions are\\npreferred where possible.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"environment.starts_with\":\"staging-\"},{\"environment.starts_with\":[\"staging-\",\"running-\"]}],groups:[],name:\"`[field_name]`.starts_with\",path:\"lanes.`[swimlane-id]`\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h5\",{id:\"field_namestarts_with\"},Object(l.b)(\"inlineCode\",{parentName:\"h5\"},\"[field_name]\"),\".starts_with\"),Object(l.b)(\"p\",null,\"Checks whether a string field starts with a string argument. This may be a\\nsingle string or a list of strings, in which case this evaluates to true if any\\nof the list matches.\"))))))),Object(l.b)(\"h2\",{id:\"examples\"},\"Examples\"),Object(l.b)(o.a,{block:!0,defaultValue:\"ifelse\",select:!1,values:[{label:\"If/Else\",value:\"ifelse\"},{label:\"Splitting\",value:\"splitting\"}],mdxType:\"Tabs\"},Object(l.b)(m.a,{value:\"ifelse\",mdxType:\"TabItem\"},Object(l.b)(\"p\",null,\"The \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"swimlanes\"),\" transform, in it's simplest form, can act as a simple if/else stream splitter. For example, we can route events from the host \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"gerry\"),\" to a sink \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"only_loves_gerry\"),\", and all other events to a sink \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"hates_gerry\"),\":\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.splitting_gerrys]\\n  inputs = [ \"somewhere\" ]\\n  type = \"swimlanes\"\\n\\n  [transforms.splitting_gerrys.lanes.only_gerrys]\\n    type = \"check_fields\"\\n    \"host.eq\" = \"gerry\"\\n\\n  [transforms.splitting_gerrys.lanes.no_gerrys]\\n    type = \"check_fields\"\\n    \"host.neq\" = \"gerry\"\\n\\n[sinks.only_loves_gerry]\\n  inputs = [ \"splitting_gerrys.only_gerrys\" ]\\n  type = \"something\"\\n\\n[sinks.hates_gerry]\\n  inputs = [ \"splitting_gerrys.no_gerrys\" ]\\n  type = \"something_else\"\\n')),Object(l.b)(\"p\",null,\"This syntax makes it easy to create arbitrary numbers of swimlanes, each with their own logic, and easily route them to downstream components.\")),Object(l.b)(m.a,{value:\"splitting\",mdxType:\"TabItem\"},Object(l.b)(\"p\",null,\"To follow up with the previous \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"If/Else\"),\" example, let's say we want to split a log stream based on all of the log \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"level\"),\" values:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.level_splitter]\\n  type = \"swimlanes\"\\n\\n  [transforms.level_splitter.lanes.debug_events]\\n    type = \"check_fields\"\\n    \"level.eq\" = \"debug\"\\n\\n  [transforms.level_splitter.lanes.info_events]\\n    type = \"check_fields\"\\n    \"level.eq\" = \"info\"\\n\\n  [transforms.level_splitter.lanes.warn_events]\\n    type = \"check_fields\"\\n    \"level.eq\" = \"warn\"\\n\\n  [transforms.level_splitter.lanes.error_events]\\n    type = \"check_fields\"\\n    \"level.eq\" = \"error\"\\n\\n[sinks.info_printer]\\n  type = \"console\"\\n  inputs = [\"level_splitter.info_events\"]\\n  target = \"stdout\"\\n\\n[sinks.error_printer]\\n  type = \"console\"\\n  inputs = [\"level_splitter.error_events\"]\\n  target = \"stderr\"\\n\\n# Add more sinks or transforms that use the `debug_events` and `warn_events`\\n# streams\\n')),Object(l.b)(\"p\",null,\"Notice how we must define mutually exclusive conditions for each \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"level\"),\" value. If a log \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"level\"),\" does not match any of the lanes it will be dropped.\"))),Object(l.b)(\"h2\",{id:\"how-it-works\"},\"How It Works\"),Object(l.b)(\"h3\",{id:\"complex-processing\"},\"Complex Processing\"),Object(l.b)(\"p\",null,\"If you encounter limitations with the \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"swimlanes\"),\"\\ntransform then we recommend using a \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://vector.dev/components/?functions%5B%5D=program\"}),\"runtime transform\"),\".\\nThese transforms are designed for complex processing and give you the power of\\nfull programming runtime.\"),Object(l.b)(\"h3\",{id:\"environment-variables\"},\"Environment Variables\"),Object(l.b)(\"p\",null,\"Environment variables are supported through all of Vector's configuration.\\nSimply add \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"${MY_ENV_VAR}\"),\" in your Vector configuration file and the variable\\nwill be replaced before being evaluated.\"),Object(l.b)(\"p\",null,\"You can learn more in the\\n\",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/setup/configuration/#environment-variables\"}),\"Environment Variables\"),\" section.\"))}h.isMDXComponent=!0},309:function(e,n,t){\"use strict\";t(12);var a=t(0),s=t.n(a),l=t(318),i=t(317),r=t(316),o=t.n(r);n.a=function({children:e,filters:n}){const[t,r]=Object(a.useState)(!1),[m,c]=Object(a.useState)(new Set),[u,p]=Object(a.useState)(!1),[d,h]=Object(a.useState)(null);let b=[];e&&(b=Array.isArray(e)?e:[e]);let g=b.some(e=>e.props.common),f=o()(b).flatMap(e=>e.props.groups).uniq().value(),v=b.some(e=>e.props.required),y=b;return t&&(y=y.filter(e=>e.props.common)),m.size>0&&(y=y.filter(e=>Array.from(m).every(n=>e.props.groups.includes(n)))),u&&(y=y.filter(e=>e.props.required)),d&&(y=y.filter(e=>e.props.name.toLowerCase().includes(d.toLowerCase()))),s.a.createElement(s.a.Fragment,null,b.length>1&&!1!==n?s.a.createElement(\"div\",{className:\"filters\"},s.a.createElement(\"div\",{className:\"search\"},s.a.createElement(\"span\",{className:\"search--result-count\"},y.length,\" items\"),s.a.createElement(\"input\",{className:\"input--text input--lg\",type:\"text\",onChange:e=>h(e.currentTarget.value),placeholder:\"\\ud83d\\udd0d Search...\"})),s.a.createElement(\"div\",{className:\"filter\"},s.a.createElement(\"div\",{className:\"filter--choices\"},s.a.createElement(l.a,{values:f,currentState:m,setState:c}),g&&s.a.createElement(\"label\",{title:\"Only show popular/common results\"},s.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>r(e.currentTarget.checked),checked:t}),\"common\"),v&&s.a.createElement(\"label\",{title:\"Only show required results\"},s.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>p(e.currentTarget.checked),checked:u}),\"required\")))):null,!Array.isArray(y)||y.length>0?s.a.createElement(\"ul\",{className:\"connected-list\"},y):s.a.createElement(i.a,{text:\"no components found\"}))}},310:function(e,n,t){\"use strict\";t(12);var a=t(0),s=t.n(a),l=t(306),i=t.n(l),r=(t(307),t(315));function o(e){return e.includes(\".\")?'\"'+e+'\"':e}function m(e){return\"string\"==typeof e&&e.includes(\"\\n\")?`\"\"\"\\n${e}\\n\"\"\"`:JSON.stringify(e)}function c(e,n){return(t=n)&&t.constructor===Object?\"name\"in n&&\"value\"in n?`${o(n.name)} = ${m(n.value)}`:`${o(Object.keys(n)[0])} = ${m(Object.values(n)[0])}`:e?`${o(e)} = ${m(n)}`:m(n);var t}function u({values:e}){let n=[];if(Array.isArray(e))for(var t in e){let a=e[t];n.push(s.a.createElement(\"code\",{key:a},m(a))),n.push(\" \")}else for(var a in e)n.push(s.a.createElement(\"code\",{key:a,className:\"with-info-icon\",title:e[a]},m(a))),n.push(\" \");return n}function p({name:e,path:n,values:t}){let a=\"\";return t.forEach((function(t){n&&(a+=n+\".\"),a+=c(e,t)+\"\\n\"})),s.a.createElement(\"div\",null,s.a.createElement(r.a,{className:\"language-toml\"},a))}function d({unit:e,value:n}){let t=\"\";return e&&(t=s.a.createElement(s.a.Fragment,null,\" (\",e,\")\")),s.a.createElement(s.a.Fragment,null,s.a.createElement(\"code\",null,m(n)),t)}function h({value:e}){let n=Object.keys(e)[0],t=Object.values(e)[0];return\"\"==t&&(t=null),s.a.createElement(\"span\",null,s.a.createElement(\"code\",null,s.a.createElement(\"a\",{href:\"#\"+n},n)),\" \",\"= \",s.a.createElement(\"code\",null,m(t)))}function b({defaultValue:e,enumValues:n,examples:t,groups:l,name:i,path:r,relevantWhen:o,required:m,unit:c,warnings:b}){const[g,f]=Object(a.useState)(!1);return s.a.createElement(\"ul\",{className:\"info\"},b&&b.length>0&&b.map((e,n)=>s.a.createElement(\"li\",{key:n,className:\"warning\"},s.a.createElement(\"i\",{className:\"feather icon-alert-triangle\"}),\" WARNING:\",\" \",e.text)),o&&s.a.createElement(\"li\",null,\"Only \",m?\"required\":\"relevant\",\" when:\",\" \",s.a.createElement(h,{value:o})),void 0!==e?null!==e?s.a.createElement(\"li\",null,\"Default: \",s.a.createElement(d,{unit:c,value:e})):s.a.createElement(\"li\",null,\"No default\"):null,n&&s.a.createElement(\"li\",null,\"Enum, must be one of: \",s.a.createElement(u,{values:n})),(t.length>1||t[0]!=e)&&s.a.createElement(\"li\",null,s.a.createElement(\"div\",{className:\"show-more\",onClick:()=>f(!g)},g?\"Hide examples\":\"View examples\"),g&&s.a.createElement(p,{name:i,path:r,values:t})))}n.a=function({children:e,common:n,defaultValue:t,enumValues:l,examples:r,groups:o,name:m,path:c,relevantWhen:u,required:p,templateable:d,type:h,unit:g,warnings:f}){const[v,y]=Object(a.useState)(!1);let w=e;return v&&(w=w.filter(e=>\"p\"!=e.props.originalType)),s.a.createElement(\"li\",{className:i()({\"field-required\":p,\"field-collapsed\":v}),required:p},s.a.createElement(\"div\",{className:\"badges\"},d&&s.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This option is dynamic and accepts the Vector template syntax\"},\"templateable\"),h&&s.a.createElement(\"span\",{className:\"badge badge--secondary\"},h,g&&s.a.createElement(s.a.Fragment,null,\" (\",g,\")\")),l&&Object.keys(l).length>0&&s.a.createElement(\"span\",{className:\"badge badge--secondary with-info-icon\",title:\"This option is an enumation and only allows specific values\"},\"enum\"),n&&s.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This is a popular that we recommend for getting started\"},\"common\"),p?s.a.createElement(\"span\",{className:\"badge badge--danger\"},\"required\",u&&\"*\"):s.a.createElement(\"span\",{className:\"badge badge--secondary\"},\"optional\")),w,!v&&\"table\"!=h&&s.a.createElement(b,{defaultValue:t,enumValues:l,examples:r,groups:o,name:m,path:c,relevantWhen:u,required:p,unit:g,warnings:f}))}}}]);","extractedComments":[]}
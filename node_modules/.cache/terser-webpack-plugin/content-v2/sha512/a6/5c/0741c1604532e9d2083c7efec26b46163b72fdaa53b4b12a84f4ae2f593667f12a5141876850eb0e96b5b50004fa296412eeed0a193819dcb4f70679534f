{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{244:function(e,t,a){\"use strict\";a.r(t),a.d(t,\"frontMatter\",(function(){return m})),a.d(t,\"metadata\",(function(){return u})),a.d(t,\"rightToc\",(function(){return d})),a.d(t,\"default\",(function(){return b}));var n=a(1),r=a(6),l=(a(0),a(307)),i=a(309),s=a(310),o=a(312),c=a(311),m={last_modified_on:\"2020-07-13\",component_title:\"Merge\",description:\"The Vector [`merge`](#merge) transform accepts and outputs `log` events, allowing you to merge partial log events into a single event.\",event_types:[\"log\"],function_category:\"aggregate\",issues_url:\"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+merge%22\",operating_systems:[\"Linux\",\"MacOS\",\"Windows\"],sidebar_label:'merge|[\"log\"]',source_url:\"https://github.com/timberio/vector/tree/master/src/transforms/merge.rs\",status:\"beta\",title:\"Merge Transform\",unsupported_operating_systems:[]},u={id:\"reference/transforms/merge\",title:\"Merge Transform\",description:\"The Vector [`merge`](#merge) transform accepts and outputs `log` events, allowing you to merge partial log events into a single event.\",source:\"@site/docs/reference/transforms/merge.md\",permalink:\"/docs/reference/transforms/merge\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/reference/transforms/merge.md\",sidebar_label:'merge|[\"log\"]'},d=[{value:\"Configuration\",id:\"configuration\",children:[{value:\"merge_fields\",id:\"merge_fields\",children:[]},{value:\"partial_event_marker_field\",id:\"partial_event_marker_field\",children:[]},{value:\"stream_discriminant_fields\",id:\"stream_discriminant_fields\",children:[]}]},{value:\"Examples\",id:\"examples\",children:[]},{value:\"How It Works\",id:\"how-it-works\",children:[{value:\"Complex Processing\",id:\"complex-processing\",children:[]},{value:\"Environment Variables\",id:\"environment-variables\",children:[]},{value:\"Field Notation Syntax\",id:\"field-notation-syntax\",children:[]},{value:\"When to use this transform\",id:\"when-to-use-this-transform\",children:[]}]}],p={rightToc:d};function b(e){var t=e.components,a=Object(r.a)(e,[\"components\"]);return Object(l.b)(\"wrapper\",Object(n.a)({},p,a,{components:t,mdxType:\"MDXLayout\"}),Object(l.b)(\"p\",null,\"The Vector \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#merge\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"merge\")),\" transform\\naccepts and outputs \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"log\")),\" events, allowing you to merge\\npartial log events into a single event.\"),Object(l.b)(\"h2\",{id:\"configuration\"},\"Configuration\"),Object(l.b)(o.a,{block:!0,defaultValue:\"common\",values:[{label:\"Common\",value:\"common\"},{label:\"Advanced\",value:\"advanced\"}],mdxType:\"Tabs\"},Object(l.b)(c.a,{value:\"common\",mdxType:\"TabItem\"},Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  type = \"merge\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n  merge_fields = [\"message\"] # optional, default\\n  partial_event_marker_field = \"_partial\" # optional, default\\n  stream_discriminant_fields = [] # optional, default\\n'))),Object(l.b)(c.a,{value:\"advanced\",mdxType:\"TabItem\"},Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  type = \"merge\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n  merge_fields = [\"message\"] # optional, default\\n  partial_event_marker_field = \"_partial\" # optional, default\\n  stream_discriminant_fields = [] # optional, default\\n')))),Object(l.b)(i.a,{filters:!0,mdxType:\"Fields\"},Object(l.b)(s.a,{common:!0,defaultValue:[\"message\"],enumValues:null,examples:[[\"message\"],[\"message\",\"parent.child\"]],groups:[],name:\"merge_fields\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"[string]\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"merge_fields\"},\"merge_fields\"),Object(l.b)(\"p\",null,\"Fields to merge. The values of these fields will be merged into the first\\npartial event. Fields not specified here will be ignored. Merging process takes\\nthe first partial event and the base, then it merges in the fields from each\\nsuccessive partial event, until a non-partial event arrives. Finally, the\\nnon-partial event fields are merged in, producing the resulting merged event.\\nSee \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field-notation-syntax\"}),\"Field Notation Syntax\"),\" for more info.\")),Object(l.b)(s.a,{common:!0,defaultValue:\"_partial\",enumValues:null,examples:[\"_partial\",\"parent.child\"],groups:[],name:\"partial_event_marker_field\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"partial_event_marker_field\"},\"partial_event_marker_field\"),Object(l.b)(\"p\",null,\"The field that indicates that the event is partial. A consequent stream of\\npartial events along with the first non-partial event will be merged together.\\nSee \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field-notation-syntax\"}),\"Field Notation Syntax\"),\" for more info.\")),Object(l.b)(s.a,{common:!0,defaultValue:[],enumValues:null,examples:[[\"host\"],[\"host\",\"parent.child\"]],groups:[],name:\"stream_discriminant_fields\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"[string]\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"stream_discriminant_fields\"},\"stream_discriminant_fields\"),Object(l.b)(\"p\",null,\"An ordered list of fields to distinguish streams by. Each stream has a separate\\npartial event merging state. Should be used to prevent events from unrelated\\nsources from mixing together, as this affects partial event processing.\\nSee \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field-notation-syntax\"}),\"Field Notation Syntax\"),\" for more info.\"))),Object(l.b)(\"h2\",{id:\"examples\"},\"Examples\"),Object(l.b)(o.a,{block:!0,defaultValue:\"default\",select:!1,values:[{label:\"Default\",value:\"default\"},{label:\"With Merge Fields\",value:\"with-merge-fields\"}],mdxType:\"Tabs\"},Object(l.b)(c.a,{value:\"default\",mdxType:\"TabItem\"},Object(l.b)(\"p\",null,\"Given the following \",Object(l.b)(\"em\",{parentName:\"p\"},\"default\"),\" configuration:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.merge_events]\\n  type = \"merge\"\\n  inputs = [...]\\n')),Object(l.b)(\"p\",null,\"And these three partial \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"log\"),\" events\"),\":\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"first log event\"',title:'\"first',log:!0,'event\"':!0}),'{\\n  \"message\": \"First\",\\n  \"_partial\": true,\\n  \"custom_string_field\": \"value1\",\\n  \"custom_int_field\": 1\\n}\\n')),Object(l.b)(\"p\",null,\"and\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"second log event\"',title:'\"second',log:!0,'event\"':!0}),'{\\n  \"message\": \"Second\",\\n  \"_partial\": true,\\n  \"custom_string_field\": \"value2\",\\n  \"custom_int_field\": 2\\n}\\n')),Object(l.b)(\"p\",null,\"and\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"third log event\"',title:'\"third',log:!0,'event\"':!0}),'{\\n  \"message\": \"Third\",\\n  \"custom_string_field\": \"value3\",\\n  \"custom_int_field\": 3\\n}\\n')),Object(l.b)(\"p\",null,\"A single \",Object(l.b)(\"em\",{parentName:\"p\"},\"merged\"),\" log event will be produced:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"message\": \"FirstSecondThird\",\\n  \"custom_string_field\": \"value1\",\\n  \"custom_int_field\": 1\\n}\\n')),Object(l.b)(\"p\",null,\"Notice that \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"custom_string_field\"),\" and \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"custom_int_field\"),\" were not overridden. This is because they were not listed in the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#merge_fields\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"merge_fields\")),\" option.\")),Object(l.b)(c.a,{value:\"with-merge-fields\",mdxType:\"TabItem\"},Object(l.b)(\"p\",null,\"Given the following configuration:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.merge_events]\\n  type = \"merge\"\\n  inputs = [...]\\n  merge_fields = [\"message\", \"custom_string_field\", \"custom_int_field\"]\\n')),Object(l.b)(\"p\",null,\"And these three partial \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"log\"),\" events\"),\":\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"first log event\"',title:'\"first',log:!0,'event\"':!0}),'{\\n  \"message\": \"First\",\\n  \"_partial\": true,\\n  \"custom_string_field\": \"value1\",\\n  \"custom_int_field\": 1\\n}\\n')),Object(l.b)(\"p\",null,\"and\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"second log event\"',title:'\"second',log:!0,'event\"':!0}),'{\\n  \"message\": \"Second\",\\n  \"_partial\": true,\\n  \"custom_string_field\": \"value2\",\\n  \"custom_int_field\": 2\\n}\\n')),Object(l.b)(\"p\",null,\"and\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"third log event\"',title:'\"third',log:!0,'event\"':!0}),'{\\n  \"message\": \"Third\",\\n  \"custom_string_field\": \"value3\",\\n  \"custom_int_field\": 3\\n}\\n')),Object(l.b)(\"p\",null,\"A single \",Object(l.b)(\"em\",{parentName:\"p\"},\"merged\"),\" log event will be produced:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"message\": \"FirstSecondThird\",\\n  \"custom_string_field\": \"value1value2value3\",\\n  \"custom_int_field\": 3\\n}\\n')),Object(l.b)(\"p\",null,\"Notice that \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"custom_string_field\"),\" is concatenated and \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"custom_int_field\"),\" overridden. This is because it was specified in the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#merge_fields\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"merge_fields\")),\" option.\"))),Object(l.b)(\"h2\",{id:\"how-it-works\"},\"How It Works\"),Object(l.b)(\"h3\",{id:\"complex-processing\"},\"Complex Processing\"),Object(l.b)(\"p\",null,\"If you encounter limitations with the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#merge\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"merge\")),\"\\ntransform then we recommend using a \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://vector.dev/components/?functions%5B%5D=program\"}),\"runtime transform\"),\".\\nThese transforms are designed for complex processing and give you the power of\\nfull programming runtime.\"),Object(l.b)(\"h3\",{id:\"environment-variables\"},\"Environment Variables\"),Object(l.b)(\"p\",null,\"Environment variables are supported through all of Vector's configuration.\\nSimply add \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"${MY_ENV_VAR}\"),\" in your Vector configuration file and the variable\\nwill be replaced before being evaluated.\"),Object(l.b)(\"p\",null,\"You can learn more in the\\n\",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/setup/configuration/#environment-variables\"}),\"Environment Variables\"),\" section.\"),Object(l.b)(\"h3\",{id:\"field-notation-syntax\"},\"Field Notation Syntax\"),Object(l.b)(\"p\",null,\"The \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#merge_fields\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"merge_fields\")),\", \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#partial_event_marker_field\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"partial_event_marker_field\")),\", and \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#stream_discriminant_fields\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"stream_discriminant_fields\")),\" options\\nsupport \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/field-path-notation/\"}),\"Vector's field notation syntax\"),\",\\nenabling access to root-level, nested, and array field values. For example:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_merge_transform_id]\\n  # ...\\n  merge_fields = [\"message\"]\\n  merge_fields = [\"message\", \"parent.child\"]\\n  # ...\\n')),Object(l.b)(\"p\",null,\"You can learn more about Vector's field notation in the\\n\",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/field-path-notation/\"}),\"field notation reference\"),\".\"),Object(l.b)(\"h3\",{id:\"when-to-use-this-transform\"},\"When to use this transform\"),Object(l.b)(\"p\",null,\"Where possible, Vector will handle event merging at the source level. For\\nexample, the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/sources/file/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"file\")),\" contains a \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"message_start_indicator\"),\"\\noption and the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/sources/file/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"docker\")),\" contains an \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"auto_partial_merge\"),\"\\noption. Both of these options should be used instead of this transform.\\nUnfortunately, merging logs is not always this straight forward. It is\\nprecisely these edge cases that this transform hopes to solve.\"),Object(l.b)(\"p\",null,\"If you're using this transform for a common use case, please consider\\n\",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://github.com/timberio/vector/issues/new?labels=type%3A+new+feature\"}),\"opening an issue\"),\" to let us know.\"))}b.isMDXComponent=!0},309:function(e,t,a){\"use strict\";a(12);var n=a(0),r=a.n(n),l=a(318),i=a(317),s=a(316),o=a.n(s);t.a=function({children:e,filters:t}){const[a,s]=Object(n.useState)(!1),[c,m]=Object(n.useState)(new Set),[u,d]=Object(n.useState)(!1),[p,b]=Object(n.useState)(null);let g=[];e&&(g=Array.isArray(e)?e:[e]);let f=g.some(e=>e.props.common),h=o()(g).flatMap(e=>e.props.groups).uniq().value(),v=g.some(e=>e.props.required),j=g;return a&&(j=j.filter(e=>e.props.common)),c.size>0&&(j=j.filter(e=>Array.from(c).every(t=>e.props.groups.includes(t)))),u&&(j=j.filter(e=>e.props.required)),p&&(j=j.filter(e=>e.props.name.toLowerCase().includes(p.toLowerCase()))),r.a.createElement(r.a.Fragment,null,g.length>1&&!1!==t?r.a.createElement(\"div\",{className:\"filters\"},r.a.createElement(\"div\",{className:\"search\"},r.a.createElement(\"span\",{className:\"search--result-count\"},j.length,\" items\"),r.a.createElement(\"input\",{className:\"input--text input--lg\",type:\"text\",onChange:e=>b(e.currentTarget.value),placeholder:\"\\ud83d\\udd0d Search...\"})),r.a.createElement(\"div\",{className:\"filter\"},r.a.createElement(\"div\",{className:\"filter--choices\"},r.a.createElement(l.a,{values:h,currentState:c,setState:m}),f&&r.a.createElement(\"label\",{title:\"Only show popular/common results\"},r.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>s(e.currentTarget.checked),checked:a}),\"common\"),v&&r.a.createElement(\"label\",{title:\"Only show required results\"},r.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>d(e.currentTarget.checked),checked:u}),\"required\")))):null,!Array.isArray(j)||j.length>0?r.a.createElement(\"ul\",{className:\"connected-list\"},j):r.a.createElement(i.a,{text:\"no components found\"}))}},310:function(e,t,a){\"use strict\";a(12);var n=a(0),r=a.n(n),l=a(306),i=a.n(l),s=(a(307),a(315));function o(e){return e.includes(\".\")?'\"'+e+'\"':e}function c(e){return\"string\"==typeof e&&e.includes(\"\\n\")?`\"\"\"\\n${e}\\n\"\"\"`:JSON.stringify(e)}function m(e,t){return(a=t)&&a.constructor===Object?\"name\"in t&&\"value\"in t?`${o(t.name)} = ${c(t.value)}`:`${o(Object.keys(t)[0])} = ${c(Object.values(t)[0])}`:e?`${o(e)} = ${c(t)}`:c(t);var a}function u({values:e}){let t=[];if(Array.isArray(e))for(var a in e){let n=e[a];t.push(r.a.createElement(\"code\",{key:n},c(n))),t.push(\" \")}else for(var n in e)t.push(r.a.createElement(\"code\",{key:n,className:\"with-info-icon\",title:e[n]},c(n))),t.push(\" \");return t}function d({name:e,path:t,values:a}){let n=\"\";return a.forEach((function(a){t&&(n+=t+\".\"),n+=m(e,a)+\"\\n\"})),r.a.createElement(\"div\",null,r.a.createElement(s.a,{className:\"language-toml\"},n))}function p({unit:e,value:t}){let a=\"\";return e&&(a=r.a.createElement(r.a.Fragment,null,\" (\",e,\")\")),r.a.createElement(r.a.Fragment,null,r.a.createElement(\"code\",null,c(t)),a)}function b({value:e}){let t=Object.keys(e)[0],a=Object.values(e)[0];return\"\"==a&&(a=null),r.a.createElement(\"span\",null,r.a.createElement(\"code\",null,r.a.createElement(\"a\",{href:\"#\"+t},t)),\" \",\"= \",r.a.createElement(\"code\",null,c(a)))}function g({defaultValue:e,enumValues:t,examples:a,groups:l,name:i,path:s,relevantWhen:o,required:c,unit:m,warnings:g}){const[f,h]=Object(n.useState)(!1);return r.a.createElement(\"ul\",{className:\"info\"},g&&g.length>0&&g.map((e,t)=>r.a.createElement(\"li\",{key:t,className:\"warning\"},r.a.createElement(\"i\",{className:\"feather icon-alert-triangle\"}),\" WARNING:\",\" \",e.text)),o&&r.a.createElement(\"li\",null,\"Only \",c?\"required\":\"relevant\",\" when:\",\" \",r.a.createElement(b,{value:o})),void 0!==e?null!==e?r.a.createElement(\"li\",null,\"Default: \",r.a.createElement(p,{unit:m,value:e})):r.a.createElement(\"li\",null,\"No default\"):null,t&&r.a.createElement(\"li\",null,\"Enum, must be one of: \",r.a.createElement(u,{values:t})),(a.length>1||a[0]!=e)&&r.a.createElement(\"li\",null,r.a.createElement(\"div\",{className:\"show-more\",onClick:()=>h(!f)},f?\"Hide examples\":\"View examples\"),f&&r.a.createElement(d,{name:i,path:s,values:a})))}t.a=function({children:e,common:t,defaultValue:a,enumValues:l,examples:s,groups:o,name:c,path:m,relevantWhen:u,required:d,templateable:p,type:b,unit:f,warnings:h}){const[v,j]=Object(n.useState)(!1);let O=e;return v&&(O=O.filter(e=>\"p\"!=e.props.originalType)),r.a.createElement(\"li\",{className:i()({\"field-required\":d,\"field-collapsed\":v}),required:d},r.a.createElement(\"div\",{className:\"badges\"},p&&r.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This option is dynamic and accepts the Vector template syntax\"},\"templateable\"),b&&r.a.createElement(\"span\",{className:\"badge badge--secondary\"},b,f&&r.a.createElement(r.a.Fragment,null,\" (\",f,\")\")),l&&Object.keys(l).length>0&&r.a.createElement(\"span\",{className:\"badge badge--secondary with-info-icon\",title:\"This option is an enumation and only allows specific values\"},\"enum\"),t&&r.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This is a popular that we recommend for getting started\"},\"common\"),d?r.a.createElement(\"span\",{className:\"badge badge--danger\"},\"required\",u&&\"*\"):r.a.createElement(\"span\",{className:\"badge badge--secondary\"},\"optional\")),O,!v&&\"table\"!=b&&r.a.createElement(g,{defaultValue:a,enumValues:l,examples:s,groups:o,name:c,path:m,relevantWhen:u,required:d,unit:f,warnings:h}))}}}]);","extractedComments":[]}
{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{216:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"frontMatter\",(function(){return m})),n.d(t,\"metadata\",(function(){return d})),n.d(t,\"rightToc\",(function(){return u})),n.d(t,\"default\",(function(){return h}));var a=n(1),i=n(6),l=(n(0),n(307)),s=n(309),r=n(310),o=n(312),c=n(311),m={last_modified_on:\"2020-07-13\",component_title:\"Filter\",description:\"The Vector `filter` transform accepts and outputs `log` and `metric` events, allowing you to select events based on a set of logical conditions.\",event_types:[\"log\",\"metric\"],function_category:\"filter\",issues_url:\"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+filter%22\",operating_systems:[\"Linux\",\"MacOS\",\"Windows\"],sidebar_label:'filter|[\"log\",\"metric\"]',source_url:\"https://github.com/timberio/vector/tree/master/src/transforms/filter.rs\",status:\"beta\",title:\"Filter Transform\",unsupported_operating_systems:[]},d={id:\"reference/transforms/filter\",title:\"Filter Transform\",description:\"The Vector `filter` transform accepts and outputs `log` and `metric` events, allowing you to select events based on a set of logical conditions.\",source:\"@site/docs/reference/transforms/filter.md\",permalink:\"/docs/reference/transforms/filter\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/reference/transforms/filter.md\",sidebar_label:'filter|[\"log\",\"metric\"]'},u=[{value:\"Configuration\",id:\"configuration\",children:[{value:\"condition\",id:\"condition\",children:[]}]},{value:\"Examples\",id:\"examples\",children:[]},{value:\"How It Works\",id:\"how-it-works\",children:[{value:\"Complex Processing\",id:\"complex-processing\",children:[]},{value:\"Environment Variables\",id:\"environment-variables\",children:[]}]}],p={rightToc:u};function h(e){var t=e.components,n=Object(i.a)(e,[\"components\"]);return Object(l.b)(\"wrapper\",Object(a.a)({},p,n,{components:t,mdxType:\"MDXLayout\"}),Object(l.b)(\"p\",null,\"The Vector \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"filter\"),\" transform\\naccepts and outputs \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"log\")),\" and\\n\",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/metric/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"metric\")),\" events, allowing you to select events based\\non a set of logical conditions.\"),Object(l.b)(\"h2\",{id:\"configuration\"},\"Configuration\"),Object(l.b)(o.a,{block:!0,defaultValue:\"common\",values:[{label:\"Common\",value:\"common\"},{label:\"Advanced\",value:\"advanced\"}],mdxType:\"Tabs\"},Object(l.b)(c.a,{value:\"common\",mdxType:\"TabItem\"},Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  # General\\n  type = \"filter\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n\\n  # Condition\\n  condition.type = \"check_fields\" # optional, default\\n  condition.\"message.eq\" = \"this is the content to match against\" # example\\n  condition.\"message.eq\" = [\"match this\", \"or this\"] # example\\n  condition.\"message.contains\" = \"foo\" # example\\n  condition.\"message.contains\" = [\"foo\", \"bar\"] # example\\n  condition.\"environment.ends_with\" = \"-staging\" # example\\n  condition.\"environment.ends_with\" = [\"-staging\", \"-running\"] # example\\n  condition.\"message.regex\" = \" (any|of|these|five|words) \" # example\\n  condition.\"environment.starts_with\" = \"staging-\" # example\\n  condition.\"environment.starts_with\" = [\"staging-\", \"running-\"] # example\\n'))),Object(l.b)(c.a,{value:\"advanced\",mdxType:\"TabItem\"},Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  # General\\n  type = \"filter\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n\\n  # Condition\\n  condition.type = \"check_fields\" # optional, default\\n  condition.\"message.eq\" = \"this is the content to match against\" # example\\n  condition.\"message.eq\" = [\"match this\", \"or this\"] # example\\n  condition.\"host.exists\" = true # example\\n  condition.\"method.neq\" = \"POST\" # example\\n  condition.\"method.neq\" = [\"POST\", \"GET\"] # example\\n  condition.\"message.not_contains\" = \"some phrase to ignore\" # example\\n  condition.\"unit.not_starts_with\" = \"sys-\" # example\\n  condition.\"unit.not_ends_with\" = \".device\" # example\\n  condition.\"message.contains\" = \"foo\" # example\\n  condition.\"message.contains\" = [\"foo\", \"bar\"] # example\\n  condition.\"environment.ends_with\" = \"-staging\" # example\\n  condition.\"environment.ends_with\" = [\"-staging\", \"-running\"] # example\\n  condition.\"message.ip_cidr_contains\" = \"10.0.0.0/8\" # example\\n  condition.\"message.ip_cidr_contains\" = [\"2000::/10\", \"192.168.0.0/16\"] # example\\n  condition.\"message.regex\" = \" (any|of|these|five|words) \" # example\\n  condition.\"environment.starts_with\" = \"staging-\" # example\\n  condition.\"environment.starts_with\" = [\"staging-\", \"running-\"] # example\\n')))),Object(l.b)(s.a,{filters:!0,mdxType:\"Fields\"},Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:\"condition\",path:null,relevantWhen:null,required:!0,templateable:!1,type:\"table\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"condition\"},\"condition\"),Object(l.b)(\"p\",null,\"The set of logical conditions to be matched against every input event. Only\\nmessages that pass all conditions will be forwarded.\"),Object(l.b)(s.a,{filters:!1,mdxType:\"Fields\"},Object(l.b)(r.a,{common:!0,defaultValue:\"check_fields\",enumValues:{check_fields:\"Allows you to check individual fields against a list of conditions.\",is_log:\"Returns true if the event is a log.\",is_metric:\"Returns true if the event is a metric.\"},examples:[\"check_fields\",\"is_log\",\"is_metric\"],groups:[],name:\"type\",path:\"condition\",relevantWhen:null,required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"type\"},\"type\"),Object(l.b)(\"p\",null,\"The type of the condition to execute.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"message.eq\":\"this is the content to match against\"},{\"message.eq\":[\"match this\",\"or this\"]}],groups:[],name:\"`[field-name]`.eq\",path:\"condition\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field-nameeq\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field-name]\"),\".eq\"),Object(l.b)(\"p\",null,\"Check whether a fields contents exactly matches the value specified. This may\\nbe a single string or a list of strings, in which case this evaluates to true\\nif any of the list matches.\")),Object(l.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{\"host.exists\":!0}],groups:[],name:\"`[field-name]`.exists\",path:\"condition\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"bool\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field-nameexists\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field-name]\"),\".exists\"),Object(l.b)(\"p\",null,\"Check whether a field exists or does not exist, depending on the provided value\\nbeing \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"true\"),\" or \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"false\"),\" respectively.\")),Object(l.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{\"method.neq\":\"POST\"},{\"method.neq\":[\"POST\",\"GET\"]}],groups:[],name:\"`[field-name]`.neq\",path:\"condition\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field-nameneq\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field-name]\"),\".neq\"),Object(l.b)(\"p\",null,\"Check whether a fields contents does not match the value specified. This may be\\na single string or a list of strings, in which case this evaluates to false if\\nany of the list matches.\")),Object(l.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{\"message.not_contains\":\"some phrase to ignore\"},{\"unit.not_starts_with\":\"sys-\"},{\"unit.not_ends_with\":\".device\"}],groups:[],name:\"`[field-name]`.not_`[condition]`\",path:\"condition\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"any\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field-namenot_condition\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field-name]\"),\".not_\",Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[condition]\")),Object(l.b)(\"p\",null,\"Check if the given \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"[condition]\"),\" does not match.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"message.contains\":\"foo\"},{\"message.contains\":[\"foo\",\"bar\"]}],groups:[],name:\"`[field_name]`.contains\",path:\"condition\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field_namecontains\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field_name]\"),\".contains\"),Object(l.b)(\"p\",null,\"Checks whether a string field contains a string argument. This may be a single\\nstring or a list of strings, in which case this evaluates to true if any of the\\nlist matches.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"environment.ends_with\":\"-staging\"},{\"environment.ends_with\":[\"-staging\",\"-running\"]}],groups:[],name:\"`[field_name]`.ends_with\",path:\"condition\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field_nameends_with\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field_name]\"),\".ends_with\"),Object(l.b)(\"p\",null,\"Checks whether a string field ends with a string argument. This may be a single\\nstring or a list of strings, in which case this evaluates to true if any of the\\nlist matches.\")),Object(l.b)(r.a,{common:!1,defaultValue:null,enumValues:null,examples:[{\"message.ip_cidr_contains\":\"10.0.0.0/8\"},{\"message.ip_cidr_contains\":[\"2000::/10\",\"192.168.0.0/16\"]}],groups:[],name:\"`[field_name]`.ip_cidr_contains\",path:\"condition\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field_nameip_cidr_contains\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field_name]\"),\".ip_cidr_contains\"),Object(l.b)(\"p\",null,\"Checks whether an IP field is contained within a given \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\"}),\"IP CIDR\"),\"\\n(works with IPv4 and IPv6). This may be a single string or a list of strings,\\nin which case this evaluates to true if the IP field is contained within any of\\nthe CIDRs in the list.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"message.regex\":\" (any|of|these|five|words) \"}],groups:[],name:\"`[field_name]`.regex\",path:\"condition\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field_nameregex\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field_name]\"),\".regex\"),Object(l.b)(\"p\",null,\"Checks whether a string field matches a \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/Regular_expression\"}),\"regular expression\"),\".\\nVector uses the \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://docs.rs/regex/1.3.6/regex/#syntax\"}),\"documented Rust Regex syntax\"),\". Note\\nthat this condition is considerably more expensive than a regular string match\\n(such as \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"starts_with\"),\" or \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"contains\"),\") so the use of those conditions are\\npreferred where possible.\")),Object(l.b)(r.a,{common:!0,defaultValue:null,enumValues:null,examples:[{\"environment.starts_with\":\"staging-\"},{\"environment.starts_with\":[\"staging-\",\"running-\"]}],groups:[],name:\"`[field_name]`.starts_with\",path:\"condition\",relevantWhen:{type:\"check_fields\"},required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field_namestarts_with\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field_name]\"),\".starts_with\"),Object(l.b)(\"p\",null,\"Checks whether a string field starts with a string argument. This may be a\\nsingle string or a list of strings, in which case this evaluates to true if any\\nof the list matches.\"))))),Object(l.b)(\"h2\",{id:\"examples\"},\"Examples\"),Object(l.b)(\"p\",null,\"The \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"filter\"),\" transform is a simple conditional match, forwarding only those messages that pass all the conditions.\\nIn this example, we drop all events that do not come from the host \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"gerry\"),\":\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.from_gerry]\\n  inputs = [ \"somewhere\" ]\\n  type = \"filter\"\\n\\n  [transforms.from_gerry.condition]\\n    \"host.eq\" = \"gerry\"\\n\\n[sinks.only_gerry]\\n  inputs = [ \"from_gerry\" ]\\n  type = \"something\"\\n')),Object(l.b)(\"p\",null,\"Any event that does not match all of the conditions in the filter will be dropped by the transform.\"),Object(l.b)(\"h2\",{id:\"how-it-works\"},\"How It Works\"),Object(l.b)(\"h3\",{id:\"complex-processing\"},\"Complex Processing\"),Object(l.b)(\"p\",null,\"If you encounter limitations with the \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"filter\"),\"\\ntransform then we recommend using a \",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://vector.dev/components/?functions%5B%5D=program\"}),\"runtime transform\"),\".\\nThese transforms are designed for complex processing and give you the power of\\nfull programming runtime.\"),Object(l.b)(\"h3\",{id:\"environment-variables\"},\"Environment Variables\"),Object(l.b)(\"p\",null,\"Environment variables are supported through all of Vector's configuration.\\nSimply add \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"${MY_ENV_VAR}\"),\" in your Vector configuration file and the variable\\nwill be replaced before being evaluated.\"),Object(l.b)(\"p\",null,\"You can learn more in the\\n\",Object(l.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/setup/configuration/#environment-variables\"}),\"Environment Variables\"),\" section.\"))}h.isMDXComponent=!0},309:function(e,t,n){\"use strict\";n(12);var a=n(0),i=n.n(a),l=n(318),s=n(317),r=n(316),o=n.n(r);t.a=function({children:e,filters:t}){const[n,r]=Object(a.useState)(!1),[c,m]=Object(a.useState)(new Set),[d,u]=Object(a.useState)(!1),[p,h]=Object(a.useState)(null);let b=[];e&&(b=Array.isArray(e)?e:[e]);let g=b.some(e=>e.props.common),f=o()(b).flatMap(e=>e.props.groups).uniq().value(),v=b.some(e=>e.props.required),y=b;return n&&(y=y.filter(e=>e.props.common)),c.size>0&&(y=y.filter(e=>Array.from(c).every(t=>e.props.groups.includes(t)))),d&&(y=y.filter(e=>e.props.required)),p&&(y=y.filter(e=>e.props.name.toLowerCase().includes(p.toLowerCase()))),i.a.createElement(i.a.Fragment,null,b.length>1&&!1!==t?i.a.createElement(\"div\",{className:\"filters\"},i.a.createElement(\"div\",{className:\"search\"},i.a.createElement(\"span\",{className:\"search--result-count\"},y.length,\" items\"),i.a.createElement(\"input\",{className:\"input--text input--lg\",type:\"text\",onChange:e=>h(e.currentTarget.value),placeholder:\"\\ud83d\\udd0d Search...\"})),i.a.createElement(\"div\",{className:\"filter\"},i.a.createElement(\"div\",{className:\"filter--choices\"},i.a.createElement(l.a,{values:f,currentState:c,setState:m}),g&&i.a.createElement(\"label\",{title:\"Only show popular/common results\"},i.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>r(e.currentTarget.checked),checked:n}),\"common\"),v&&i.a.createElement(\"label\",{title:\"Only show required results\"},i.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>u(e.currentTarget.checked),checked:d}),\"required\")))):null,!Array.isArray(y)||y.length>0?i.a.createElement(\"ul\",{className:\"connected-list\"},y):i.a.createElement(s.a,{text:\"no components found\"}))}},310:function(e,t,n){\"use strict\";n(12);var a=n(0),i=n.n(a),l=n(306),s=n.n(l),r=(n(307),n(315));function o(e){return e.includes(\".\")?'\"'+e+'\"':e}function c(e){return\"string\"==typeof e&&e.includes(\"\\n\")?`\"\"\"\\n${e}\\n\"\"\"`:JSON.stringify(e)}function m(e,t){return(n=t)&&n.constructor===Object?\"name\"in t&&\"value\"in t?`${o(t.name)} = ${c(t.value)}`:`${o(Object.keys(t)[0])} = ${c(Object.values(t)[0])}`:e?`${o(e)} = ${c(t)}`:c(t);var n}function d({values:e}){let t=[];if(Array.isArray(e))for(var n in e){let a=e[n];t.push(i.a.createElement(\"code\",{key:a},c(a))),t.push(\" \")}else for(var a in e)t.push(i.a.createElement(\"code\",{key:a,className:\"with-info-icon\",title:e[a]},c(a))),t.push(\" \");return t}function u({name:e,path:t,values:n}){let a=\"\";return n.forEach((function(n){t&&(a+=t+\".\"),a+=m(e,n)+\"\\n\"})),i.a.createElement(\"div\",null,i.a.createElement(r.a,{className:\"language-toml\"},a))}function p({unit:e,value:t}){let n=\"\";return e&&(n=i.a.createElement(i.a.Fragment,null,\" (\",e,\")\")),i.a.createElement(i.a.Fragment,null,i.a.createElement(\"code\",null,c(t)),n)}function h({value:e}){let t=Object.keys(e)[0],n=Object.values(e)[0];return\"\"==n&&(n=null),i.a.createElement(\"span\",null,i.a.createElement(\"code\",null,i.a.createElement(\"a\",{href:\"#\"+t},t)),\" \",\"= \",i.a.createElement(\"code\",null,c(n)))}function b({defaultValue:e,enumValues:t,examples:n,groups:l,name:s,path:r,relevantWhen:o,required:c,unit:m,warnings:b}){const[g,f]=Object(a.useState)(!1);return i.a.createElement(\"ul\",{className:\"info\"},b&&b.length>0&&b.map((e,t)=>i.a.createElement(\"li\",{key:t,className:\"warning\"},i.a.createElement(\"i\",{className:\"feather icon-alert-triangle\"}),\" WARNING:\",\" \",e.text)),o&&i.a.createElement(\"li\",null,\"Only \",c?\"required\":\"relevant\",\" when:\",\" \",i.a.createElement(h,{value:o})),void 0!==e?null!==e?i.a.createElement(\"li\",null,\"Default: \",i.a.createElement(p,{unit:m,value:e})):i.a.createElement(\"li\",null,\"No default\"):null,t&&i.a.createElement(\"li\",null,\"Enum, must be one of: \",i.a.createElement(d,{values:t})),(n.length>1||n[0]!=e)&&i.a.createElement(\"li\",null,i.a.createElement(\"div\",{className:\"show-more\",onClick:()=>f(!g)},g?\"Hide examples\":\"View examples\"),g&&i.a.createElement(u,{name:s,path:r,values:n})))}t.a=function({children:e,common:t,defaultValue:n,enumValues:l,examples:r,groups:o,name:c,path:m,relevantWhen:d,required:u,templateable:p,type:h,unit:g,warnings:f}){const[v,y]=Object(a.useState)(!1);let O=e;return v&&(O=O.filter(e=>\"p\"!=e.props.originalType)),i.a.createElement(\"li\",{className:s()({\"field-required\":u,\"field-collapsed\":v}),required:u},i.a.createElement(\"div\",{className:\"badges\"},p&&i.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This option is dynamic and accepts the Vector template syntax\"},\"templateable\"),h&&i.a.createElement(\"span\",{className:\"badge badge--secondary\"},h,g&&i.a.createElement(i.a.Fragment,null,\" (\",g,\")\")),l&&Object.keys(l).length>0&&i.a.createElement(\"span\",{className:\"badge badge--secondary with-info-icon\",title:\"This option is an enumation and only allows specific values\"},\"enum\"),t&&i.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This is a popular that we recommend for getting started\"},\"common\"),u?i.a.createElement(\"span\",{className:\"badge badge--danger\"},\"required\",d&&\"*\"):i.a.createElement(\"span\",{className:\"badge badge--secondary\"},\"optional\")),O,!v&&\"table\"!=h&&i.a.createElement(b,{defaultValue:n,enumValues:l,examples:r,groups:o,name:c,path:m,relevantWhen:d,required:u,unit:g,warnings:f}))}}}]);","extractedComments":[]}
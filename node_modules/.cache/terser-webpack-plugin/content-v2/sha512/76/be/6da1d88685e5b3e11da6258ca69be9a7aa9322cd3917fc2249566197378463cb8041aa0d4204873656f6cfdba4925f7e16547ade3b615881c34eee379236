{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{231:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"frontMatter\",(function(){return l})),t.d(n,\"metadata\",(function(){return s})),t.d(n,\"rightToc\",(function(){return d})),t.d(n,\"default\",(function(){return u}));var a,o=t(1),r=t(6),i=(t(0),t(251)),c=t(271),l={title:\"Deployment\",description:\"The fundamental Muta concepts. A great place to start learning about Muta.\"},s={id:\"docs_zh/setup/deploy\",title:\"Deployment\",description:\"The fundamental Muta concepts. A great place to start learning about Muta.\",source:\"@site/docs/docs_zh/setup/deploy.md\",permalink:\"/new-docs/docs/docs_zh/setup/deploy\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/docs_zh/setup/deploy.md\",sidebar:\"docs_zh\",previous:{title:\"Node Configuration\",permalink:\"/new-docs/docs/docs_zh/setup/node-config\"},next:{title:\"Development Overview\",permalink:\"/new-docs/docs/docs_zh/dev/dev-overview\"}},d=[{value:\"Overview\",id:\"overview\",children:[]},{value:\"Generate key-pairs\",id:\"generate-key-pairs\",children:[{value:\"Install Muta-keypair\",id:\"install-muta-keypair\",children:[]},{value:\"Generate Key-pairs\",id:\"generate-key-pairs-1\",children:[]}]},{value:\"Create the Genesis Block\",id:\"create-the-genesis-block\",children:[]},{value:\"Config node parameters\",id:\"config-node-parameters\",children:[{value:\"Alice configures her node\",id:\"alice-configures-her-node\",children:[]},{value:\"Others&#39; configuration\",id:\"others-configuration\",children:[]}]},{value:\"Run this network\",id:\"run-this-network\",children:[{value:\"Alice Starts her node  first.\",id:\"alice-starts-her-node--first\",children:[]},{value:\"Bob, Ben and Bill Join\",id:\"bob-ben-and-bill-join\",children:[]}]},{value:\"Next Step\",id:\"next-step\",children:[]}],b=(a=\"Alert\",function(e){return console.warn(\"Component \"+a+\" was not imported, exported, or provided by MDXProvider as global scope\"),Object(i.b)(\"div\",e)}),p={rightToc:d};function u(e){var n=e.components,t=Object(r.a)(e,[\"components\"]);return Object(i.b)(\"wrapper\",Object(o.a)({},p,t,{components:n,mdxType:\"MDXLayout\"}),Object(i.b)(\"p\",null,\"In this tutorial we will learn and practice how to start a blockchain network with a validator set of your choosing using Muta. In this case, we will build a four validators' blockchain running on a single server with a single Muta binary , but the process generalizes to more nodes and more complex deploy environment in a straight-forward manner.\"),Object(i.b)(\"h2\",{id:\"overview\"},\"Overview\"),Object(i.b)(\"p\",null,Object(i.b)(\"strong\",{parentName:\"p\"},\"This tutorial assumes that you already have Muta compiled on your computer from when you completed the \",Object(i.b)(\"a\",Object(o.a)({parentName:\"strong\"},{href:\"../getting-started.md\"}),\"Create Your First Muta Chain Tutorial\"),\".\"),\" If you do not, please install and compile Muta framework first.\"),Object(i.b)(\"p\",null,\"In this case, we will build a blockchain network with four validators (Alice, Bob, Bill and Ben). And Alice will be the bootstrap node. The tutorial is divided into several sections:\"),Object(i.b)(\"ul\",null,Object(i.b)(\"li\",{parentName:\"ul\"},\"Firstly, each participant should generate their own key-pairs.\"),Object(i.b)(\"li\",{parentName:\"ul\"},\"And then, create the genesis block and config the node.\"),Object(i.b)(\"li\",{parentName:\"ul\"},\"With custom chain spec distributed to all participants, we will run the bootstraps node firstly, and then start the other node to connect to bootstraps node.\")),Object(i.b)(c.a,{headingDepth:3,mdxType:\"Steps\"},Object(i.b)(\"ol\",null,Object(i.b)(\"li\",null,Object(i.b)(\"h2\",{id:\"generate-key-pairs\"},\"Generate key-pairs\"),Object(i.b)(\"h3\",{id:\"install-muta-keypair\"},\"Install Muta-keypair\"),Object(i.b)(\"p\",null,\"Muta-keypair is a tool the generates keys specifically designed to be used with Muta. Install it by following command:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),\"cargo +nightly install --git https://github.com/nervosnetwork/muta.git --bin muta-keypair\\n\")),Object(i.b)(\"p\",null,\"Run the help command\\uff0cthen you can see the operation guide:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),\"$ muta-keypair -h\\nmuta_keypair 0.1\\nMuta Dev <muta@nervos.org>\\na tool to generate keypairs for muta\\n\\nUSAGE:\\n    muta-keypair [OPTIONS]\\n\\nFLAGS:\\n    -h, --help       Prints help information\\n    -V, --version    Prints version information\\n\\nOPTIONS:\\n    -c, --common_ref <common_ref>           common_ref for bls signature, it will be randomly generated if not passed\\n                                            [default: ]\\n    -n, --number <number>                   Number of keypairs to generate [default: 4]\\n    -p, --private_keys <private_keys>...    Generate keypairs from a given private key vector\\n\")),Object(i.b)(\"div\",{className:\"admonition admonition-note alert alert--secondary\"},Object(i.b)(\"div\",Object(o.a)({parentName:\"div\"},{className:\"admonition-heading\"}),Object(i.b)(\"h5\",{parentName:\"div\"},Object(i.b)(\"span\",Object(o.a)({parentName:\"h5\"},{className:\"admonition-icon\"}),Object(i.b)(\"svg\",Object(o.a)({parentName:\"span\"},{xmlns:\"http://www.w3.org/2000/svg\",width:\"14\",height:\"16\",viewBox:\"0 0 14 16\"}),Object(i.b)(\"path\",Object(o.a)({parentName:\"svg\"},{fillRule:\"evenodd\",d:\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"})))),\"note\")),Object(i.b)(\"div\",Object(o.a)({parentName:\"div\"},{className:\"admonition-content\"}),Object(i.b)(\"p\",{parentName:\"div\"},Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"common_ref\"),\" is a required parameter used when generating BLS signature. And all the validators in a same network should share a common \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"common_ref\"),\". So, in here, one option is to let \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"bootstraps node\"),\" generating \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"common_ref\"),\" first, and then distribute it to the other node. Another option for validators is to consult together to come up with a string used as \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"common_ref\"),\" after hex encoding. \"))),Object(i.b)(\"p\",null,\"In this case, bootstraps node will generate a \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"common_ref\"),\" randomly, and then pass it to the other node.\"),Object(i.b)(\"h3\",{id:\"generate-key-pairs-1\"},\"Generate Key-pairs\"),Object(i.b)(\"p\",null,\"Alice (bootstraps node) generates her key-pairs:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),'$ muta-keypair -n 1\\n{\\n  \"common_ref\": \"0x7446645045376b553041\",\\n  \"keypairs\": [\\n    {\\n      \"index\": 1,\\n      \"private_key\": \"0x5b2041e3f47aaf2d44407d3bdf415a4f55bf377352448c4217393f5c34fe270d\",\\n      \"public_key\": \"0x0299b6d1ad1961cf7a99b581d103a9f977531f77d67e994bfcd9a7fd82ad230a49\",\\n      \"address\": \"0x991ce94e75332da2160363d78b73955738d7a3bc\",\\n      \"bls_public_key\": \"0x04076b9ee33b9ef2c5f6f7bf8507dd2e17c65f8b67bee2ca874dde747ef69d7f18ec927de1adca930da61b071d6075ea10172342d0fb50b977b919ab0e4e8306261002b1ed27990b9d6dded5583b91d8801615baee901ed09a2333fc57770d84c8\"\\n    }\\n  ]\\n}\\n')),Object(i.b)(\"p\",null,\"After Alice passes the \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"common_ref\"),\" to Bob, Bill and Ben, they generates his own key-pairs:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),'$ muta-keypair -n 3 -c 75695962523835457669\\n{\\n  \"common_ref\": \"0x75695962523835457669\",\\n  \"keypairs\": [\\n    {\\n      \"index\": 1,\\n      \"private_key\": \"0x28f53779b60e261ba68cdccefcc6a152136df8cb794e067ec76dc5a02c8f2ccf\",\\n      \"public_key\": \"0x0299b6d1ad1961cf7a99b581d103a9f977531f77d67e994bfcd9a7fd82ad230a49\",\\n      \"address\": \"0x78ef0eff2fb9f569d86d75d22b69ea8407f6f092\",\\n      \"bls_public_key\": \"0x0413584a15f1dec552bb12233bf73a886ed49a3f56c68eda080743577005417635c9ac72a528a961a0e14a2df3a50a5c660641f446f629788486d7935d4ad4918035ce884a98bbaaa4c96307a2428729cba694329a693ce60c02e13b039c6a8978\"\\n    },\\n    {\\n      \"index\": 2,\\n      \"private_key\": \"0x8b41630934fc7df92a016af88aae477bd173118fb72113f31db8a950230b029f\",\\n      \"public_key\": \"0x030a1cd0213b86976c9e14c1aa8d0167a50c8a5c929f72fcbeaae35d84afa1c2b7\",\\n      \"address\": \"0xa55e1261a73116c755291140e427caa0cbb5309e\",\\n      \"bls_public_key\": \"0x040e7b00b59d37d4d735041ea1b69a55cd7fd80e920b5d70d85d051af6b847c3aec5b412b128f85ad8b4c6bac0561105a80fa8dd5f60cd42c3a2da0fd0b946fa3d761b1d21c569e0958b847da22dec14a132121027006df8c5d4ccf7caf8535f70\"\\n    },\\n    {\\n      \"index\": 3,\\n      \"private_key\": \"0x8e065679aa8b1185406c7514343073cd8c1695218925c9b2d5e98c3483d71d81\",\\n      \"public_key\": \"0x027c805020b226a050c317c68d50cb7b0a7d682b5614e23a61c5c08a722c2d44aa\",\\n      \"address\": \"0x103252cad4e0380fe57a0c73f549f1ee2c9ea8e8\",\\n      \"bls_public_key\": \"0x041611b7da94a7fb7a8ff1c802bbf61da689f8d6f974d99466adeb1f47bcaff70470b6f279763abeb0cec5565abcfcb4ce13e79b8c310f0d1b26605b61ac2c04e0efcedbae18e763a86adb7a0e8ed0fcb1dc11fded12583972403815a7aa3dc300\"\\n    }\\n  ]\\n}\\n')),Object(i.b)(\"p\",null,\"From the output we can see, each participant not only has their own keys generated\\uff0cbut also possessed their \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"bls_public_key\"),\". Reocord all of these information carellful, we will use it in following steps.\")),Object(i.b)(\"li\",null,Object(i.b)(\"h2\",{id:\"create-the-genesis-block\"},\"Create the Genesis Block\"),Object(i.b)(\"p\",null,\"Now that each participant has their own keys generated, in this part, we will create the genesis block for this chain.\"),Object(i.b)(\"p\",null,\"Alice find \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"devtool/chain/genesis.toml\"),\" which contains all the info of genesis block, but it's still filled with default configuration. \"),Object(i.b)(\"p\",null,\"Pay attention to following three fields:\"),Object(i.b)(\"ul\",null,Object(i.b)(\"li\",{parentName:\"ul\"},Object(i.b)(\"strong\",{parentName:\"li\"},\"The portion of this file Alice needs to pay attention is the \",Object(i.b)(\"inlineCode\",{parentName:\"strong\"},\"verifier_list\"),\", in which all the origin validators's info need to be filled.\"),\" \"),Object(i.b)(\"li\",{parentName:\"ul\"},\"Since Overlord consensus protocol supports weghted votes, in here, we can also set \",Object(i.b)(\"inlineCode\",{parentName:\"li\"},\"propose_weight\"),\" and \",Object(i.b)(\"inlineCode\",{parentName:\"li\"},\"propose_weight\"),\". \"),Object(i.b)(\"li\",{parentName:\"ul\"},\"And don't forget to modify \",Object(i.b)(\"inlineCode\",{parentName:\"li\"},\"common_ref\"),\".\")),Object(i.b)(b,{type:\"info\",mdxType:\"Alert\"},Object(i.b)(\"p\",null,\"More info of the other parameters in \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"genesis.toml\"),\" can be explored in \",\"[configuration guide][config]\",\". \")),Object(i.b)(\"p\",null,\"After knowing that, Alice adds the other nodes' info into \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"verifier_list\"),\" , give each validator a weight of 1, modify \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"common_ref\"),\" and keep the other fields unchanged. Then the \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"genesis.toml\"),\" looks like this:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),'timestamp = 0\\nprevhash = \"0x44915be5b6c20b0678cf05fcddbbaa832e25d7e6ac538784cd5c24de00d47472\"\\n\\n[[services]]\\nname = \"asset\"\\npayload = \\'\\'\\'\\n{\\n    \"id\": \"0xf56924db538e77bb5951eb5ff0d02b88983c49c45eea30e8ae3e7234b311436c\",\\n    \"name\": \"MutaToken\",\\n    \"symbol\": \"MT\",\\n    \"supply\": 320000011,\\n    \"issuer\": \"0xf8389d774afdad8755ef8e629e5a154fddc6325a\"\\n}\\n\\'\\'\\'\\n\\n[[services]]\\nname = \"metadata\"\\npayload = \\'\\'\\'\\n{\\n    \"chain_id\": \"0xb6a4d7da21443f5e816e8700eea87610e6d769657d6b8ec73028457bf2ca4036\",\\n    \"common_ref\": \"0x7446645045376b553041\",\\n    \"timeout_gap\": 20,\\n    \"cycles_limit\": 999999999999,\\n    \"cycles_price\": 1,\\n    \"interval\": 3000,\\n    \"verifier_list\": [\\n        {\\n            \"bls_pub_key\": \"0x040386a8ac1cce6fd90c31effa628bc8513cbd625c752ca76ade6ff37b97edbdfb97d94caeddd261d9e2fd6b5456aecc100ea730ddee3c94f040a54152ded330a4e409f39bfbc34b286536790fef8bbaf734431679ba6a8d5d6994e557e82306df\",\\n            \"address\": \"0x12d8baf8c4efb32a7983efac2d8535fe57deb756\",\\n            \"propose_weight\": 1,\\n            \"vote_weight\": 1\\n        },\\n        {\\n            \"bls_pub_key\": \"0x040e7b00b59d37d4d735041ea1b69a55cd7fd80e920b5d70d85d051af6b847c3aec5b412b128f85ad8b4c6bac0561105a80fa8dd5f60cd42c3a2da0fd0b946fa3d761b1d21c569e0958b847da22dec14a132121027006df8c5d4ccf7caf8535f70\",\\n            \"address\": \"0xa55e1261a73116c755291140e427caa0cbb5309e\",\\n            \"propose_weight\": 1,\\n            \"vote_weight\": 1\\n        },\\n        {\\n            \"bls_pub_key\": \"0x0413584a15f1dec552bb12233bf73a886ed49a3f56c68eda080743577005417635c9ac72a528a961a0e14a2df3a50a5c660641f446f629788486d7935d4ad4918035ce884a98bbaaa4c96307a2428729cba694329a693ce60c02e13b039c6a8978\",\\n            \"address\": \"0x78ef0eff2fb9f569d86d75d22b69ea8407f6f092\",\\n            \"propose_weight\": 1,\\n            \"vote_weight\": 1\\n        },\\n        {\\n            \"bls_pub_key\": \"0x041611b7da94a7fb7a8ff1c802bbf61da689f8d6f974d99466adeb1f47bcaff70470b6f279763abeb0cec5565abcfcb4ce13e79b8c310f0d1b26605b61ac2c04e0efcedbae18e763a86adb7a0e8ed0fcb1dc11fded12583972403815a7aa3dc300\",\\n            \"address\": \"0x103252cad4e0380fe57a0c73f549f1ee2c9ea8e8\",\\n            \"propose_weight\": 1,\\n            \"vote_weight\": 1\\n        }\\n    ],\\n    \"propose_ratio\": 15,\\n    \"prevote_ratio\": 10,\\n    \"precommit_ratio\": 10,\\n    \"brake_ratio\": 7,\\n    \"tx_num_limit\": 20000,\\n    \"max_tx_size\": 1024\\n}\\n\\'\\'\\'\\n')),Object(i.b)(\"p\",null,\"Finally Alice shares the \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"genesis.toml\"),\" with all the other validators in the network. In this case, since these four nodes will run in the same binanry, we can just keep one \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"genesis.toml\"),\" file under \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"devtool/chain\"),\" directory.\"),Object(i.b)(\"div\",{className:\"admonition admonition-note alert alert--secondary\"},Object(i.b)(\"div\",Object(o.a)({parentName:\"div\"},{className:\"admonition-heading\"}),Object(i.b)(\"h5\",{parentName:\"div\"},Object(i.b)(\"span\",Object(o.a)({parentName:\"h5\"},{className:\"admonition-icon\"}),Object(i.b)(\"svg\",Object(o.a)({parentName:\"span\"},{xmlns:\"http://www.w3.org/2000/svg\",width:\"14\",height:\"16\",viewBox:\"0 0 14 16\"}),Object(i.b)(\"path\",Object(o.a)({parentName:\"svg\"},{fillRule:\"evenodd\",d:\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"})))),\"note\")),Object(i.b)(\"div\",Object(o.a)({parentName:\"div\"},{className:\"admonition-content\"}),Object(i.b)(\"p\",{parentName:\"div\"},\"In production environment, it's highly recommended that bootstraps node create the genesis block first and shared the resulting \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"genesis.toml\"),\" file with the other validators. Because it's quite easy to get a slightly different genesis block which will break consensus if each participant generates the file themselves.\")))),Object(i.b)(\"li\",null,Object(i.b)(\"h2\",{id:\"config-node-parameters\"},\"Config node parameters\"),Object(i.b)(\"p\",null,\"After creating the genesis block, Each validators need to config the node. Node configuration parameters can be found in \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"devtool/chain/config.toml\"),\".\"),Object(i.b)(\"p\",null,Object(i.b)(\"strong\",{parentName:\"p\"},\"The fields of this file we need to pay more attention are:\"),\" \"),Object(i.b)(\"ul\",null,Object(i.b)(\"li\",{parentName:\"ul\"},Object(i.b)(\"inlineCode\",{parentName:\"li\"},\"privkey\"),\": private key of this node\"),Object(i.b)(\"li\",{parentName:\"ul\"},\"Under \",Object(i.b)(\"inlineCode\",{parentName:\"li\"},\"[network]\"),\", \",Object(i.b)(\"inlineCode\",{parentName:\"li\"},'listening_address = \"0.0.0.0:1337\"'),\" specifies the address that your node will listen.\"),Object(i.b)(\"li\",{parentName:\"ul\"},Object(i.b)(\"inlineCode\",{parentName:\"li\"},\"[[network.bootstraps]]\"),\", specifies the information of bootstraps node that your node will connect, including the public key and listening address. Bootstrap node can leave this filed empty.\")),Object(i.b)(\"h3\",{id:\"alice-configures-her-node\"},\"Alice configures her node\"),Object(i.b)(\"p\",null,\"After adding required infomation and leaving \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"[[network.bootstraps]]\"),\" empty  , \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"config.toml\"),\" in Alice's node looks like:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),'data_path = \"./devtools/chain/data/1\"\\nprivkey = \"0x592d6f62cd5c3464d4956ea585ec7007bcf5217eb89cc50bf14eea95f3b09706\"\\n\\n[network]\\nlistening_address = \"0.0.0.0:1337\"\\nrpc_timeout = 10\\n\\n[graphql]\\ngraphiql_uri = \"/graphiql\"\\nlistening_address = \"0.0.0.0:8000\"\\ngraphql_uri = \"/graphql\"\\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\\nmaxconn = 25000\\nmax_payload_size = 1048576\\n\\n[mempool]\\npool_size = 20000\\nbroadcast_txs_size = 200\\nbroadcast_txs_interval = 200\\n\\n[executor]\\nlight = false\\n\\n[logger]\\nfilter = \"info\"\\nlog_to_console = true\\nconsole_show_file_and_line = false\\nlog_path = \"logs/\"\\nlog_to_file = true\\nmetrics = true\\n# you can specify log level for modules with config below\\n# modules_level = { \"overlord::state::process\" = \"debug\", core_consensus = \"error\" }\\n\\n')),Object(i.b)(\"h3\",{id:\"others-configuration\"},\"Others' configuration\"),Object(i.b)(\"p\",null,Object(i.b)(\"strong\",{parentName:\"p\"},\"For Bob:\")),Object(i.b)(\"p\",null,\"Bob adds his private key, specifies his \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"[network]\"),\" and got Alice's infomation to fill into \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"[[network.bootstraps]]\"),\".\\n( In this case, we also modifies \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"lisening_adress\"),\" under \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"[graphql]\"),\", since these four nodes are on the same server).\"),Object(i.b)(\"p\",null,\"Then the \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"config.toml\"),\" in Bob's node looks like:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),'data_path = \"./devtools/chain/data/2\"\\nprivkey = \"0x8b41630934fc7df92a016af88aae477bd173118fb72113f31db8a950230b029f\"\\n\\n[network]\\nlistening_address = \"0.0.0.0:1338\"\\nrpc_timeout = 10\\n\\n[[network.bootstraps]]\\npubkey = \"0x02fa3a27712962a70e3e474363f38661f6a9e56f9cc91efd0d343713d51f3fa355\"\\naddress = \"localhost:1337\" # Replace it with your IP\\n\\n[graphql]\\ngraphiql_uri = \"/graphiql\"\\nlistening_address = \"0.0.0.0:8001\"\\ngraphql_uri = \"/graphql\"\\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\\nmaxconn = 25000\\nmax_payload_size = 1048576\\n\\n[mempool]\\npool_size = 20000\\nbroadcast_txs_size = 200\\nbroadcast_txs_interval = 200\\n\\n[executor]\\nlight = false\\n\\n[logger]\\nfilter = \"info\"\\nlog_to_console = true\\nconsole_show_file_and_line = false\\nlog_path = \"logs/\"\\nlog_to_file = true\\nmetrics = true\\n# you can specify log level for modules with config below\\n# modules_level = { \"overlord::state::process\" = \"debug\", core_consensus = \"error\" }\\n')),Object(i.b)(\"p\",null,Object(i.b)(\"strong\",{parentName:\"p\"},\"For Ben:\")),Object(i.b)(\"details\",null,Object(i.b)(\"summary\",null,\"(click here to view)\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),'data_path = \"./devtools/chain/data/2\"\\nprivkey = \"0x8b41630934fc7df92a016af88aae477bd173118fb72113f31db8a950230b029f\"\\n\\n[network]\\nlistening_address = \"0.0.0.0:1339\"\\nrpc_timeout = 10\\n\\n[[network.bootstraps]]\\npubkey = \"0x02fa3a27712962a70e3e474363f38661f6a9e56f9cc91efd0d343713d51f3fa355\"\\naddress = \"localhost:1337\" # Replace it with your IP\\n\\n[graphql]\\ngraphiql_uri = \"/graphiql\"\\nlistening_address = \"0.0.0.0:8002\"\\ngraphql_uri = \"/graphql\"\\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\\nmaxconn = 25000\\nmax_payload_size = 1048576\\n\\n[mempool]\\npool_size = 20000\\nbroadcast_txs_size = 200\\nbroadcast_txs_interval = 200\\n\\n[executor]\\nlight = false\\n\\n[logger]\\nfilter = \"info\"\\nlog_to_console = true\\nconsole_show_file_and_line = false\\nlog_path = \"logs/\"\\nlog_to_file = true\\nmetrics = true\\n# you can specify log level for modules with config below\\n# modules_level = { \"overlord::state::process\" = \"debug\", core_consensus = \"error\" }\\n'))),Object(i.b)(\"p\",null,Object(i.b)(\"strong\",{parentName:\"p\"},\"For Bill:\")),Object(i.b)(\"details\",null,Object(i.b)(\"summary\",null,\"(click here to view)\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),'data_path = \"./devtools/chain/data/2\"\\nprivkey = \"0x8e065679aa8b1185406c7514343073cd8c1695218925c9b2d5e98c3483d71d81\"\\n\\n[network]\\nlistening_address = \"0.0.0.0:1340\"\\nrpc_timeout = 10\\n\\n[[network.bootstraps]]\\npubkey = \"0x02fa3a27712962a70e3e474363f38661f6a9e56f9cc91efd0d343713d51f3fa355\"\\naddress = \"localhost:1337\" # Replace it with your IP\\n\\n[graphql]\\ngraphiql_uri = \"/graphiql\"\\nlistening_address = \"0.0.0.0:8003\"\\ngraphql_uri = \"/graphql\"\\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\\nmaxconn = 25000\\nmax_payload_size = 1048576\\n\\n[mempool]\\npool_size = 20000\\nbroadcast_txs_size = 200\\nbroadcast_txs_interval = 200\\n\\n[executor]\\nlight = false\\n\\n[logger]\\nfilter = \"info\"\\nlog_to_console = true\\nconsole_show_file_and_line = false\\nlog_path = \"logs/\"\\nlog_to_file = true\\nmetrics = true\\n# you can specify log level for modules with config below\\n# modules_level = { \"overlord::state::process\" = \"debug\", core_consensus = \"error\" }\\n'))),Object(i.b)(\"p\",null,\"In these case , we name the generated file \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"config-alice.toml\"),\", \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"config-bob.toml\"),\", \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"config-ben.toml\"),\", \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"config-bill.toml\"),\" under \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"devtools/chain\"),\".\")),Object(i.b)(\"li\",null,Object(i.b)(\"h2\",{id:\"run-this-network\"},\"Run this network\"),Object(i.b)(\"p\",null,\"You've completed all the necessary prep work and you're now ready to launch your chain. We can see these files in our folder:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),\"- devtools\\n  - chain\\n    - config-alice.toml\\n    - config-bob.toml\\n    - config-ben.toml\\n    - config-bill.toml\\n    - genesis.toml\\n\")),Object(i.b)(\"h3\",{id:\"alice-starts-her-node--first\"},\"Alice Starts her node  first.\"),Object(i.b)(\"p\",null,\"Alice, as the bootstrap node, starts her node firstly by running following command\\uff1a\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),\"CONFIG=./devtools/chain/config-alice.toml GENESIS=./devtools/chain/genesis.toml cargo run --example muta-chain --release\\n\")),Object(i.b)(\"h3\",{id:\"bob-ben-and-bill-join\"},\"Bob, Ben and Bill Join\"),Object(i.b)(\"p\",null,\"For Bob, run the following command:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),\"CONFIG=./devtools/chain/config-bob.toml GENESIS=./devtools/chain/genesis.toml cargo run --example muta-chain --release\\n\")),Object(i.b)(\"p\",null,\"For Ben, run the following command:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),\"CONFIG=./devtools/chain/config-ben.toml GENESIS=./devtools/chain/genesis.toml cargo run --example muta-chain --release\\n\")),Object(i.b)(\"p\",null,\"For Bill, run the following command:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(o.a)({parentName:\"pre\"},{}),\"CONFIG=./devtools/chain/config-bill.toml GENESIS=./devtools/chain/genesis.toml cargo run --example muta-chain --release\\n\")),Object(i.b)(\"p\",null,\"You should see the console outputs something as follows:\"),Object(i.b)(\"p\",null,Object(i.b)(\"img\",Object(o.a)({parentName:\"p\"},{src:\"/static/docs-img/private-network.png\",alt:null}))),Object(i.b)(\"p\",null,\"Congratulations! You've started your own blockchain!\")))),Object(i.b)(\"h2\",{id:\"next-step\"},\"Next Step\"),Object(i.b)(\"p\",null,\"In this tutorial you've learned to generate your own keypairs, create a genesis block, config your node, and start a multi-node network based on your custom configuration.\"),Object(i.b)(\"p\",null,\"Your next step may be:\"))}u.isMDXComponent=!0},251:function(e,n,t){\"use strict\";t.d(n,\"a\",(function(){return b})),t.d(n,\"b\",(function(){return f}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),d=function(e){var n=o.a.useContext(s),t=n;return e&&(t=\"function\"==typeof e?e(n):c({},n,{},e)),t},b=function(e){var n=d(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:\"code\",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),b=d(t),u=a,f=b[\"\".concat(i,\".\").concat(u)]||b[u]||p[u]||r;return t?o.a.createElement(f,c({ref:n},s,{components:t})):o.a.createElement(f,c({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if(\"string\"==typeof e||a){var r=t.length,i=new Array(r);i[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType=\"string\"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}u.displayName=\"MDXCreateElement\"},252:function(e,n,t){var a;!function(){\"use strict\";var t={}.hasOwnProperty;function o(){for(var e=[],n=0;n<arguments.length;n++){var a=arguments[n];if(a){var r=typeof a;if(\"string\"===r||\"number\"===r)e.push(a);else if(Array.isArray(a)&&a.length){var i=o.apply(null,a);i&&e.push(i)}else if(\"object\"===r)for(var c in a)t.call(a,c)&&a[c]&&e.push(c)}}return e.join(\" \")}e.exports?(o.default=o,e.exports=o):void 0===(a=function(){return o}.apply(n,[]))||(e.exports=a)}()},255:function(e,n,t){\"use strict\";var a=t(263),o=t(36);function r(e,n){return n.encode?n.strict?a(e):encodeURIComponent(e):e}n.extract=function(e){return e.split(\"?\")[1]||\"\"},n.parse=function(e,n){var t=function(e){var n;switch(e.arrayFormat){case\"index\":return function(e,t,a){n=/\\[(\\d*)\\]$/.exec(e),e=e.replace(/\\[\\d*\\]$/,\"\"),n?(void 0===a[e]&&(a[e]={}),a[e][n[1]]=t):a[e]=t};case\"bracket\":return function(e,t,a){n=/(\\[\\])$/.exec(e),e=e.replace(/\\[\\]$/,\"\"),n?void 0!==a[e]?a[e]=[].concat(a[e],t):a[e]=[t]:a[e]=t};default:return function(e,n,t){void 0!==t[e]?t[e]=[].concat(t[e],n):t[e]=n}}}(n=o({arrayFormat:\"none\"},n)),a=Object.create(null);return\"string\"!=typeof e?a:(e=e.trim().replace(/^(\\?|#|&)/,\"\"))?(e.split(\"&\").forEach((function(e){var n=e.replace(/\\+/g,\" \").split(\"=\"),o=n.shift(),r=n.length>0?n.join(\"=\"):void 0;r=void 0===r?null:decodeURIComponent(r),t(decodeURIComponent(o),r,a)})),Object.keys(a).sort().reduce((function(e,n){var t=a[n];return Boolean(t)&&\"object\"==typeof t&&!Array.isArray(t)?e[n]=function e(n){return Array.isArray(n)?n.sort():\"object\"==typeof n?e(Object.keys(n)).sort((function(e,n){return Number(e)-Number(n)})).map((function(e){return n[e]})):n}(t):e[n]=t,e}),Object.create(null))):a},n.stringify=function(e,n){var t=function(e){switch(e.arrayFormat){case\"index\":return function(n,t,a){return null===t?[r(n,e),\"[\",a,\"]\"].join(\"\"):[r(n,e),\"[\",r(a,e),\"]=\",r(t,e)].join(\"\")};case\"bracket\":return function(n,t){return null===t?r(n,e):[r(n,e),\"[]=\",r(t,e)].join(\"\")};default:return function(n,t){return null===t?r(n,e):[r(n,e),\"=\",r(t,e)].join(\"\")}}}(n=o({encode:!0,strict:!0,arrayFormat:\"none\"},n));return e?Object.keys(e).sort().map((function(a){var o=e[a];if(void 0===o)return\"\";if(null===o)return r(a,n);if(Array.isArray(o)){var i=[];return o.slice().forEach((function(e){void 0!==e&&i.push(t(a,e,i.length))})),i.join(\"&\")}return r(a,n)+\"=\"+r(o,n)})).filter((function(e){return e.length>0})).join(\"&\"):\"\"}},263:function(e,n,t){\"use strict\";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return\"%\"+e.charCodeAt(0).toString(16).toUpperCase()}))}},271:function(e,n,t){\"use strict\";var a=t(0),o=t.n(a),r=(t(252),t(255)),i=t.n(r);t(99);n.a=function({children:e,headingDepth:n}){let t=\"undefined\"!=typeof window?window.location:null,r={title:`Tutorial on ${t} failed`,body:`The tutorial on:\\n\\n${t}\\n\\nHere's what went wrong:\\n\\n\\x3c!-- Insert command output and details. Thank you for reporting! :) --\\x3e`},c=\"https://github.com/nervosnetwork/muta-docs/issues/new?\"+i.a.stringify(r);const[l,s]=Object(a.useState)(null);return o.a.createElement(\"div\",{className:\"steps steps--h\"+n},e,!l&&o.a.createElement(\"div\",{className:\"steps--feedback\"},\"How was it? Did this tutorial work?\\xa0\\xa0\",o.a.createElement(\"span\",{className:\"button button--sm button--primary\",onClick:()=>s(\"yes\")},\"Yes\"),\"\\xa0\\xa0\",o.a.createElement(\"a\",{href:c,target:\"_blank\",className:\"button button--sm button--primary\"},\"No\")),\"yes\"==l&&o.a.createElement(\"div\",{className:\"steps--feedback steps--feedback--success\"},\"Thanks! If you're enjoying Muta please consider \",o.a.createElement(\"a\",{href:\"https://github.com/nervosnetwork/muta/\",target:\"_blank\"},\"starring our Github repo\"),\".\"))}}}]);","extractedComments":["/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/"]}
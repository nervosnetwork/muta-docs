{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{172:function(e,t,a){\"use strict\";a.r(t),a.d(t,\"frontMatter\",(function(){return p})),a.d(t,\"metadata\",(function(){return d})),a.d(t,\"rightToc\",(function(){return u})),a.d(t,\"default\",(function(){return b}));var n=a(1),l=a(6),r=(a(0),a(307)),i=a(309),o=a(310),s=a(312),c=a(311),p={last_modified_on:\"2020-07-13\",component_title:\"JSON Parser\",description:\"The Vector `json_parser` transform accepts and outputs `log` events, allowing you to parse a log field value as JSON.\",event_types:[\"log\"],function_category:\"parse\",issues_url:\"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+json_parser%22\",operating_systems:[\"Linux\",\"MacOS\",\"Windows\"],sidebar_label:'json_parser|[\"log\"]',source_url:\"https://github.com/timberio/vector/tree/master/src/transforms/json_parser.rs\",status:\"prod-ready\",title:\"JSON Parser Transform\",unsupported_operating_systems:[]},d={id:\"reference/transforms/json_parser\",title:\"JSON Parser Transform\",description:\"The Vector `json_parser` transform accepts and outputs `log` events, allowing you to parse a log field value as JSON.\",source:\"@site/docs/reference/transforms/json_parser.md\",permalink:\"/docs/reference/transforms/json_parser\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/reference/transforms/json_parser.md\",sidebar_label:'json_parser|[\"log\"]'},u=[{value:\"Configuration\",id:\"configuration\",children:[{value:\"drop_field\",id:\"drop_field\",children:[]},{value:\"drop_invalid\",id:\"drop_invalid\",children:[]},{value:\"field\",id:\"field\",children:[]},{value:\"overwrite_target\",id:\"overwrite_target\",children:[]},{value:\"target_field\",id:\"target_field\",children:[]}]},{value:\"Examples\",id:\"examples\",children:[]},{value:\"How It Works\",id:\"how-it-works\",children:[{value:\"Chaining / Unwrapping\",id:\"chaining--unwrapping\",children:[]},{value:\"Complex Processing\",id:\"complex-processing\",children:[]},{value:\"Environment Variables\",id:\"environment-variables\",children:[]},{value:\"Field Notation Syntax\",id:\"field-notation-syntax\",children:[]},{value:\"Invalid JSON\",id:\"invalid-json\",children:[]},{value:\"Merge Conflicts\",id:\"merge-conflicts\",children:[]}]}],m={rightToc:u};function b(e){var t=e.components,a=Object(l.a)(e,[\"components\"]);return Object(r.b)(\"wrapper\",Object(n.a)({},m,a,{components:t,mdxType:\"MDXLayout\"}),Object(r.b)(\"p\",null,\"The Vector \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"json_parser\"),\" transform\\naccepts and outputs \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"log\")),\" events, allowing you to parse\\na log field value as JSON.\"),Object(r.b)(\"h2\",{id:\"configuration\"},\"Configuration\"),Object(r.b)(s.a,{block:!0,defaultValue:\"common\",values:[{label:\"Common\",value:\"common\"},{label:\"Advanced\",value:\"advanced\"}],mdxType:\"Tabs\"},Object(r.b)(c.a,{value:\"common\",mdxType:\"TabItem\"},Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  type = \"json_parser\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n  drop_field = true # optional, default\\n  drop_invalid = true # required\\n  field = \"message\" # optional, default\\n'))),Object(r.b)(c.a,{value:\"advanced\",mdxType:\"TabItem\"},Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  type = \"json_parser\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n  drop_field = true # optional, default\\n  drop_invalid = true # required\\n  field = \"message\" # optional, default\\n  overwrite_target = false # optional, default\\n  target_field = \"root_field\" # optional, no default\\n')))),Object(r.b)(i.a,{filters:!0,mdxType:\"Fields\"},Object(r.b)(o.a,{common:!0,defaultValue:!0,enumValues:null,examples:[!0,!1],groups:[],name:\"drop_field\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"bool\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h3\",{id:\"drop_field\"},\"drop_field\"),Object(r.b)(\"p\",null,\"If the specified \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\" should be dropped (removed) after parsing. If parsing\\nfails, the field will not be removed, irrespective of this setting.\")),Object(r.b)(o.a,{common:!0,defaultValue:null,enumValues:null,examples:[!0],groups:[],name:\"drop_invalid\",path:null,relevantWhen:null,required:!0,templateable:!1,type:\"bool\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h3\",{id:\"drop_invalid\"},\"drop_invalid\"),Object(r.b)(\"p\",null,\"If \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"true\"),\" events with invalid JSON will be dropped, otherwise the event will be\\nkept and passed through.\\nSee \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#invalid-json\"}),\"Invalid JSON\"),\" for more info.\")),Object(r.b)(o.a,{common:!0,defaultValue:\"message\",enumValues:null,examples:[\"message\",\"parent.child\",\"array[0]\"],groups:[],name:\"field\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h3\",{id:\"field\"},\"field\"),Object(r.b)(\"p\",null,\"The log field to decode as JSON. Must be a \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"string\"),\" value type.\\nSee \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field-notation-syntax\"}),\"Field Notation Syntax\"),\" and \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#invalid-json\"}),\"Invalid JSON\"),\" for more info.\")),Object(r.b)(o.a,{common:!1,defaultValue:!1,enumValues:null,examples:[!1,!0],groups:[],name:\"overwrite_target\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"bool\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h3\",{id:\"overwrite_target\"},\"overwrite_target\"),Object(r.b)(\"p\",null,\"If \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#target_field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"target_field\")),\" is set and the log contains a field of the same name as the\\ntarget, it will only be overwritten if this is set to \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"true\"),\".\")),Object(r.b)(o.a,{common:!1,defaultValue:null,enumValues:null,examples:[\"root_field\",\"parent.child\"],groups:[],name:\"target_field\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h3\",{id:\"target_field\"},\"target_field\"),Object(r.b)(\"p\",null,\"If this setting is present, the parsed JSON will be inserted into the log as a\\nsub-object with this name. If a field with the same name already exists, the\\nparser will fail and produce an error.\\nSee \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field-notation-syntax\"}),\"Field Notation Syntax\"),\" for more info.\"))),Object(r.b)(\"h2\",{id:\"examples\"},\"Examples\"),Object(r.b)(s.a,{block:!0,defaultValue:\"simple\",select:!1,values:[{label:\"Simple\",value:\"simple\"},{label:\"Wrapped\",value:\"wrapped\"}],mdxType:\"Tabs\"},Object(r.b)(c.a,{value:\"simple\",mdxType:\"TabItem\"},Object(r.b)(\"p\",null,\"Given the following log event:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"message\": \"{\"key\": \"value\"}\"\\n}\\n')),Object(r.b)(\"p\",null,\"You can parse the JSON with:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\"}),'[transforms.json]\\n  inputs = [\"<source_id>\"]\\n  type   = \"json_parser\"\\n  field  = \"message\"\\n')),Object(r.b)(\"p\",null,\"This would produce the following event as output:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"key\": \"value\"\\n}\\n')),Object(r.b)(\"p\",null,\"By default, Vector drops fields after parsing them via the \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#drop_field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"drop_field\")),\"\\noption.\")),Object(r.b)(c.a,{value:\"wrapped\",mdxType:\"TabItem\"},Object(r.b)(\"p\",null,\"It is possible to chain \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"json_parser\"),' transforms to effectively \"unwrap\"\\nnested JSON documents. For example, give this log event:'),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"message\": \"{\"parent\": \"{\"child\": \"value2\"}\"}\"\\n}\\n')),Object(r.b)(\"p\",null,\"You could unwrap the JSON with the following transforms:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\"}),'[transforms.root_json]\\n  inputs = [\"<source_id>\"]\\n  type   = \"json_parser\"\\n  field  = \"message\"\\n\\n[transforms.parent_json]\\n  inputs = [\"root_json\"]\\n  type   = \"json_parser\"\\n  field  = \"parent\"\\n\\n[transforms.child_json]\\n  inputs = [\"parent_json\"]\\n  type   = \"json_parser\"\\n  field  = \"child\"\\n')),Object(r.b)(\"p\",null,\"This would produce the following event as output:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"child\": \"value2\"\\n}\\n')),Object(r.b)(\"p\",null,\"By default, Vector drops fields after parsing them via the \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#drop_field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"drop_field\")),\"\\noption.\"))),Object(r.b)(\"h2\",{id:\"how-it-works\"},\"How It Works\"),Object(r.b)(\"h3\",{id:\"chaining--unwrapping\"},\"Chaining / Unwrapping\"),Object(r.b)(\"p\",null,\"Please see the \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#examples\"}),\"Examples section\"),\".\"),Object(r.b)(\"h3\",{id:\"complex-processing\"},\"Complex Processing\"),Object(r.b)(\"p\",null,\"If you encounter limitations with the \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"json_parser\"),\"\\ntransform then we recommend using a \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://vector.dev/components/?functions%5B%5D=program\"}),\"runtime transform\"),\".\\nThese transforms are designed for complex processing and give you the power of\\nfull programming runtime.\"),Object(r.b)(\"h3\",{id:\"environment-variables\"},\"Environment Variables\"),Object(r.b)(\"p\",null,\"Environment variables are supported through all of Vector's configuration.\\nSimply add \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"${MY_ENV_VAR}\"),\" in your Vector configuration file and the variable\\nwill be replaced before being evaluated.\"),Object(r.b)(\"p\",null,\"You can learn more in the\\n\",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/setup/configuration/#environment-variables\"}),\"Environment Variables\"),\" section.\"),Object(r.b)(\"h3\",{id:\"field-notation-syntax\"},\"Field Notation Syntax\"),Object(r.b)(\"p\",null,\"The \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\" and \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#target_field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"target_field\")),\" options\\nsupport \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/field-path-notation/\"}),\"Vector's field notation syntax\"),\",\\nenabling access to root-level, nested, and array field values. For example:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_json_parser_transform_id]\\n  # ...\\n  field = \"message\"\\n  field = \"parent.child\"\\n  field = \"array[0]\"\\n  # ...\\n')),Object(r.b)(\"p\",null,\"You can learn more about Vector's field notation in the\\n\",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/field-path-notation/\"}),\"field notation reference\"),\".\"),Object(r.b)(\"h3\",{id:\"invalid-json\"},\"Invalid JSON\"),Object(r.b)(\"p\",null,\"If the value for the specified \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\" is not valid JSON you can control keep\\nor discard the event with the \",Object(r.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#drop_invalid\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"drop_invalid\")),\" option. Setting it to \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"true\"),\" will\\ndiscard the event and drop it entirely. Setting it to \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"false\"),\" will keep the\\nevent and pass it through. Note that passing through the event could cause\\nproblems and violate assumptions about the structure of your event.\"),Object(r.b)(\"h3\",{id:\"merge-conflicts\"},\"Merge Conflicts\"),Object(r.b)(\"h4\",{id:\"key-conflicts\"},\"Key conflicts\"),Object(r.b)(\"p\",null,\"Any key present in the decoded JSON will override existin keys in the event.\"),Object(r.b)(\"h4\",{id:\"object-conflicts\"},\"Object conflicts\"),Object(r.b)(\"p\",null,\"If the decoded JSON includes nested fields it will be \",Object(r.b)(\"em\",{parentName:\"p\"},\"deep\"),\" merged into the\\nevent. For example, given the following event:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"message\": \"{\\\\\"parent\\\\\": {\\\\\"child2\\\\\": \\\\\"value2\\\\\"}}\",\\n  \"parent\": {\\n    \"child1\": \"value1\"\\n  }\\n}\\n')),Object(r.b)(\"p\",null,\"Parsing the \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},'\"message\"'),\" field would result the following structure:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\"}),'{\\n  \"parent\": {\\n    \"child1\": \"value1\",\\n    \"child2\": \"value2\"\\n  }\\n}\\n')),Object(r.b)(\"p\",null,\"Notice that the \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"parent.child1\"),\" key was preserved.\"))}b.isMDXComponent=!0},309:function(e,t,a){\"use strict\";a(12);var n=a(0),l=a.n(n),r=a(318),i=a(317),o=a(316),s=a.n(o);t.a=function({children:e,filters:t}){const[a,o]=Object(n.useState)(!1),[c,p]=Object(n.useState)(new Set),[d,u]=Object(n.useState)(!1),[m,b]=Object(n.useState)(null);let f=[];e&&(f=Array.isArray(e)?e:[e]);let h=f.some(e=>e.props.common),j=s()(f).flatMap(e=>e.props.groups).uniq().value(),g=f.some(e=>e.props.required),O=f;return a&&(O=O.filter(e=>e.props.common)),c.size>0&&(O=O.filter(e=>Array.from(c).every(t=>e.props.groups.includes(t)))),d&&(O=O.filter(e=>e.props.required)),m&&(O=O.filter(e=>e.props.name.toLowerCase().includes(m.toLowerCase()))),l.a.createElement(l.a.Fragment,null,f.length>1&&!1!==t?l.a.createElement(\"div\",{className:\"filters\"},l.a.createElement(\"div\",{className:\"search\"},l.a.createElement(\"span\",{className:\"search--result-count\"},O.length,\" items\"),l.a.createElement(\"input\",{className:\"input--text input--lg\",type:\"text\",onChange:e=>b(e.currentTarget.value),placeholder:\"\\ud83d\\udd0d Search...\"})),l.a.createElement(\"div\",{className:\"filter\"},l.a.createElement(\"div\",{className:\"filter--choices\"},l.a.createElement(r.a,{values:j,currentState:c,setState:p}),h&&l.a.createElement(\"label\",{title:\"Only show popular/common results\"},l.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>o(e.currentTarget.checked),checked:a}),\"common\"),g&&l.a.createElement(\"label\",{title:\"Only show required results\"},l.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>u(e.currentTarget.checked),checked:d}),\"required\")))):null,!Array.isArray(O)||O.length>0?l.a.createElement(\"ul\",{className:\"connected-list\"},O):l.a.createElement(i.a,{text:\"no components found\"}))}},310:function(e,t,a){\"use strict\";a(12);var n=a(0),l=a.n(n),r=a(306),i=a.n(r),o=(a(307),a(315));function s(e){return e.includes(\".\")?'\"'+e+'\"':e}function c(e){return\"string\"==typeof e&&e.includes(\"\\n\")?`\"\"\"\\n${e}\\n\"\"\"`:JSON.stringify(e)}function p(e,t){return(a=t)&&a.constructor===Object?\"name\"in t&&\"value\"in t?`${s(t.name)} = ${c(t.value)}`:`${s(Object.keys(t)[0])} = ${c(Object.values(t)[0])}`:e?`${s(e)} = ${c(t)}`:c(t);var a}function d({values:e}){let t=[];if(Array.isArray(e))for(var a in e){let n=e[a];t.push(l.a.createElement(\"code\",{key:n},c(n))),t.push(\" \")}else for(var n in e)t.push(l.a.createElement(\"code\",{key:n,className:\"with-info-icon\",title:e[n]},c(n))),t.push(\" \");return t}function u({name:e,path:t,values:a}){let n=\"\";return a.forEach((function(a){t&&(n+=t+\".\"),n+=p(e,a)+\"\\n\"})),l.a.createElement(\"div\",null,l.a.createElement(o.a,{className:\"language-toml\"},n))}function m({unit:e,value:t}){let a=\"\";return e&&(a=l.a.createElement(l.a.Fragment,null,\" (\",e,\")\")),l.a.createElement(l.a.Fragment,null,l.a.createElement(\"code\",null,c(t)),a)}function b({value:e}){let t=Object.keys(e)[0],a=Object.values(e)[0];return\"\"==a&&(a=null),l.a.createElement(\"span\",null,l.a.createElement(\"code\",null,l.a.createElement(\"a\",{href:\"#\"+t},t)),\" \",\"= \",l.a.createElement(\"code\",null,c(a)))}function f({defaultValue:e,enumValues:t,examples:a,groups:r,name:i,path:o,relevantWhen:s,required:c,unit:p,warnings:f}){const[h,j]=Object(n.useState)(!1);return l.a.createElement(\"ul\",{className:\"info\"},f&&f.length>0&&f.map((e,t)=>l.a.createElement(\"li\",{key:t,className:\"warning\"},l.a.createElement(\"i\",{className:\"feather icon-alert-triangle\"}),\" WARNING:\",\" \",e.text)),s&&l.a.createElement(\"li\",null,\"Only \",c?\"required\":\"relevant\",\" when:\",\" \",l.a.createElement(b,{value:s})),void 0!==e?null!==e?l.a.createElement(\"li\",null,\"Default: \",l.a.createElement(m,{unit:p,value:e})):l.a.createElement(\"li\",null,\"No default\"):null,t&&l.a.createElement(\"li\",null,\"Enum, must be one of: \",l.a.createElement(d,{values:t})),(a.length>1||a[0]!=e)&&l.a.createElement(\"li\",null,l.a.createElement(\"div\",{className:\"show-more\",onClick:()=>j(!h)},h?\"Hide examples\":\"View examples\"),h&&l.a.createElement(u,{name:i,path:o,values:a})))}t.a=function({children:e,common:t,defaultValue:a,enumValues:r,examples:o,groups:s,name:c,path:p,relevantWhen:d,required:u,templateable:m,type:b,unit:h,warnings:j}){const[g,O]=Object(n.useState)(!1);let v=e;return g&&(v=v.filter(e=>\"p\"!=e.props.originalType)),l.a.createElement(\"li\",{className:i()({\"field-required\":u,\"field-collapsed\":g}),required:u},l.a.createElement(\"div\",{className:\"badges\"},m&&l.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This option is dynamic and accepts the Vector template syntax\"},\"templateable\"),b&&l.a.createElement(\"span\",{className:\"badge badge--secondary\"},b,h&&l.a.createElement(l.a.Fragment,null,\" (\",h,\")\")),r&&Object.keys(r).length>0&&l.a.createElement(\"span\",{className:\"badge badge--secondary with-info-icon\",title:\"This option is an enumation and only allows specific values\"},\"enum\"),t&&l.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This is a popular that we recommend for getting started\"},\"common\"),u?l.a.createElement(\"span\",{className:\"badge badge--danger\"},\"required\",d&&\"*\"):l.a.createElement(\"span\",{className:\"badge badge--secondary\"},\"optional\")),v,!g&&\"table\"!=b&&l.a.createElement(f,{defaultValue:a,enumValues:r,examples:o,groups:s,name:c,path:p,relevantWhen:d,required:u,unit:h,warnings:j}))}}}]);","extractedComments":[]}
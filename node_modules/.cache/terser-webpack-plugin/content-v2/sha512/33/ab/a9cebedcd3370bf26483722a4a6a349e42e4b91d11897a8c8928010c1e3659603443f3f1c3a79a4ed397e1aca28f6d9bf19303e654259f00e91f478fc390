{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{275:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"frontMatter\",(function(){return m})),n.d(t,\"metadata\",(function(){return u})),n.d(t,\"rightToc\",(function(){return b})),n.d(t,\"default\",(function(){return d}));var a=n(1),l=n(6),r=(n(0),n(307)),i=n(309),o=n(310),s=n(312),c=n(311),m={last_modified_on:\"2020-07-13\",component_title:\"Log to Metric\",description:\"The Vector `log_to_metric` transform accepts `log` events, but outputs [`metric`](#metric) events, allowing you to convert logs into one or more metrics.\",event_types:[\"log\",\"metric\"],function_category:\"convert\",issues_url:\"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+log_to_metric%22\",operating_systems:[\"Linux\",\"MacOS\",\"Windows\"],sidebar_label:'log_to_metric|[\"log\",\"metric\"]',source_url:\"https://github.com/timberio/vector/tree/master/src/transforms/log_to_metric.rs\",status:\"prod-ready\",title:\"Log to Metric Transform\",unsupported_operating_systems:[]},u={id:\"reference/transforms/log_to_metric\",title:\"Log to Metric Transform\",description:\"The Vector `log_to_metric` transform accepts `log` events, but outputs [`metric`](#metric) events, allowing you to convert logs into one or more metrics.\",source:\"@site/docs/reference/transforms/log_to_metric.md\",permalink:\"/docs/reference/transforms/log_to_metric\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/reference/transforms/log_to_metric.md\",sidebar_label:'log_to_metric|[\"log\",\"metric\"]'},b=[{value:\"Configuration\",id:\"configuration\",children:[{value:\"metrics\",id:\"metrics\",children:[]}]},{value:\"Examples\",id:\"examples\",children:[]},{value:\"How It Works\",id:\"how-it-works\",children:[{value:\"Complex Processing\",id:\"complex-processing\",children:[]},{value:\"Environment Variables\",id:\"environment-variables\",children:[]},{value:\"Multiple Metrics\",id:\"multiple-metrics\",children:[]},{value:\"Null Fields\",id:\"null-fields\",children:[]},{value:\"Reducing\",id:\"reducing\",children:[]}]}],p={rightToc:b};function d(e){var t=e.components,n=Object(l.a)(e,[\"components\"]);return Object(r.b)(\"wrapper\",Object(a.a)({},p,n,{components:t,mdxType:\"MDXLayout\"}),Object(r.b)(\"p\",null,\"The Vector \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"log_to_metric\"),\" transform\\naccepts \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"log\")),\" events, but outputs\\n\",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/metric/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"metric\")),\" events, allowing you to convert logs into\\none or more metrics.\"),Object(r.b)(\"h2\",{id:\"configuration\"},\"Configuration\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.log_to_metric]\\n  type = \"log_to_metric\"\\n\\n  [[transforms.log_to_metric.metrics]]\\n    type = \"histogram\"\\n    field = \"time\"\\n    name = \"time_ms\" # optional\\n    tags.status = \"{{status}}\" # optional\\n    tags.host = \"{{host}}\" # optional\\n    tags.env = \"${ENV}\" # optional\\n')),Object(r.b)(i.a,{filters:!0,mdxType:\"Fields\"},Object(r.b)(o.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:\"metrics\",path:null,relevantWhen:null,required:!0,templateable:!1,type:\"[table]\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h3\",{id:\"metrics\"},\"metrics\"),Object(r.b)(\"p\",null,\"A table of key/value pairs representing the keys to be added to the event.\"),Object(r.b)(i.a,{filters:!1,mdxType:\"Fields\"},Object(r.b)(o.a,{common:!0,defaultValue:null,enumValues:null,examples:[\"duration\",\"parent.child\"],groups:[],name:\"field\",path:\"metrics\",relevantWhen:null,required:!0,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h4\",{id:\"field\"},\"field\"),Object(r.b)(\"p\",null,\"The log field to use as the metric.\\nSee \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"#null-fields\"}),\"Null Fields\"),\" for more info.\")),Object(r.b)(o.a,{common:!1,defaultValue:!1,enumValues:null,examples:[!1,!0],groups:[],name:\"increment_by_value\",path:\"metrics\",relevantWhen:{type:\"counter\"},required:!1,templateable:!1,type:\"bool\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h4\",{id:\"increment_by_value\"},\"increment_by_value\"),Object(r.b)(\"p\",null,\"If \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"true\"),\" the metric will be incremented by the \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"#field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\" value. If \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"false\"),\" the\\nmetric will be incremented by 1 regardless of the \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"#field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\" value.\")),Object(r.b)(o.a,{common:!0,defaultValue:null,enumValues:null,examples:[\"duration_total\"],groups:[],name:\"name\",path:\"metrics\",relevantWhen:null,required:!0,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h4\",{id:\"name\"},\"name\"),Object(r.b)(\"p\",null,\"The name of the metric. Defaults to \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"<field>_total\"),\" for \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"counter\"),\" and \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"<field>\"),\"\\nfor \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"gauge\"),\".\")),Object(r.b)(o.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:\"tags\",path:\"metrics\",relevantWhen:null,required:!1,templateable:!1,type:\"table\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h4\",{id:\"tags\"},\"tags\"),Object(r.b)(\"p\",null,\"Key/value pairs representing \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/metric/#tags\"}),\"metric tags\"),\".\"),Object(r.b)(i.a,{filters:!1,mdxType:\"Fields\"},Object(r.b)(o.a,{common:!0,defaultValue:null,enumValues:null,examples:[{host:\"${HOSTNAME}\"},{region:\"us-east-1\"},{status:\"{{status}}\"}],groups:[],name:\"`[tag-name]`\",path:\"metrics.tags\",relevantWhen:null,required:!0,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h5\",{id:\"tag-name\"},Object(r.b)(\"inlineCode\",{parentName:\"h5\"},\"[tag-name]\")),Object(r.b)(\"p\",null,\"Key/value pairs representing \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/metric/#tags\"}),\"metric tags\"),\".\\nEnvironment variables and field interpolation is allowed.\")))),Object(r.b)(o.a,{common:!0,defaultValue:null,enumValues:{counter:\"A [counter metric type][docs.data-model.metric#counter].\",gauge:\"A [gauge metric type][docs.data-model.metric#gauge].\",histogram:\"A [distribution metric type][docs.data-model.metric#distribution].\",set:\"A [set metric type][docs.data-model.metric#set].\"},examples:[\"counter\",\"gauge\",\"histogram\",\"set\"],groups:[],name:\"type\",path:\"metrics\",relevantWhen:null,required:!0,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(r.b)(\"h4\",{id:\"type\"},\"type\"),Object(r.b)(\"p\",null,\"The metric type.\"))))),Object(r.b)(\"h2\",{id:\"examples\"},\"Examples\"),Object(r.b)(s.a,{block:!0,defaultValue:\"histograms\",select:!1,values:[{label:\"Histograms\",value:\"histograms\"},{label:\"Counts\",value:\"counts\"},{label:\"Sums\",value:\"sums\"},{label:\"Gauges\",value:\"gauges\"},{label:\"Set\",value:\"set\"}],mdxType:\"Tabs\"},Object(r.b)(c.a,{value:\"histograms\",mdxType:\"TabItem\"},Object(r.b)(\"p\",null,\"This example demonstrates capturing timings in your logs.\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-json\",metastring:'title=\"log event\"',title:'\"log','event\"':!0}),'{\\n  \"host\": \"10.22.11.222\",\\n  \"message\": \"Sent 200 in 54.2ms\",\\n  \"status\": 200,\\n  \"time\": 54.2,\\n}\\n')),Object(r.b)(\"p\",null,\"You can convert the \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"time\"),\" field into a \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"distribution\"),\" metric:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'tite=\"vector.toml\"',tite:'\"vector.toml\"'}),'[transforms.log_to_metric]\\n  type = \"log_to_metric\"\\n\\n  [[transforms.log_to_metric.metrics]]\\n    type = \"histogram\"\\n    field = \"time\"\\n    name = \"time_ms\" # optional\\n    tags.status = \"{{status}}\" # optional\\n    tags.host = \"{{host}}\" # optional\\n')),Object(r.b)(\"p\",null,\"A \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/metric/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"metric\"),\" event\"),\" will be output with the following\\nstructure:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"metric event\"',title:'\"metric','event\"':!0}),'{\\n  \"name\": \"time_ms\",\\n  \"kind\": \"incremental\",\\n  \"tags\": {\\n    \"status\": \"200\",\\n    \"host\": \"10.22.11.222\"\\n  }\\n  \"distribution\": {\\n    \"values\": [54.2],\\n    \"sample_rates\": [1.0]\\n  }\\n}\\n')),Object(r.b)(\"p\",null,\"This metric will then proceed down the pipeline, and depending on the sink,\\nwill be aggregated in Vector (such is the case for the \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/reference/sinks/prometheus/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"prometheus\"),\" sink\"),\") or will be aggregated in the store itself.\")),Object(r.b)(c.a,{value:\"counts\",mdxType:\"TabItem\"},Object(r.b)(\"p\",null,\"This example demonstrates counting HTTP status codes.\"),Object(r.b)(\"p\",null,\"Given the following log line:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-json\",metastring:'title=\"log event\"',title:'\"log','event\"':!0}),'{\\n  \"host\": \"10.22.11.222\",\\n  \"message\": \"Sent 200 in 54.2ms\",\\n  \"status\": 200\\n}\\n')),Object(r.b)(\"p\",null,\"You can count the number of responses by status code:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.log_to_metric]\\n  type = \"log_to_metric\"\\n\\n  [[transforms.log_to_metric.metrics]]\\n    type = \"counter\"\\n    field = \"status\"\\n    name = \"response_total\" # optional\\n    tags.status = \"{{status}}\"\\n    tags.host = \"{{host}}\"\\n')),Object(r.b)(\"p\",null,\"A \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/metric/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"metric\"),\" event\"),\" will be output with the following\\nstructure:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"metric event\"',title:'\"metric','event\"':!0}),'{\\n  \"name\": \"response_total\",\\n  \"kind\": \"incremental\",\\n  \"tags\": {\\n    \"status\": \"200\",\\n    \"host\": \"10.22.11.222\"\\n  }\\n  \"counter\": {\\n    \"value\": 1.0,\\n  }\\n}\\n')),Object(r.b)(\"p\",null,\"This metric will then proceed down the pipeline, and depending on the sink,\\nwill be aggregated in Vector (such is the case for the \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/reference/sinks/prometheus/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"prometheus\"),\" sink\"),\") or will be aggregated in the store itself.\")),Object(r.b)(c.a,{value:\"sums\",mdxType:\"TabItem\"},Object(r.b)(\"p\",null,\"In this example we'll demonstrate computing a sum. The scenario we've chosen\\nis to compute the total of orders placed.\"),Object(r.b)(\"p\",null,\"Given the following log line:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-json\",metastring:'title=\"log event\"',title:'\"log','event\"':!0}),'{\\n  \"host\": \"10.22.11.222\",\\n  \"message\": \"Order placed for $122.20\",\\n  \"total\": 122.2\\n}\\n')),Object(r.b)(\"p\",null,\"You can reduce this log into a \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"counter\"),\" metric that increases by the\\nfield's value:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.log_to_metric]\\n  type = \"log_to_metric\"\\n\\n  [[transforms.log_to_metric.metrics]]\\n    type = \"counter\"\\n    field = \"total\"\\n    name = \"order_total\" # optional\\n    increment_by_value = true # optional\\n    tags.host = \"{{host}}\" # optional\\n')),Object(r.b)(\"p\",null,\"A \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/metric/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"metric\"),\" event\"),\" will be output with the following\\nstructure:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"metric event\"',title:'\"metric','event\"':!0}),'{\\n  \"name\": \"order_total\",\\n  \"kind\": \"incremental\",\\n  \"tags\": {\\n    \"status\": \"200\",\\n    \"host\": \"10.22.11.222\"\\n  }\\n  \"counter\": {\\n    \"value\": 122.20,\\n  }\\n}\\n')),Object(r.b)(\"p\",null,\"This metric will then proceed down the pipeline, and depending on the sink,\\nwill be aggregated in Vector (such is the case for the \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/reference/sinks/prometheus/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"prometheus\"),\" sink\"),\") or will be aggregated in the store itself.\")),Object(r.b)(c.a,{value:\"gauges\",mdxType:\"TabItem\"},Object(r.b)(\"p\",null,\"In this example we'll demonstrate creating a gauge that represents the current\\nCPU load verages.\"),Object(r.b)(\"p\",null,\"Given the following log line:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-json\",metastring:'title=\"log event\"',title:'\"log','event\"':!0}),'{\\n  \"host\": \"10.22.11.222\",\\n  \"message\": \"CPU activity sample\",\\n  \"1m_load_avg\": 78.2,\\n  \"5m_load_avg\": 56.2,\\n  \"15m_load_avg\": 48.7\\n}\\n')),Object(r.b)(\"p\",null,\"You can reduce this logs into multiple \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"gauge\"),\" metrics:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.log_to_metric]\\n  type = \"log_to_metric\"\\n\\n  [[transforms.log_to_metric.metrics]]\\n    type = \"gauge\"\\n    field = \"1m_load_avg\"\\n    tags.host = \"{{host}}\" # optional\\n\\n  [[transforms.log_to_metric.metrics]]\\n    type = \"gauge\"\\n    field = \"5m_load_avg\"\\n    tags.host = \"{{host}}\" # optional\\n\\n  [[transforms.log_to_metric.metrics]]\\n    type = \"gauge\"\\n    field = \"15m_load_avg\"\\n    tags.host = \"{{host}}\" # optional\\n')),Object(r.b)(\"p\",null,\"Multiple \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/metric/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"metric\"),\" events\"),\" will be output with the following\\nstructure:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"Metric event 1\"',title:'\"Metric',event:!0,'1\"':!0}),'{\\n  \"name\": \"1m_load_avg\",\\n  \"kind\": \"absolute\",\\n  \"tags\": {\\n    \"host\": \"10.22.11.222\"\\n  },\\n  \"gauge\": {\\n    \"value\": 78.2\\n  }\\n}\\n')),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"Metric event 2\"',title:'\"Metric',event:!0,'2\"':!0}),'{\\n  \"name\": \"5m_load_avg\",\\n  \"kind\": \"absolute\",\\n  \"tags\": {\\n    \"host\": \"10.22.11.222\"\\n  },\\n  \"gauge\": {\\n    \"value\": 56.2\\n  }\\n}\\n')),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"Metric event 3\"',title:'\"Metric',event:!0,'3\"':!0}),'{\\n  \"name\": \"15m_load_avg\",\\n  \"kind\": \"absolute\",\\n  \"tags\": {\\n    \"host\": \"10.22.11.222\"\\n  },\\n  \"gauge\": {\\n    \"value\": 48.7\\n  }\\n}\\n')),Object(r.b)(\"p\",null,\"This metric will then proceed down the pipeline, and depending on the sink,\\nwill be aggregated in Vector (such is the case for the \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/reference/sinks/prometheus/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"prometheus\"),\" sink\"),\") or will be aggregated in the store itself.\")),Object(r.b)(c.a,{value:\"set\",mdxType:\"TabItem\"},Object(r.b)(\"p\",null,\"In this example we'll demonstrate how to use sets. Sets are primarly a Statsd\\nconcept that represent the number of unique values seens for a given metric.\\nThe idea is that you pass the unique/high-cardinality value as the metric value\\nand the metric store will count the number of unique values seen.\"),Object(r.b)(\"p\",null,\"For example, given the following log line:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-json\",metastring:'title=\"log event\"',title:'\"log','event\"':!0}),'{\\n  \"host\": \"10.22.11.222\",\\n  \"message\": \"Sent 200 in 54.2ms\",\\n  \"remote_addr\": \"233.221.232.22\"\\n}\\n')),Object(r.b)(\"p\",null,\"You can count the number of unique \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"remote_addr\"),\" values by using a set:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.log_to_metric]\\n  type = \"log_to_metric\"\\n\\n  [[transforms.log_to_metric.metrics]]\\n    type = \"set\"\\n    field = \"remote_addr\"\\n    tags.host = \"{{host}}\" # optional\\n')),Object(r.b)(\"p\",null,\"A \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/about/data-model/metric/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"metric\"),\" event\"),\" will be output with the following\\nstructure:\"),Object(r.b)(\"pre\",null,Object(r.b)(\"code\",Object(a.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"metric event\"',title:'\"metric','event\"':!0}),'{\\n  \"name\": \"remote_addr\",\\n  \"kind\": \"incremental\",\\n  \"tags\": {\\n    \"host\": \"10.22.11.222\"\\n  },\\n  \"set\": {\\n    \"values\": [\"233.221.232.22\"]\\n  }\\n}\\n')),Object(r.b)(\"p\",null,\"This metric will then proceed down the pipeline, and depending on the sink,\\nwill be aggregated in Vector (such is the case for the \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/reference/sinks/prometheus/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"prometheus\"),\" sink\"),\") or will be aggregated in the store itself.\"))),Object(r.b)(\"h2\",{id:\"how-it-works\"},\"How It Works\"),Object(r.b)(\"h3\",{id:\"complex-processing\"},\"Complex Processing\"),Object(r.b)(\"p\",null,\"If you encounter limitations with the \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"log_to_metric\"),\"\\ntransform then we recommend using a \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"https://vector.dev/components/?functions%5B%5D=program\"}),\"runtime transform\"),\".\\nThese transforms are designed for complex processing and give you the power of\\nfull programming runtime.\"),Object(r.b)(\"h3\",{id:\"environment-variables\"},\"Environment Variables\"),Object(r.b)(\"p\",null,\"Environment variables are supported through all of Vector's configuration.\\nSimply add \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"${MY_ENV_VAR}\"),\" in your Vector configuration file and the variable\\nwill be replaced before being evaluated.\"),Object(r.b)(\"p\",null,\"You can learn more in the\\n\",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/setup/configuration/#environment-variables\"}),\"Environment Variables\"),\" section.\"),Object(r.b)(\"h3\",{id:\"multiple-metrics\"},\"Multiple Metrics\"),Object(r.b)(\"p\",null,\"For clarification, when you convert a single \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"log\"),\" event into multiple \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"#metric\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"metric\")),\"\\nevents, the \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"#metric\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"metric\")),\" events are not emitted as a single array. They are emitted\\nindividually, and the downstream components treat them as individual events.\\nDownstream components are not aware they were derived from a single log event.\"),Object(r.b)(\"h3\",{id:\"null-fields\"},\"Null Fields\"),Object(r.b)(\"p\",null,\"If the target log \",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"#field\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\" contains a \",Object(r.b)(\"inlineCode\",{parentName:\"p\"},\"null\"),\" value it will ignored, and a metric\\nwill not be emitted.\"),Object(r.b)(\"h3\",{id:\"reducing\"},\"Reducing\"),Object(r.b)(\"p\",null,\"It's important to understand that this transform does not reduce multiple logs\\ninto a single metric. Instead, this transform converts logs into granular\\nindividual metrics that can then be reduced at the edge. Where the reduction\\nhappens depends on your metrics storage. For example, the\\n\",Object(r.b)(\"a\",Object(a.a)({parentName:\"p\"},{href:\"/docs/reference/sinks/prometheus/\"}),Object(r.b)(\"inlineCode\",{parentName:\"a\"},\"prometheus\"),\" sink\"),\" will reduce logs in the sink itself\\nfor the next scrape, while other metrics sinks will proceed to forward the\\nindividual metrics for reduction in the metrics storage itself.\"))}d.isMDXComponent=!0},309:function(e,t,n){\"use strict\";n(12);var a=n(0),l=n.n(a),r=n(318),i=n(317),o=n(316),s=n.n(o);t.a=function({children:e,filters:t}){const[n,o]=Object(a.useState)(!1),[c,m]=Object(a.useState)(new Set),[u,b]=Object(a.useState)(!1),[p,d]=Object(a.useState)(null);let g=[];e&&(g=Array.isArray(e)?e:[e]);let h=g.some(e=>e.props.common),j=s()(g).flatMap(e=>e.props.groups).uniq().value(),O=g.some(e=>e.props.required),f=g;return n&&(f=f.filter(e=>e.props.common)),c.size>0&&(f=f.filter(e=>Array.from(c).every(t=>e.props.groups.includes(t)))),u&&(f=f.filter(e=>e.props.required)),p&&(f=f.filter(e=>e.props.name.toLowerCase().includes(p.toLowerCase()))),l.a.createElement(l.a.Fragment,null,g.length>1&&!1!==t?l.a.createElement(\"div\",{className:\"filters\"},l.a.createElement(\"div\",{className:\"search\"},l.a.createElement(\"span\",{className:\"search--result-count\"},f.length,\" items\"),l.a.createElement(\"input\",{className:\"input--text input--lg\",type:\"text\",onChange:e=>d(e.currentTarget.value),placeholder:\"\\ud83d\\udd0d Search...\"})),l.a.createElement(\"div\",{className:\"filter\"},l.a.createElement(\"div\",{className:\"filter--choices\"},l.a.createElement(r.a,{values:j,currentState:c,setState:m}),h&&l.a.createElement(\"label\",{title:\"Only show popular/common results\"},l.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>o(e.currentTarget.checked),checked:n}),\"common\"),O&&l.a.createElement(\"label\",{title:\"Only show required results\"},l.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>b(e.currentTarget.checked),checked:u}),\"required\")))):null,!Array.isArray(f)||f.length>0?l.a.createElement(\"ul\",{className:\"connected-list\"},f):l.a.createElement(i.a,{text:\"no components found\"}))}},310:function(e,t,n){\"use strict\";n(12);var a=n(0),l=n.n(a),r=n(306),i=n.n(r),o=(n(307),n(315));function s(e){return e.includes(\".\")?'\"'+e+'\"':e}function c(e){return\"string\"==typeof e&&e.includes(\"\\n\")?`\"\"\"\\n${e}\\n\"\"\"`:JSON.stringify(e)}function m(e,t){return(n=t)&&n.constructor===Object?\"name\"in t&&\"value\"in t?`${s(t.name)} = ${c(t.value)}`:`${s(Object.keys(t)[0])} = ${c(Object.values(t)[0])}`:e?`${s(e)} = ${c(t)}`:c(t);var n}function u({values:e}){let t=[];if(Array.isArray(e))for(var n in e){let a=e[n];t.push(l.a.createElement(\"code\",{key:a},c(a))),t.push(\" \")}else for(var a in e)t.push(l.a.createElement(\"code\",{key:a,className:\"with-info-icon\",title:e[a]},c(a))),t.push(\" \");return t}function b({name:e,path:t,values:n}){let a=\"\";return n.forEach((function(n){t&&(a+=t+\".\"),a+=m(e,n)+\"\\n\"})),l.a.createElement(\"div\",null,l.a.createElement(o.a,{className:\"language-toml\"},a))}function p({unit:e,value:t}){let n=\"\";return e&&(n=l.a.createElement(l.a.Fragment,null,\" (\",e,\")\")),l.a.createElement(l.a.Fragment,null,l.a.createElement(\"code\",null,c(t)),n)}function d({value:e}){let t=Object.keys(e)[0],n=Object.values(e)[0];return\"\"==n&&(n=null),l.a.createElement(\"span\",null,l.a.createElement(\"code\",null,l.a.createElement(\"a\",{href:\"#\"+t},t)),\" \",\"= \",l.a.createElement(\"code\",null,c(n)))}function g({defaultValue:e,enumValues:t,examples:n,groups:r,name:i,path:o,relevantWhen:s,required:c,unit:m,warnings:g}){const[h,j]=Object(a.useState)(!1);return l.a.createElement(\"ul\",{className:\"info\"},g&&g.length>0&&g.map((e,t)=>l.a.createElement(\"li\",{key:t,className:\"warning\"},l.a.createElement(\"i\",{className:\"feather icon-alert-triangle\"}),\" WARNING:\",\" \",e.text)),s&&l.a.createElement(\"li\",null,\"Only \",c?\"required\":\"relevant\",\" when:\",\" \",l.a.createElement(d,{value:s})),void 0!==e?null!==e?l.a.createElement(\"li\",null,\"Default: \",l.a.createElement(p,{unit:m,value:e})):l.a.createElement(\"li\",null,\"No default\"):null,t&&l.a.createElement(\"li\",null,\"Enum, must be one of: \",l.a.createElement(u,{values:t})),(n.length>1||n[0]!=e)&&l.a.createElement(\"li\",null,l.a.createElement(\"div\",{className:\"show-more\",onClick:()=>j(!h)},h?\"Hide examples\":\"View examples\"),h&&l.a.createElement(b,{name:i,path:o,values:n})))}t.a=function({children:e,common:t,defaultValue:n,enumValues:r,examples:o,groups:s,name:c,path:m,relevantWhen:u,required:b,templateable:p,type:d,unit:h,warnings:j}){const[O,f]=Object(a.useState)(!1);let v=e;return O&&(v=v.filter(e=>\"p\"!=e.props.originalType)),l.a.createElement(\"li\",{className:i()({\"field-required\":b,\"field-collapsed\":O}),required:b},l.a.createElement(\"div\",{className:\"badges\"},p&&l.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This option is dynamic and accepts the Vector template syntax\"},\"templateable\"),d&&l.a.createElement(\"span\",{className:\"badge badge--secondary\"},d,h&&l.a.createElement(l.a.Fragment,null,\" (\",h,\")\")),r&&Object.keys(r).length>0&&l.a.createElement(\"span\",{className:\"badge badge--secondary with-info-icon\",title:\"This option is an enumation and only allows specific values\"},\"enum\"),t&&l.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This is a popular that we recommend for getting started\"},\"common\"),b?l.a.createElement(\"span\",{className:\"badge badge--danger\"},\"required\",u&&\"*\"):l.a.createElement(\"span\",{className:\"badge badge--secondary\"},\"optional\")),v,!O&&\"table\"!=d&&l.a.createElement(g,{defaultValue:n,enumValues:r,examples:o,groups:s,name:c,path:m,relevantWhen:u,required:b,unit:h,warnings:j}))}}}]);","extractedComments":[]}
{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{230:function(e,t,a){\"use strict\";a.r(t),a.d(t,\"frontMatter\",(function(){return c})),a.d(t,\"metadata\",(function(){return s})),a.d(t,\"rightToc\",(function(){return r})),a.d(t,\"default\",(function(){return b}));var n=a(1),l=a(6),i=(a(0),a(307)),c={last_modified_on:\"2020-07-13\",title:\"Field Path Notation\",description:\"Vector's field path notation allows you to reference field values with a simple string syntax.\"},s={id:\"reference/field-path-notation\",title:\"Field Path Notation\",description:\"Vector's field path notation allows you to reference field values with a simple string syntax.\",source:\"@site/docs/reference/field-path-notation.md\",permalink:\"/docs/reference/field-path-notation\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/reference/field-path-notation.md\"},r=[{value:\"Example\",id:\"example\",children:[]},{value:\"Syntax\",id:\"syntax\",children:[{value:\"Root-level Values\",id:\"root-level-values\",children:[]},{value:\"Nested Values\",id:\"nested-values\",children:[]},{value:\"Array Values\",id:\"array-values\",children:[]},{value:\"Escaping\",id:\"escaping\",children:[]}]}],o={rightToc:r};function b(e){var t=e.components,a=Object(l.a)(e,[\"components\"]);return Object(i.b)(\"wrapper\",Object(n.a)({},o,a,{components:t,mdxType:\"MDXLayout\"}),Object(i.b)(\"p\",null,\"Throughout Vector's configuration you'll notice that certain options take field\\npaths as values, such as the\\n\",Object(i.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/transforms/rename_fields/\"}),Object(i.b)(\"inlineCode\",{parentName:\"a\"},\"rename_fields\"),\" transform\"),\". In order to\\nreferenxe nested, or array, values you can use Vector's field path notation.\\nThis notation is not anything special, it simply uses \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\".\"),\" and \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"[<index>]\"),\" to\\naccess nested and array values, respectively.\"),Object(i.b)(\"h2\",{id:\"example\"},\"Example\"),Object(i.b)(\"p\",null,\"For this example let's use the following \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"log\"),\" event:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-json\"}),'{\\n  \"timestamp\": \"2020-02-14T01:22:23.223Z\",\\n  \"application_id\": 1,\\n  \"message\": \"Hello world\",\\n  \"field.with.dot\": \"value\",\\n  \"ec2\": {\\n    \"instance_id\": \"abcd1234\",\\n    \"tags\": [\"tag1: value1\", \"tag2: value1\"]\\n  }\\n}\\n')),Object(i.b)(\"p\",null,\"We can access the values like so:\"),Object(i.b)(\"ul\",null,Object(i.b)(\"li\",{parentName:\"ul\"},Object(i.b)(\"inlineCode\",{parentName:\"li\"},'\"application_id\"'),\" - Accesses the root level \",Object(i.b)(\"inlineCode\",{parentName:\"li\"},\"application_id\"),\" field.\"),Object(i.b)(\"li\",{parentName:\"ul\"},Object(i.b)(\"inlineCode\",{parentName:\"li\"},'\"ec2.instance_id\"'),\" - Accesses the child \",Object(i.b)(\"inlineCode\",{parentName:\"li\"},\"instance_id\"),\" field.\"),Object(i.b)(\"li\",{parentName:\"ul\"},Object(i.b)(\"inlineCode\",{parentName:\"li\"},'\"ec2.tags[0]\"'),\" - Accesses the first value in the child \",Object(i.b)(\"inlineCode\",{parentName:\"li\"},\"tags\"),\" field.\")),Object(i.b)(\"h2\",{id:\"syntax\"},\"Syntax\"),Object(i.b)(\"h3\",{id:\"root-level-values\"},\"Root-level Values\"),Object(i.b)(\"p\",null,\"Root-level values can be access by simply supplying the name of the field as\\nshown in the example above.\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-text\"}),\"field_name\\n\")),Object(i.b)(\"h3\",{id:\"nested-values\"},\"Nested Values\"),Object(i.b)(\"p\",null,\"Nested values can be accessed by separating ancestor fields with the \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\".\"),\"\\ncharacter:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-text\"}),\"grandparent.parent.child\\n\")),Object(i.b)(\"h3\",{id:\"array-values\"},\"Array Values\"),Object(i.b)(\"p\",null,\"Array values can be access with the \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"[<index>]\"),\" syntax:\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-text\"}),\"field_name[0]\\n\")),Object(i.b)(\"p\",null,\"Accesses the \",Object(i.b)(\"em\",{parentName:\"p\"},\"first\"),\" value since it has an index of 0.\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-text\"}),\"parent.child[0]\\n\")),Object(i.b)(\"p\",null,\"Accesses the \",Object(i.b)(\"em\",{parentName:\"p\"},\"first\"),\" value of the nested \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"child\"),\" field.\"),Object(i.b)(\"h3\",{id:\"escaping\"},\"Escaping\"),Object(i.b)(\"p\",null,\"The special characters \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\".\"),\", \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"[\"),\", and \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"]\"),\" can be escaped with a \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"\\\\\"),\":\"),Object(i.b)(\"pre\",null,Object(i.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-text\"}),\"field\\\\.with\\\\.dots\\n\")),Object(i.b)(\"p\",null,\"The above name will be treated literally.\"),Object(i.b)(\"p\",null,\"The \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"\\\\\"),\" character, if used literally, must be escaped with a \",Object(i.b)(\"inlineCode\",{parentName:\"p\"},\"\\\\\"),\" as well.\"))}b.isMDXComponent=!0}}]);","extractedComments":[]}
{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{217:function(e,t,a){\"use strict\";a.r(t),a.d(t,\"frontMatter\",(function(){return s})),a.d(t,\"metadata\",(function(){return p})),a.d(t,\"rightToc\",(function(){return m})),a.d(t,\"default\",(function(){return u}));var n=a(1),r=a(6),l=(a(0),a(307)),i=a(309),c=a(310),b=a(312),o=a(311),s={last_modified_on:\"2020-07-13\",component_title:\"Regex Parser\",description:\"The Vector `regex_parser` transform accepts and outputs `log` events, allowing you to parse a log field's value with a Regular Expression.\",event_types:[\"log\"],function_category:\"parse\",issues_url:\"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+regex_parser%22\",operating_systems:[\"Linux\",\"MacOS\",\"Windows\"],sidebar_label:'regex_parser|[\"log\"]',source_url:\"https://github.com/timberio/vector/tree/master/src/transforms/regex_parser.rs\",status:\"prod-ready\",title:\"Regex Parser Transform\",unsupported_operating_systems:[]},p={id:\"reference/transforms/regex_parser\",title:\"Regex Parser Transform\",description:\"The Vector `regex_parser` transform accepts and outputs `log` events, allowing you to parse a log field's value with a Regular Expression.\",source:\"@site/docs/reference/transforms/regex_parser.md\",permalink:\"/docs/reference/transforms/regex_parser\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/reference/transforms/regex_parser.md\",sidebar_label:'regex_parser|[\"log\"]'},m=[{value:\"Configuration\",id:\"configuration\",children:[{value:\"drop_field\",id:\"drop_field\",children:[]},{value:\"field\",id:\"field\",children:[]},{value:\"overwrite_target\",id:\"overwrite_target\",children:[]},{value:\"patterns\",id:\"patterns\",children:[]},{value:\"target_field\",id:\"target_field\",children:[]},{value:\"types\",id:\"types\",children:[]}]},{value:\"Examples\",id:\"examples\",children:[]},{value:\"How It Works\",id:\"how-it-works\",children:[{value:\"Complex Processing\",id:\"complex-processing\",children:[]},{value:\"Environment Variables\",id:\"environment-variables\",children:[]},{value:\"Failed Parsing\",id:\"failed-parsing\",children:[]},{value:\"Field Notation Syntax\",id:\"field-notation-syntax\",children:[]},{value:\"Performance\",id:\"performance\",children:[]},{value:\"Regex Debugger\",id:\"regex-debugger\",children:[]},{value:\"Regex Syntax\",id:\"regex-syntax\",children:[]},{value:\"Value Coercion\",id:\"value-coercion\",children:[]}]}],d={rightToc:m};function u(e){var t=e.components,a=Object(r.a)(e,[\"components\"]);return Object(l.b)(\"wrapper\",Object(n.a)({},d,a,{components:t,mdxType:\"MDXLayout\"}),Object(l.b)(\"p\",null,\"The Vector \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"regex_parser\"),\" transform\\naccepts and outputs \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"log\")),\" events, allowing you to parse\\na log field's value with a \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/Regular_expression\"}),\"Regular Expression\"),\".\"),Object(l.b)(\"h2\",{id:\"configuration\"},\"Configuration\"),Object(l.b)(b.a,{block:!0,defaultValue:\"common\",values:[{label:\"Common\",value:\"common\"},{label:\"Advanced\",value:\"advanced\"}],mdxType:\"Tabs\"},Object(l.b)(o.a,{value:\"common\",mdxType:\"TabItem\"},Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  # General\\n  type = \"regex_parser\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n  drop_field = true # optional, default\\n  field = \"message\" # optional, default\\n  patterns = \"[\\'^(?P<timestamp>[\\\\\\\\w\\\\\\\\-:\\\\\\\\+]+) (?P<level>\\\\\\\\w+) (?P<message>.*)$\\']\" # required\\n\\n  # Types\\n  types.status = \"int\" # example\\n  types.duration = \"float\" # example\\n  types.success = \"bool\" # example\\n  types.timestamp = \"timestamp|%F\" # example\\n  types.timestamp = \"timestamp|%a %b %e %T %Y\" # example\\n  types.parent.child = \"int\" # example\\n'))),Object(l.b)(o.a,{value:\"advanced\",mdxType:\"TabItem\"},Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_transform_id]\\n  # General\\n  type = \"regex_parser\" # required\\n  inputs = [\"my-source-or-transform-id\"] # required\\n  drop_field = true # optional, default\\n  field = \"message\" # optional, default\\n  overwrite_target = true # optional, default\\n  patterns = \"[\\'^(?P<timestamp>[\\\\\\\\w\\\\\\\\-:\\\\\\\\+]+) (?P<level>\\\\\\\\w+) (?P<message>.*)$\\']\" # required\\n  target_field = \"root_field\" # optional, no default\\n\\n  # Types\\n  types.status = \"int\" # example\\n  types.duration = \"float\" # example\\n  types.success = \"bool\" # example\\n  types.timestamp = \"timestamp|%F\" # example\\n  types.timestamp = \"timestamp|%a %b %e %T %Y\" # example\\n  types.parent.child = \"int\" # example\\n')))),Object(l.b)(i.a,{filters:!0,mdxType:\"Fields\"},Object(l.b)(c.a,{common:!0,defaultValue:!0,enumValues:null,examples:[!0,!1],groups:[],name:\"drop_field\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"bool\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"drop_field\"},\"drop_field\"),Object(l.b)(\"p\",null,\"If the specified \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\" should be dropped (removed) after parsing.\")),Object(l.b)(c.a,{common:!0,defaultValue:\"message\",enumValues:null,examples:[\"message\",\"parent.child\"],groups:[],name:\"field\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"field\"},\"field\"),Object(l.b)(\"p\",null,\"The log field to parse.\\nSee \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#failed-parsing\"}),\"Failed Parsing\"),\" and \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field-notation-syntax\"}),\"Field Notation Syntax\"),\" for more info.\")),Object(l.b)(c.a,{common:!1,defaultValue:!0,enumValues:null,examples:[!0,!1],groups:[],name:\"overwrite_target\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"bool\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"overwrite_target\"},\"overwrite_target\"),Object(l.b)(\"p\",null,\"If \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#target_field\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"target_field\")),\" is set and the log contains a field of the same name as the\\ntarget, it will only be overwritten if this is set to \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"true\"),\".\")),Object(l.b)(c.a,{common:!0,defaultValue:null,enumValues:null,examples:[\"['^(?P<timestamp>[\\\\w\\\\-:\\\\+]+) (?P<level>\\\\w+) (?P<message>.*)$']\"],groups:[],name:\"patterns\",path:null,relevantWhen:null,required:!0,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"patterns\"},\"patterns\"),Object(l.b)(\"p\",null,\"The Regular Expressions to apply. Do not include the leading or trailing \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"/\"),\" in\\nany of the expressions.\")),Object(l.b)(c.a,{common:!1,defaultValue:null,enumValues:null,examples:[\"root_field\",\"parent.child\"],groups:[],name:\"target_field\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"target_field\"},\"target_field\"),Object(l.b)(\"p\",null,\"If this setting is present, the parsed fields will be inserted into the log as\\na sub-object with this name. If a field with the same name already exists, the\\nparser will fail and produce an error.\\nSee \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field-notation-syntax\"}),\"Field Notation Syntax\"),\" for more info.\")),Object(l.b)(c.a,{common:!0,defaultValue:null,enumValues:null,examples:[],groups:[],name:\"types\",path:null,relevantWhen:null,required:!1,templateable:!1,type:\"table\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h3\",{id:\"types\"},\"types\"),Object(l.b)(\"p\",null,\"Key/value pairs representing mapped log field names and types. This is used to\\ncoerce log fields into their proper types.\\nSee \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#regex-syntax\"}),\"Regex Syntax\"),\" for more info.\"),Object(l.b)(i.a,{filters:!1,mdxType:\"Fields\"},Object(l.b)(c.a,{common:!0,defaultValue:null,enumValues:{bool:'Coerces `\"true\"`/`/\"false\"`, `\"1\"`/`\"0\"`, and `\"t\"`/`\"f\"` values into boolean.',float:\"Coerce to a 64 bit float.\",int:\"Coerce to a 64 bit integer.\",string:\"Coerce to a string.\",timestamp:\"Coerces to a Vector timestamp. [`strptime` specificiers][urls.strptime_specifiers] must be used to parse the string.\"},examples:[{status:\"int\"},{duration:\"float\"},{success:\"bool\"},{timestamp:\"timestamp|%F\"},{timestamp:\"timestamp|%a %b %e %T %Y\"},{parent:{child:\"int\"}}],groups:[],name:\"`[field-name]`\",path:\"types\",relevantWhen:null,required:!1,templateable:!1,type:\"string\",unit:null,warnings:[],mdxType:\"Field\"},Object(l.b)(\"h4\",{id:\"field-name\"},Object(l.b)(\"inlineCode\",{parentName:\"h4\"},\"[field-name]\")),Object(l.b)(\"p\",null,\"A definition of log field type conversions. They key is the log field name and\\nthe value is the type. \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://docs.rs/chrono/0.4.11/chrono/format/strftime/index.html#specifiers\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"strptime\"),\" specifiers\"),\" are\\nsupported for the \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"timestamp\"),\" type.\"))))),Object(l.b)(\"h2\",{id:\"examples\"},\"Examples\"),Object(l.b)(\"p\",null,\"Given the following log line:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-json\",metastring:'title=\"log event\"',title:'\"log','event\"':!0}),'{\\n  \"message\": \"5.86.210.12 - zieme4647 5667 [19/06/2019:17:20:49 -0400] \\\\\"GET /embrace/supply-chains/dynamic/vertical\\\\\" 201 20574\"\\n}\\n')),Object(l.b)(\"p\",null,\"And the following configuration:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.<transform-id>]\\n  type = \"regex_parser\"\\n  field = \"message\"\\n  patterns = [\\'^(?P<host>[\\\\w\\\\.]+) - (?P<user>[\\\\w]+) (?P<bytes_in>[\\\\d]+) \\\\[(?P<timestamp>.*)\\\\] \"(?P<method>[\\\\w]+) (?P<path>.*)\" (?P<status>[\\\\d]+) (?P<bytes_out>[\\\\d]+)$\\']\\n\\n[transforms.<transform-id>.types]\\n  bytes_in = \"int\"\\n  timestamp = \"timestamp|%d/%m/%Y:%H:%M:%S %z\"\\n  status = \"int\"\\n  bytes_out = \"int\"\\n')),Object(l.b)(\"p\",null,\"A \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/about/data-model/log/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"log\"),\" event\"),\" will be output with the following structure:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-javascript\",metastring:'title=\"log event\"',title:'\"log','event\"':!0}),'{\\n  // ... existing fields\\n  \"bytes_in\": 5667,\\n  \"host\": \"5.86.210.12\",\\n  \"user_id\": \"zieme4647\",\\n  \"timestamp\": <19/06/2019:17:20:49 -0400>,\\n  \"message\": \"GET /embrace/supply-chains/dynamic/vertical\",\\n  \"status\": 201,\\n  \"bytes_out\": 20574\\n}\\n')),Object(l.b)(\"p\",null,\"Things to note about the output:\"),Object(l.b)(\"ol\",null,Object(l.b)(\"li\",{parentName:\"ol\"},\"The \",Object(l.b)(\"inlineCode\",{parentName:\"li\"},\"message\"),\" field was overwritten.\"),Object(l.b)(\"li\",{parentName:\"ol\"},\"The \",Object(l.b)(\"inlineCode\",{parentName:\"li\"},\"bytes_in\"),\", \",Object(l.b)(\"inlineCode\",{parentName:\"li\"},\"timestamp\"),\", \",Object(l.b)(\"inlineCode\",{parentName:\"li\"},\"status\"),\", and \",Object(l.b)(\"inlineCode\",{parentName:\"li\"},\"bytes_out\"),\" fields were coerced.\")),Object(l.b)(\"h2\",{id:\"how-it-works\"},\"How It Works\"),Object(l.b)(\"h3\",{id:\"complex-processing\"},\"Complex Processing\"),Object(l.b)(\"p\",null,\"If you encounter limitations with the \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"regex_parser\"),\"\\ntransform then we recommend using a \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://vector.dev/components/?functions%5B%5D=program\"}),\"runtime transform\"),\".\\nThese transforms are designed for complex processing and give you the power of\\nfull programming runtime.\"),Object(l.b)(\"h3\",{id:\"environment-variables\"},\"Environment Variables\"),Object(l.b)(\"p\",null,\"Environment variables are supported through all of Vector's configuration.\\nSimply add \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"${MY_ENV_VAR}\"),\" in your Vector configuration file and the variable\\nwill be replaced before being evaluated.\"),Object(l.b)(\"p\",null,\"You can learn more in the\\n\",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/setup/configuration/#environment-variables\"}),\"Environment Variables\"),\" section.\"),Object(l.b)(\"h3\",{id:\"failed-parsing\"},\"Failed Parsing\"),Object(l.b)(\"p\",null,\"If the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\" value fails to parse against the provided \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"regex\"),\" then an error\\nwill be \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/administration/monitoring/#logs\"}),\"logged\"),\" and the event will be kept or discarded\\ndepending on the \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"drop_failed\"),\" value.\"),Object(l.b)(\"p\",null,\"A failure includes any event that does not successfully parse against the\\nprovided \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"regex\"),\". This includes bad values as well as events missing the\\nspecified \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\".\"),Object(l.b)(\"h3\",{id:\"field-notation-syntax\"},\"Field Notation Syntax\"),Object(l.b)(\"p\",null,\"The \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#field\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"field\")),\" and \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#target_field\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"target_field\")),\" options\\nsupport \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/field-path-notation/\"}),\"Vector's field notation syntax\"),\",\\nenabling access to root-level, nested, and array field values. For example:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.my_regex_parser_transform_id]\\n  # ...\\n  field = \"message\"\\n  field = \"parent.child\"\\n  # ...\\n')),Object(l.b)(\"p\",null,\"You can learn more about Vector's field notation in the\\n\",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/field-path-notation/\"}),\"field notation reference\"),\".\"),Object(l.b)(\"h3\",{id:\"performance\"},\"Performance\"),Object(l.b)(\"p\",null,\"The \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"regex_parser\"),\" source has been involved in the following performance tests:\"),Object(l.b)(\"ul\",null,Object(l.b)(\"li\",{parentName:\"ul\"},Object(l.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/timberio/vector-test-harness/tree/master/cases/regex_parsing_performance\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"regex_parsing_performance\")))),Object(l.b)(\"p\",null,\"Learn more in the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/#performance\"}),\"Performance\"),\" sections.\"),Object(l.b)(\"h3\",{id:\"regex-debugger\"},\"Regex Debugger\"),Object(l.b)(\"p\",null,\"To test the validity of the\",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#regex\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"regex\")),\" option, we recommend the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://rustexp.lpil.uk/\"}),\"Rust\\nRegex Tester\"),\". Note, you \",Object(l.b)(\"em\",{parentName:\"p\"},\"must\"),\" use\\n\",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#named-captures\"}),\"named captures\"),\" in your regex to map the results to fields.\"),Object(l.b)(\"h3\",{id:\"regex-syntax\"},\"Regex Syntax\"),Object(l.b)(\"p\",null,\"Vector follows the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://docs.rs/regex/1.3.6/regex/#syntax\"}),\"documented Rust Regex syntax\"),\" since\\nVector is written in Rust. This syntax follows a Perl-style regular expression\\nsyntax, but lacks a few features like look around and backreferences.\"),Object(l.b)(\"h4\",{id:\"named-captures\"},\"Named Captures\"),Object(l.b)(\"p\",null,\"You can name Regex captures with the \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"<name>\"),\" syntax. For example:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-text\"}),\"^(?P<timestamp>\\\\w*) (?P<level>\\\\w*) (?P<message>.*)$\\n\")),Object(l.b)(\"p\",null,\"Will capture \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"timestamp\"),\", \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"level\"),\", and \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"message\"),\". All values are extracted as\\n\",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"string\"),\" values and must be coerced with the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#types\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"types\")),\" table.\"),Object(l.b)(\"p\",null,\"More info can be found in the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://docs.rs/regex/1.3.6/regex/#grouping-and-flags\"}),\"Regex grouping and flags\\ndocumentation\"),\".\"),Object(l.b)(\"h4\",{id:\"flags\"},\"Flags\"),Object(l.b)(\"p\",null,\"Regex flags can be toggled with the \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"(?flags)\"),\" syntax. The available flags are:\"),Object(l.b)(\"table\",null,Object(l.b)(\"thead\",{parentName:\"table\"},Object(l.b)(\"tr\",{parentName:\"thead\"},Object(l.b)(\"th\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"Flag\"),Object(l.b)(\"th\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"Descriuption\"))),Object(l.b)(\"tbody\",{parentName:\"table\"},Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"i\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"case-insensitive: letters match both upper and lower case\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"m\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"multi-line mode: ^ and $ match begin/end of line\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"s\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"allow . to match \",Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"\\\\n\"))),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"U\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"swap the meaning of \",Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"x*\"),\" and \",Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"x*?\"))),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"u\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"Unicode support (enabled by default)\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"x\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"ignore whitespace and allow line comments (starting with \",Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"#\"),\")\")))),Object(l.b)(\"p\",null,\"For example, to enable the case-insensitive flag you can write:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-text\"}),\"(?i)Hello world\\n\")),Object(l.b)(\"p\",null,\"More info can be found in the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://docs.rs/regex/1.3.6/regex/#grouping-and-flags\"}),\"Regex grouping and flags\\ndocumentation\"),\".\"),Object(l.b)(\"h3\",{id:\"value-coercion\"},\"Value Coercion\"),Object(l.b)(\"p\",null,\"Values can be coerced upon extraction via the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#types\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"types.*\")),\" options. This functions\\nexactly like the \",Object(l.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/transforms/coercer/\"}),Object(l.b)(\"inlineCode\",{parentName:\"a\"},\"coercer\"),\" transform\"),\" except that its\\ncoupled within this transform for convenience.\"),Object(l.b)(\"h4\",{id:\"timestamps\"},\"Timestamps\"),Object(l.b)(\"p\",null,\"You can coerce values into timestamps via the \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"timestamp\"),\" type:\"),Object(l.b)(\"pre\",null,Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'# ...\\ntypes.first_timestamp = \"timestamp\" # best effort parsing\\ntypes.second_timestamp = \"timestamp|%Y-%m-%dT%H:%M:%S%z\" # ISO8601\\n# ...\\n')),Object(l.b)(\"p\",null,\"As noted above, if you do not specify a specific \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"strftime\"),\" format, Vector\\nwill make a best effort attempt to parse the timestamp against the following\\ncommon formats:\"),Object(l.b)(\"table\",null,Object(l.b)(\"thead\",{parentName:\"table\"},Object(l.b)(\"tr\",{parentName:\"thead\"},Object(l.b)(\"th\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"Format\"),Object(l.b)(\"th\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"Description\"))),Object(l.b)(\"tbody\",{parentName:\"table\"},Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"strong\",{parentName:\"td\"},\"Without Timezone\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}))),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"%F %T\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"YYYY-MM-DD HH:MM:SS\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"%v %T\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"DD-Mmm-YYYY HH:MM:SS\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"FT%T\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"ISO 8601 / RFC 3339 without TZ\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"m/%d/%Y:%T\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"US common date format\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"a, %d %b %Y %T\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"RFC 822/2822 without TZ\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"a %d %b %T %Y\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"date\"),\" command output without TZ\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"A %d %B %T %Y\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"date\"),\" command output without TZ, long names\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"a %b %e %T %Y\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"ctime format\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"strong\",{parentName:\"td\"},\"With Timezone\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}))),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"%+\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"ISO 8601 / RFC 3339\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"%a %d %b %T %Z %Y\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"date\"),\" command output\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"%a %d %b %T %z %Y\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"date\"),\" command output, numeric TZ\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"%a %d %b %T %#z %Y\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"date\"),\" command output, numeric TZ\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"strong\",{parentName:\"td\"},\"UTC Formats\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}))),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"%s\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"UNIX timestamp\")),Object(l.b)(\"tr\",{parentName:\"tbody\"},Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),Object(l.b)(\"inlineCode\",{parentName:\"td\"},\"%FT%TZ\")),Object(l.b)(\"td\",Object(n.a)({parentName:\"tr\"},{align:\"left\"}),\"ISO 8601 / RFC 3339 UTC\")))))}u.isMDXComponent=!0},309:function(e,t,a){\"use strict\";a(12);var n=a(0),r=a.n(n),l=a(318),i=a(317),c=a(316),b=a.n(c);t.a=function({children:e,filters:t}){const[a,c]=Object(n.useState)(!1),[o,s]=Object(n.useState)(new Set),[p,m]=Object(n.useState)(!1),[d,u]=Object(n.useState)(null);let O=[];e&&(O=Array.isArray(e)?e:[e]);let j=O.some(e=>e.props.common),f=b()(O).flatMap(e=>e.props.groups).uniq().value(),g=O.some(e=>e.props.required),h=O;return a&&(h=h.filter(e=>e.props.common)),o.size>0&&(h=h.filter(e=>Array.from(o).every(t=>e.props.groups.includes(t)))),p&&(h=h.filter(e=>e.props.required)),d&&(h=h.filter(e=>e.props.name.toLowerCase().includes(d.toLowerCase()))),r.a.createElement(r.a.Fragment,null,O.length>1&&!1!==t?r.a.createElement(\"div\",{className:\"filters\"},r.a.createElement(\"div\",{className:\"search\"},r.a.createElement(\"span\",{className:\"search--result-count\"},h.length,\" items\"),r.a.createElement(\"input\",{className:\"input--text input--lg\",type:\"text\",onChange:e=>u(e.currentTarget.value),placeholder:\"\\ud83d\\udd0d Search...\"})),r.a.createElement(\"div\",{className:\"filter\"},r.a.createElement(\"div\",{className:\"filter--choices\"},r.a.createElement(l.a,{values:f,currentState:o,setState:s}),j&&r.a.createElement(\"label\",{title:\"Only show popular/common results\"},r.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>c(e.currentTarget.checked),checked:a}),\"common\"),g&&r.a.createElement(\"label\",{title:\"Only show required results\"},r.a.createElement(\"input\",{type:\"checkbox\",onChange:e=>m(e.currentTarget.checked),checked:p}),\"required\")))):null,!Array.isArray(h)||h.length>0?r.a.createElement(\"ul\",{className:\"connected-list\"},h):r.a.createElement(i.a,{text:\"no components found\"}))}},310:function(e,t,a){\"use strict\";a(12);var n=a(0),r=a.n(n),l=a(306),i=a.n(l),c=(a(307),a(315));function b(e){return e.includes(\".\")?'\"'+e+'\"':e}function o(e){return\"string\"==typeof e&&e.includes(\"\\n\")?`\"\"\"\\n${e}\\n\"\"\"`:JSON.stringify(e)}function s(e,t){return(a=t)&&a.constructor===Object?\"name\"in t&&\"value\"in t?`${b(t.name)} = ${o(t.value)}`:`${b(Object.keys(t)[0])} = ${o(Object.values(t)[0])}`:e?`${b(e)} = ${o(t)}`:o(t);var a}function p({values:e}){let t=[];if(Array.isArray(e))for(var a in e){let n=e[a];t.push(r.a.createElement(\"code\",{key:n},o(n))),t.push(\" \")}else for(var n in e)t.push(r.a.createElement(\"code\",{key:n,className:\"with-info-icon\",title:e[n]},o(n))),t.push(\" \");return t}function m({name:e,path:t,values:a}){let n=\"\";return a.forEach((function(a){t&&(n+=t+\".\"),n+=s(e,a)+\"\\n\"})),r.a.createElement(\"div\",null,r.a.createElement(c.a,{className:\"language-toml\"},n))}function d({unit:e,value:t}){let a=\"\";return e&&(a=r.a.createElement(r.a.Fragment,null,\" (\",e,\")\")),r.a.createElement(r.a.Fragment,null,r.a.createElement(\"code\",null,o(t)),a)}function u({value:e}){let t=Object.keys(e)[0],a=Object.values(e)[0];return\"\"==a&&(a=null),r.a.createElement(\"span\",null,r.a.createElement(\"code\",null,r.a.createElement(\"a\",{href:\"#\"+t},t)),\" \",\"= \",r.a.createElement(\"code\",null,o(a)))}function O({defaultValue:e,enumValues:t,examples:a,groups:l,name:i,path:c,relevantWhen:b,required:o,unit:s,warnings:O}){const[j,f]=Object(n.useState)(!1);return r.a.createElement(\"ul\",{className:\"info\"},O&&O.length>0&&O.map((e,t)=>r.a.createElement(\"li\",{key:t,className:\"warning\"},r.a.createElement(\"i\",{className:\"feather icon-alert-triangle\"}),\" WARNING:\",\" \",e.text)),b&&r.a.createElement(\"li\",null,\"Only \",o?\"required\":\"relevant\",\" when:\",\" \",r.a.createElement(u,{value:b})),void 0!==e?null!==e?r.a.createElement(\"li\",null,\"Default: \",r.a.createElement(d,{unit:s,value:e})):r.a.createElement(\"li\",null,\"No default\"):null,t&&r.a.createElement(\"li\",null,\"Enum, must be one of: \",r.a.createElement(p,{values:t})),(a.length>1||a[0]!=e)&&r.a.createElement(\"li\",null,r.a.createElement(\"div\",{className:\"show-more\",onClick:()=>f(!j)},j?\"Hide examples\":\"View examples\"),j&&r.a.createElement(m,{name:i,path:c,values:a})))}t.a=function({children:e,common:t,defaultValue:a,enumValues:l,examples:c,groups:b,name:o,path:s,relevantWhen:p,required:m,templateable:d,type:u,unit:j,warnings:f}){const[g,h]=Object(n.useState)(!1);let N=e;return g&&(N=N.filter(e=>\"p\"!=e.props.originalType)),r.a.createElement(\"li\",{className:i()({\"field-required\":m,\"field-collapsed\":g}),required:m},r.a.createElement(\"div\",{className:\"badges\"},d&&r.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This option is dynamic and accepts the Vector template syntax\"},\"templateable\"),u&&r.a.createElement(\"span\",{className:\"badge badge--secondary\"},u,j&&r.a.createElement(r.a.Fragment,null,\" (\",j,\")\")),l&&Object.keys(l).length>0&&r.a.createElement(\"span\",{className:\"badge badge--secondary with-info-icon\",title:\"This option is an enumation and only allows specific values\"},\"enum\"),t&&r.a.createElement(\"span\",{className:\"badge badge--primary with-info-icon\",title:\"This is a popular that we recommend for getting started\"},\"common\"),m?r.a.createElement(\"span\",{className:\"badge badge--danger\"},\"required\",p&&\"*\"):r.a.createElement(\"span\",{className:\"badge badge--secondary\"},\"optional\")),N,!g&&\"table\"!=u&&r.a.createElement(O,{defaultValue:a,enumValues:l,examples:c,groups:b,name:o,path:s,relevantWhen:p,required:m,unit:j,warnings:f}))}}}]);","extractedComments":[]}
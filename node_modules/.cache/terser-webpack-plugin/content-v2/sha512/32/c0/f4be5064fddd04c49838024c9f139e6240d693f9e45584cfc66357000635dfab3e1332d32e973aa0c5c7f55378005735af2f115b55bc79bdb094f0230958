{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{273:function(e,t,a){\"use strict\";a.r(t),a.d(t,\"frontMatter\",(function(){return c})),a.d(t,\"metadata\",(function(){return s})),a.d(t,\"rightToc\",(function(){return b})),a.d(t,\"default\",(function(){return m}));var n=a(1),r=a(6),o=(a(0),a(307)),i=a(314),l=a(321),c={last_modified_on:\"2020-07-13\",title:\"Configuration\",description:\"Configuring Vector\"},s={id:\"setup/configuration\",title:\"Configuration\",description:\"Configuring Vector\",source:\"@site/docs/setup/configuration.md\",permalink:\"/docs/setup/configuration\",editUrl:\"https://github.com/nervosnetwork/muta/edit/master/website/docs/setup/configuration.md\"},b=[{value:\"Example\",id:\"example\",children:[]},{value:\"Reference\",id:\"reference\",children:[]},{value:\"How It Works\",id:\"how-it-works\",children:[{value:\"Config File Location\",id:\"config-file-location\",children:[]},{value:\"Environment Variables\",id:\"environment-variables\",children:[]},{value:\"Multiple config files\",id:\"multiple-config-files\",children:[]},{value:\"Syntax\",id:\"syntax\",children:[]},{value:\"Templating\",id:\"templating\",children:[]},{value:\"Types\",id:\"types\",children:[]}]}],p={rightToc:b};function m(e){var t=e.components,a=Object(r.a)(e,[\"components\"]);return Object(o.b)(\"wrapper\",Object(n.a)({},p,a,{components:t,mdxType:\"MDXLayout\"}),Object(o.b)(\"p\",null,\"This section covers configuring Vector and creating pipelines like the\\n\",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"#example\"}),\"example below\"),\". Vector's configuration uses the \",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://github.com/toml-lang/toml\"}),\"TOML\"),\"\\nsyntax, and the configuration file must be passed via the\\n\",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/administration/process-management/#flags\"}),Object(o.b)(\"inlineCode\",{parentName:\"a\"},\"--config\"),\" flag\"),\" when\\n\",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/administration/process-management/#starting\"}),\"starting\"),\" Vector:\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-bash\"}),\"vector --config /etc/vector/vector.toml\\n\")),Object(o.b)(\"h2\",{id:\"example\"},\"Example\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'# Set global options\\ndata_dir = \"/var/lib/vector\"\\n\\n# Ingest data by tailing one or more files\\n[sources.apache_logs]\\n  type         = \"file\"\\n  include      = [\"/var/log/apache2/*.log\"]    # supports globbing\\n  ignore_older = 86400                         # 1 day\\n\\n# Structure and parse the data\\n[transforms.apache_parser]\\n  inputs       = [\"apache_logs\"]\\n  type         = \"regex_parser\"                # fast/powerful regex\\n  patterns      = [\\'^(?P<host>[w.]+) - (?P<user>[w]+) (?P<bytes_in>[d]+) [(?P<timestamp>.*)] \"(?P<method>[w]+) (?P<path>.*)\" (?P<status>[d]+) (?P<bytes_out>[d]+)$\\']\\n\\n# Sample the data to save on cost\\n[transforms.apache_sampler]\\n  inputs       = [\"apache_parser\"]\\n  type         = \"sampler\"\\n  rate         = 50                            # only keep 50%\\n\\n# Send structured data to a short-term storage\\n[sinks.es_cluster]\\n  inputs       = [\"apache_sampler\"]            # only take sampled data\\n  type         = \"elasticsearch\"\\n  host         = \"http://79.12.221.222:9200\"   # local or external host\\n  index        = \"vector-%Y-%m-%d\"             # daily indices\\n\\n# Send structured data to a cost-effective long-term storage\\n[sinks.s3_archives]\\n  inputs       = [\"apache_parser\"]             # don\\'t sample for S3\\n  type         = \"aws_s3\"\\n  region       = \"us-east-1\"\\n  bucket       = \"my-log-archives\"\\n  key_prefix   = \"date=%Y-%m-%d\"               # daily partitions, hive friendly format\\n  compression  = \"gzip\"                        # compress final objects\\n  encoding     = \"ndjson\"                      # new line delimited JSON\\n  [sinks.s3_archives.batch]\\n    max_size   = 10000000                      # 10mb uncompressed\\n\\n')),Object(o.b)(\"p\",null,\"The key thing to notice above is the use of the \",Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"inputs\"),\" option. This connects\\nVector's component to create a pipeline. For a simple introduction, please\\nrefer to the:\"),Object(o.b)(l.a,{to:\"/guides/getting-started/your-first-pipeline/\",mdxType:\"Jump\"},\"Getting Started Guide\"),Object(o.b)(\"h2\",{id:\"reference\"},\"Reference\"),Object(o.b)(\"p\",null,\"Vector provides a \",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/\"}),\"full reference\"),\" that you can use to build\\nyour configuration files.\"),Object(o.b)(l.a,{to:\"/docs/reference/sources/\",mdxType:\"Jump\"},\"Sources\"),Object(o.b)(l.a,{to:\"/docs/reference/transforms/\",mdxType:\"Jump\"},\"Transforms\"),Object(o.b)(l.a,{to:\"/docs/reference/sinks/\",mdxType:\"Jump\"},\"Sinks\"),Object(o.b)(\"p\",null,\"And for more advanced techniques:\"),Object(o.b)(l.a,{to:\"/docs/reference/env-vars/\",mdxType:\"Jump\"},\"Env Vars\"),Object(o.b)(l.a,{to:\"/docs/reference/global-options/\",mdxType:\"Jump\"},\"Global options\"),Object(o.b)(l.a,{to:\"/docs/reference/templating/\",mdxType:\"Jump\"},\"Templating\"),Object(o.b)(l.a,{to:\"/docs/reference/tests/\",mdxType:\"Jump\"},\"Tests\"),Object(o.b)(\"h2\",{id:\"how-it-works\"},\"How It Works\"),Object(o.b)(\"h3\",{id:\"config-file-location\"},\"Config File Location\"),Object(o.b)(\"p\",null,\"The location of your Vector configuration file depends on your \",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/setup/installation/\"}),\"installation\\nmethod\"),\". For most Linux based systems the file can be\\nfound at \",Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"/etc/vector/vector.toml\"),\".\"),Object(o.b)(\"h3\",{id:\"environment-variables\"},\"Environment Variables\"),Object(o.b)(\"p\",null,\"Vector will interpolate environment variables within your configuration file\\nwith the following syntax:\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[transforms.add_host]\\n  type = \"add_fields\"\\n\\n  [transforms.add_host.fields]\\n    host = \"${HOSTNAME}\"\\n    environment = \"${ENV:-development}\" # default value when not present\\n')),Object(o.b)(i.a,{type:\"info\",mdxType:\"Alert\"},Object(o.b)(\"p\",null,\"Interpolation is done before parsing the configuration file. As such, the\\nentire \",Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"${ENV_VAR}\"),\" variable will be replaced, hence the requirement of\\nquotes around the definition.\")),Object(o.b)(\"p\",null,\"Please refer to the \",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/env-vars/\"}),\"environment variables reference\"),\"\\nfor more info.\"),Object(o.b)(\"h3\",{id:\"multiple-config-files\"},\"Multiple config files\"),Object(o.b)(\"p\",null,\"You can pass multiple configuration files when starting Vector:\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-bash\"}),\"vector --config vector1.toml --config vector2.toml\\n\")),Object(o.b)(\"p\",null,\"Or use a \",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/Glob_(programming)\"}),\"globbing syntax\"),\":\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-bash\"}),\"vector --config /etc/vector/*.toml\\n\")),Object(o.b)(\"h3\",{id:\"syntax\"},\"Syntax\"),Object(o.b)(\"p\",null,\"The Vector configuration file follows the \",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://github.com/toml-lang/toml\"}),\"TOML\"),\" syntax for it's\\nsimplicity, explicitness, and relaxed white-space parsing. For more information,\\nplease refer to the \",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"https://github.com/toml-lang/toml\"}),\"TOML documentation\"),\".\"),Object(o.b)(\"h3\",{id:\"templating\"},\"Templating\"),Object(o.b)(\"p\",null,\"Select configuration options support Vector's\\n\",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/templating/\"}),\"templating syntax\"),\" to produce dynamic values derived\\nfrom the event's data. Two syntaxes are supported for fields that support field\\ninterpolation:\"),Object(o.b)(\"ol\",null,Object(o.b)(\"li\",{parentName:\"ol\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://docs.rs/chrono/0.4.11/chrono/format/strftime/index.html#specifiers\"}),\"Strptime specifiers\"),\". Ex: \",Object(o.b)(\"inlineCode\",{parentName:\"li\"},\"date=%Y/%m/%d\")),Object(o.b)(\"li\",{parentName:\"ol\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"/docs/about/data-model/\"}),\"Event fields\"),\". Ex: \",Object(o.b)(\"inlineCode\",{parentName:\"li\"},\"{{ field_name }}\"))),Object(o.b)(\"p\",null,\"For example:\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\",metastring:'title=\"vector.toml\"',title:'\"vector.toml\"'}),'[sinks.es_cluster]\\n  type  = \"elasticsearch\"\\n  index = \"user-{{ user_id }}-%Y-%m-%d\"\\n')),Object(o.b)(\"p\",null,\"The above \",Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"index\"),\" value will be calculated for \",Object(o.b)(\"em\",{parentName:\"p\"},\"each\"),\" event. For example, given\\nthe following event:\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-json\"}),'{\\n  \"timestamp\": \"2019-05-02T00:23:22Z\",\\n  \"message\": \"message\",\\n  \"user_id\": 2\\n}\\n')),Object(o.b)(\"p\",null,\"The \",Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"index\"),\" value will result in:\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-toml\"}),'index = \"user-2-2019-05-02\"\\n')),Object(o.b)(\"p\",null,\"Learn more in the \",Object(o.b)(\"a\",Object(n.a)({parentName:\"p\"},{href:\"/docs/reference/templating/\"}),\"templating reference\"),\".\"),Object(o.b)(\"h3\",{id:\"types\"},\"Types\"),Object(o.b)(\"p\",null,\"All TOML values types are supported. For convenience this includes:\"),Object(o.b)(\"ul\",null,Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#string\"}),\"Strings\")),Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#integer\"}),\"Integers\")),Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#float\"}),\"Floats\")),Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#boolean\"}),\"Booleans\")),Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#offset-date-time\"}),\"Offset Date-Times\")),Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#local-date-time\"}),\"Local Date-Times\")),Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#local-date\"}),\"Local Dates\")),Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#local-time\"}),\"Local Times\")),Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#array\"}),\"Arrays\")),Object(o.b)(\"li\",{parentName:\"ul\"},Object(o.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://github.com/toml-lang/toml#table\"}),\"Tables\"))))}m.isMDXComponent=!0},314:function(e,t,a){\"use strict\";var n=a(0),r=a.n(n),o=a(306),i=a.n(o);a(93);t.a=function({children:e,className:t,fill:a,icon:n,rounded:o,type:l}){let c=null;switch(l){case\"danger\":c=\"alert-triangle\";break;case\"success\":c=\"check-circle\";break;case\"warning\":c=\"alert-triangle\";break;default:c=\"info\"}return r.a.createElement(\"div\",{className:i()(t,\"alert\",\"alert--\"+l,{\"alert--fill\":a,\"alert--icon\":!1!==n,\"alert--rounded\":!0===o}),role:\"alert\"},!1!==n&&r.a.createElement(\"i\",{className:i()(\"feather\",\"icon-\"+(n||c))}),e)}},321:function(e,t,a){\"use strict\";var n=a(0),r=a.n(n),o=a(313),i=a(306),l=a.n(i);a(94);t.a=function({children:e,className:t,badge:a,leftIcon:n,rightIcon:i,size:c,target:s,to:b}){let p=l()(\"jump-to\",\"jump-to--\"+c,t),m=r.a.createElement(\"div\",{className:\"jump-to--inner\"},r.a.createElement(\"div\",{className:\"jump-to--inner-2\"},n&&r.a.createElement(\"div\",{className:\"jump-to--left\"},r.a.createElement(\"i\",{className:\"feather icon-\"+n})),r.a.createElement(\"div\",{className:\"jump-to--main\"},a?r.a.createElement(\"span\",{className:\"badge badge--primary badge--right\"},a):\"\",e),r.a.createElement(\"div\",{className:\"jump-to--right\"},r.a.createElement(\"i\",{className:`feather icon-${i||\"chevron-right\"} arrow`}))));return s?r.a.createElement(\"a\",{href:b,target:s,className:p},m):r.a.createElement(o.a,{to:b,className:p},m)}}}]);","extractedComments":[]}